File,Line,Function,Executable Source Lines,Executable Source Lines Covered,Instructions,Instructions Covered,Run Count,Instructions Executed
,0,"____disable_irq_from_thumb",0,0,3,2,1344,2680
,0,"____enable_irq_from_thumb",0,0,3,0,0,0
,0,"___Unwind_Resume",0,0,11,0,0,0
,0,"___ZN13TimeStretcher12getSamplePosEl_from_thumb",0,0,3,0,0,0
,0,"___ZN5Delay7processESt4spanI12StereoSampleLj4294967295EERKNS_5StateE_from_thumb",0,0,3,2,3,6
,0,"___ZN6deluge3dsp6reverb8Freeverb6updateEv_from_thumb",0,0,3,0,0,0
,0,"__adddf3",0,0,202,0,0,0
,0,"__adjust_heap<SortedTask*, int, SortedTask, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, int, int, struct SortedTask, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__advance<const RuntimeFeatureSettingOption*, int>(const struct RuntimeFeatureSettingOption*&, int, struct random_access_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"__aeabi_d2lz",0,0,15,0,0,0
,0,"__aeabi_d2ulz",0,0,13,0,0,0
,0,"__aeabi_drsub",0,0,3,0,0,0
,0,"__aeabi_dsub",0,0,203,0,0,0
,0,"__aeabi_f2d",0,0,21,0,0,0
,0,"__aeabi_fadd",0,0,120,0,0,0
,0,"__aeabi_frsub",0,0,124,0,0,0
,0,"__aeabi_i2d",0,0,12,0,0,0
,0,"__aeabi_i2f",0,0,10,0,0,0
,0,"__aeabi_idivmod",0,0,8,0,0,0
,0,"__aeabi_ldiv0",0,0,1,0,0,0
,0,"__aeabi_ldivmod",0,0,55,0,0,0
,0,"__aeabi_uidiv",0,0,191,144,1,209
,0,"__aeabi_uidivmod",0,0,8,7,2,10
,0,"__aeabi_ul2d",0,0,34,0,0,0
,0,"__aeabi_ul2f",0,0,45,0,0,0
,0,"__aeabi_uldivmod",0,0,16,0,0,0
,0,"__aeabi_unwind_cpp_pr0",0,0,2,0,0,0
,0,"__aeabi_unwind_cpp_pr1",0,0,2,0,0,0
,0,"__aeabi_unwind_cpp_pr2",0,0,2,0,0,0
,0,"__apply_impl<std::ranges::__detail::__tuple_for_each<std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&>(std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&)::<lambda(_Ts&& ...)>, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&, 0, 1>(struct, struct pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> > >&, struct integer_sequence<unsigned int, 0, 1>) (always inlined)",0,0,0,0,0,0
,0,"__bit_width<unsigned int>(unsigned int) (always inlined)",0,0,0,0,0,0
,0,"__char_traits_cmp_cat<std::char_traits<char> >(int) (always inlined)",0,0,0,0,0,0
,0,"__copy_move<false, false, std::random_access_iterator_tag>::__assign_one<RuntimeFeatureSettingOption, const RuntimeFeatureSettingOption>(struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<char const* const*, std::basic_string_view<char>*>(const char**, const char**, class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<const RuntimeFeatureSettingOption, RuntimeFeatureSettingOption>(const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*, struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move<true, false, std::random_access_iterator_tag>::__assign_one<SortedTask, SortedTask>(struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_a1<false, char const* const*, std::basic_string_view<char>*>(const char**, const char**, class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_a1<false, const RuntimeFeatureSettingOption*, RuntimeFeatureSettingOption*>(const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*, struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_a2<false, char const* const*, std::basic_string_view<char>*>(const char**, const char**, class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_a2<false, const RuntimeFeatureSettingOption*, RuntimeFeatureSettingOption*>(const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*, struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_a<false, char const* const*, std::basic_string_view<char>*>(const char**, const char**, class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_a<false, const RuntimeFeatureSettingOption*, RuntimeFeatureSettingOption*>(const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*, struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<SortedTask, SortedTask>(struct SortedTask*, struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_backward_a1<true, SortedTask*, SortedTask*>(struct SortedTask*, struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_backward_a2<true, SortedTask*, SortedTask*>(struct SortedTask*, struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
,0,"__copy_move_backward_a<true, SortedTask*, SortedTask*>(struct SortedTask*, struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
,0,"__countl_zero<unsigned int>(unsigned int) (always inlined)",0,0,0,0,0,0
,0,"__delugeDealloc_from_arm",0,0,1,0,0,0
"isr.S",71,"__disable_fiq",3,0,3,0,0,0
"isr.S",55,"__disable_irq",3,3,3,3,1341,5356
,0,"__distance<__gnu_cxx::__normal_iterator<MenuItem**, std::span<MenuItem*> > >(class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, struct random_access_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"__distance<const RuntimeFeatureSettingOption*>(const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*, struct random_access_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"__distance<MenuItem* const*>(const class MenuItem**, const class MenuItem**, struct random_access_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"__divsi3",0,0,211,0,0,0
,0,"__do_visit<void, std::__detail::__variant::_Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::_M_reset()::<lambda(auto:19&&)>, std::variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&>(struct, class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"__emplace<0, false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>(struct _Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"__emplace<1, false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>(struct _Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
"isr.S",63,"__enable_fiq",3,0,3,0,0,0
"isr.S",47,"__enable_irq",3,3,3,3,1063,4164
,0,"__errno",0,0,4,0,0,0
,0,"__extent_storage<4294967295>::__extent_storage(const class __extent_storage<4294967295>*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"__extent_storage<4294967295>::_M_extent(const class __extent_storage<4294967295>*) (always inlined)",0,0,0,0,0,0
,0,"__fill_a1<long int*, int>(long int*, long int*, const int&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a1<long int*, long int>(long int*, long int*, const long int&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a1<long int*, std::span<long int>, int>(class __normal_iterator<long int*, std::span<long int, 4294967295> >, class __normal_iterator<long int*, std::span<long int, 4294967295> >, const int&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a1<RGB*, RGB>(class RGB*, class RGB*, const class RGB&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a1<signed char>(signed char*, signed char*, const signed char&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a1<StereoSample*, std::span<StereoSample>, StereoSample>(class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, const struct StereoSample&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a1<StereoSample*, StereoSample>(struct StereoSample*, struct StereoSample*, const struct StereoSample&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a<__gnu_cxx::__normal_iterator<long int*, std::span<long int> >, int>(class __normal_iterator<long int*, std::span<long int, 4294967295> >, class __normal_iterator<long int*, std::span<long int, 4294967295> >, const int&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, StereoSample>(class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, const struct StereoSample&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a<long int*, long int>(long int*, long int*, const long int&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a<RGB*, RGB>(class RGB*, class RGB*, const class RGB&) (always inlined)",0,0,0,0,0,0
,0,"__fill_a<signed char*, signed char>(signed char*, signed char*, const signed char&) (always inlined)",0,0,0,0,0,0
,0,"__fill_n_a<long int*, unsigned int, long int>(long int*, unsigned int, const long int&, struct random_access_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"__fill_n_a<signed char*, unsigned int, signed char>(signed char*, unsigned int, const signed char&, struct random_access_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"__final_insertion_sort<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__fixsfdi",0,0,12,0,0,0
,0,"__fixunssfdi",0,0,15,0,0,0
,0,"__floatdidf",0,0,28,0,0,0
,0,"__floatdisf",0,0,39,0,0,0
,0,"__floatunsidf",0,0,10,0,0,0
,0,"__floatunsisf",0,0,13,0,0,0
,0,"__from_chars_alnum<true, unsigned int>(const char*&, const char*, unsigned int&, int) (always inlined)",0,0,0,0,0,0
,0,"__from_chars_alnum_to_val<true>(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::_M_reset()::<lambda(auto:19&&)>&&, std::variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&)>, std::integer_sequence<unsigned int, 0> >::__visit_invoke(struct, class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"__get<1, std::variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&>(class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"__get_n<1, std::__detail::__variant::_Variadic_union<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&>(union _Variadic_union<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"__gnu_Unwind_Backtrace",0,0,49,0,0,0
,0,"__gnu_unwind_execute",0,0,290,0,0,0
,0,"__gnu_Unwind_ForcedUnwind",0,0,9,0,0,0
,0,"__gnu_unwind_get_pr_addr",0,0,16,0,0,0
,0,"__gnu_unwind_pr_common",0,0,271,0,0,0
,0,"__gnu_Unwind_RaiseException",0,0,41,0,0,0
,0,"__gnu_Unwind_Restore_VFP",0,0,2,0,0,0
,0,"__gnu_Unwind_Restore_VFP_D",0,0,3,0,0,0
,0,"__gnu_Unwind_Restore_VFP_D_16_to_31",0,0,3,0,0,0
,0,"__gnu_Unwind_Restore_WMMXC",0,0,2,0,0,0
,0,"__gnu_Unwind_Restore_WMMXD",0,0,2,0,0,0
,0,"__gnu_Unwind_Resume",0,0,28,0,0,0
,0,"__gnu_Unwind_Resume_or_Rethrow",0,0,7,0,0,0
,0,"__gnu_Unwind_Save_VFP",0,0,2,0,0,0
,0,"__gnu_Unwind_Save_VFP_D",0,0,3,0,0,0
,0,"__gnu_Unwind_Save_VFP_D_16_to_31",0,0,3,0,0,0
,0,"__gnu_Unwind_Save_WMMXC",0,0,2,0,0,0
,0,"__gnu_Unwind_Save_WMMXD",0,0,2,0,0,0
,0,"__heap_select<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__ieee754_fmod",0,0,300,0,0,0
,0,"__ieee754_rem_pio2",0,0,178,0,0,0
,0,"__ieee754_sqrtf",0,0,2,0,0,0
,0,"__insertion_sort<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
"stl_algo.h",1922,"__introsort_loop<SortedTask*, int, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, int, struct _Iter_less_iter)",48,0,270,0,0,0
,0,"__invoke<Error (&)(FatFS::Error), FatFS::Error>(enum Error(enum Error)&, enum Error) (always inlined)",0,0,0,0,0,0
,0,"__invoke<std::ranges::__detail::__tuple_for_each<std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&>(std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&)::<lambda(_Ts&& ...)>, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&>(struct, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&) (always inlined)",0,0,0,0,0,0
,0,"__invoke<std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&>(struct &, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&) (always inlined)",0,0,0,0,0,0
,0,"__invoke_impl<Error, Error (&)(FatFS::Error), FatFS::Error>(struct __invoke_other, enum Error(enum Error)&, enum Error) (always inlined)",0,0,0,0,0,0
,0,"__invoke_impl<int, deluge_main()::<lambda(auto:62)>&, PIC::Response>(struct __invoke_other, struct &, enum Response) (always inlined)",0,0,0,0,0,0
,0,"__invoke_impl<void, std::__detail::__variant::_Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::_M_reset()::<lambda(auto:19&&)>, deluge::dsp::reverb::Freeverb&>(struct __invoke_other, struct, class Freeverb&) (always inlined)",0,0,0,0,0,0
,0,"__invoke_impl<void, std::__detail::__variant::_Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::_M_reset()::<lambda(auto:19&&)>, deluge::dsp::reverb::Mutable&>(struct __invoke_other, struct, class Mutable&) (always inlined)",0,0,0,0,0,0
,0,"__invoke_impl<void, std::ranges::__detail::__tuple_for_each<std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&>(std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&)::<lambda(_Ts&& ...)>, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&>(struct __invoke_other, struct, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&) (always inlined)",0,0,0,0,0,0
,0,"__invoke_impl<void, std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&>(struct __invoke_other, struct &, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >&) (always inlined)",0,0,0,0,0,0
,0,"__invoke_r<long int, deluge_main()::<lambda(auto:62)>&, PIC::Response>(struct &, enum Response) (always inlined)",0,0,0,0,0,0
,0,"__invoke_r<void, std::__detail::__variant::_Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::_M_reset()::<lambda(auto:19&&)>, deluge::dsp::reverb::Freeverb&>(struct, class Freeverb&) (always inlined)",0,0,0,0,0,0
,0,"__invoke_r<void, std::__detail::__variant::_Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::_M_reset()::<lambda(auto:19&&)>, deluge::dsp::reverb::Mutable&>(struct, class Mutable&) (always inlined)",0,0,0,0,0,0
,0,"__kernel_cos",0,0,66,0,0,0
,0,"__kernel_rem_pio2",0,0,530,0,0,0
,0,"__kernel_sin",0,0,33,0,0,0
,0,"__lg<int>(int) (always inlined)",0,0,0,0,0,0
,0,"__libc_init_array",0,0,25,0,0,0
,0,"__logf_from_arm",0,0,1,1,115,115
,0,"__make_heap<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct _Iter_less_iter&) (always inlined)",0,0,0,0,0,0
,0,"__math_check_oflow",0,0,10,0,0,0
,0,"__math_check_uflow",0,0,6,0,0,0
,0,"__math_divzero",0,0,13,0,0,0
,0,"__math_divzerof",0,0,9,0,0,0
,0,"__math_invalid",0,0,9,0,0,0
,0,"__math_invalidf",0,0,9,0,0,0
,0,"__math_may_uflowf",0,0,2,0,0,0
,0,"__math_oflow",0,0,2,0,0,0
,0,"__math_oflowf",0,0,2,0,0,0
,0,"__math_uflow",0,0,2,0,0,0
,0,"__math_uflowf",0,0,2,0,0,0
,0,"__memcpy_from_thumb",0,0,3,0,0,0
,0,"__memmove_from_thumb",0,0,3,0,0,0
,0,"__memset_from_arm",0,0,1,0,0,0
,0,"__move_median_to_first<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__normal_iterator<long int*, std::span<long int, 4294967295> >::__normal_iterator(const class __normal_iterator<long int*, std::span<long int, 4294967295> >*, const long int*&) (always inlined)",0,0,0,0,0,0
,0,"__normal_iterator<MenuItem**, std::vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> > >::operator--(const class __normal_iterator<MenuItem**, std::vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> > >*, int) (always inlined)",0,0,0,0,0,0
,0,"__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >::operator++(const class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >*) (always inlined)",0,0,0,0,0,0
,0,"__partial_sort<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__pop_heap<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct SortedTask*, struct _Iter_less_iter&) (always inlined)",0,0,0,0,0,0
,0,"__popcount<short unsigned int>(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"__popcountsi2",0,0,13,0,0,0
,0,"__push_heap<SortedTask*, int, SortedTask, __gnu_cxx::__ops::_Iter_less_val>(struct SortedTask*, int, int, struct SortedTask, struct _Iter_less_val&) (always inlined)",0,0,0,0,0,0
,0,"__raise_and_add<unsigned int>(unsigned int&, int, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"__register_exitproc",0,0,62,0,0,0
,0,"__relocate_a<deluge::l10n::String*, deluge::l10n::String*, deluge::memory::fallback_allocator<deluge::l10n::String> >(enum String*, enum String*, enum String*, class fallback_allocator<deluge::l10n::String>&) (always inlined)",0,0,0,0,0,0
,0,"__relocate_a<std::basic_string_view<char>*, std::basic_string_view<char>*, deluge::memory::fallback_allocator<std::basic_string_view<char> > >(class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*, class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&) (always inlined)",0,0,0,0,0,0
,0,"__relocate_a_1<deluge::l10n::String*, deluge::l10n::String*, deluge::memory::fallback_allocator<deluge::l10n::String> >(enum String*, enum String*, enum String*, class fallback_allocator<deluge::l10n::String>&) (always inlined)",0,0,0,0,0,0
,0,"__relocate_a_1<std::basic_string_view<char>*, std::basic_string_view<char>*, deluge::memory::fallback_allocator<std::basic_string_view<char> > >(class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*, class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&) (always inlined)",0,0,0,0,0,0
,0,"__relocate_object_a<deluge::l10n::String, deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >(enum String* restrict, enum String* restrict, class fallback_allocator<deluge::l10n::String>&) (always inlined)",0,0,0,0,0,0
,0,"__relocate_object_a<std::basic_string_view<char>, std::basic_string_view<char>, deluge::memory::fallback_allocator<std::basic_string_view<char> > >(class basic_string_view<char, std::char_traits<char> >* restrict, class basic_string_view<char, std::char_traits<char> >* restrict, class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&) (always inlined)",0,0,0,0,0,0
,0,"__restore_core_regs",0,0,8,0,0,0
,0,"__retarget_lock_acquire_recursive",0,0,1,0,0,0
,0,"__retarget_lock_release_recursive",0,0,1,0,0,0
,0,"__reverse<std::basic_string_view<char>*>(class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*, struct random_access_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"__sort<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__sort_heap<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct _Iter_less_iter&) (always inlined)",0,0,0,0,0,0
"automation.h",29,"__static_initialization_and_destruction_0()",41,0,2624,0,0,0
,0,"__subsf3",0,0,121,0,0,0
,0,"__sv_check(unsigned int, unsigned int, const char*) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.h",60,"__tcf_0",3,0,15,0,0,0
"general_memory_allocator.h",99,"__tcf_0()",5,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.1",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.10",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.11.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.12.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.13",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.14.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.15",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.16.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.17.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.18",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.19",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.2.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.20.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.21",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.22",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.23",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.24",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.25.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.26",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.27.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.28",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.29",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.3.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.30.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.31",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.32",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.33.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.34.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.35.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.36.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.37",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.38.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.39.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.4",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.40",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.41",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.42.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.43",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.44",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.45",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.46.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.47",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.48",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.49.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.5.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.50.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.6",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.7",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.8.lto_priv.0",1,0,16,0,0,0
"general_memory_allocator.h",99,"__tcf_0.lto_priv.9",1,0,16,0,0,0
,0,"__throw_bad_optional_access() (always inlined)",0,0,0,0,0,0
"variant",1325,"__throw_bad_variant_access(bool)",1,0,2,0,0,0
,0,"__throw_bad_variant_access(const char*) (always inlined)",0,0,0,0,0,0
,0,"__tuple_for_each<std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&>(struct &, struct pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> > >&) (always inlined)",0,0,0,0,0,0
,0,"__udivmoddi4",0,0,90,0,0,0
,0,"__unguarded_insertion_sort<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__unguarded_linear_insert<SortedTask*, __gnu_cxx::__ops::_Val_less_iter>(struct SortedTask*, struct _Val_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__unguarded_partition<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__unguarded_partition_pivot<SortedTask*, __gnu_cxx::__ops::_Iter_less_iter>(struct SortedTask*, struct SortedTask*, struct _Iter_less_iter) (always inlined)",0,0,0,0,0,0
,0,"__uninitialized_copy_a<__gnu_cxx::__normal_iterator<MenuItem**, std::span<MenuItem*> >, MenuItem**, deluge::memory::fallback_allocator<MenuItem*> >(class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, class MenuItem**, class fallback_allocator<MenuItem*>&) (always inlined)",0,0,0,0,0,0
,0,"__uninitialized_copy_a<char const**, std::basic_string_view<char>*, deluge::memory::fallback_allocator<std::basic_string_view<char> > >(const char**, const char**, class basic_string_view<char, std::char_traits<char> >*, class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&) (always inlined)",0,0,0,0,0,0
,0,"__uninitialized_copy_a<const deluge::l10n::String*, deluge::l10n::String*, deluge::memory::fallback_allocator<deluge::l10n::String> >(const enum String*, const enum String*, enum String*, class fallback_allocator<deluge::l10n::String>&) (always inlined)",0,0,0,0,0,0
,0,"__uninitialized_copy_a<const RuntimeFeatureSettingOption*, RuntimeFeatureSettingOption*, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >(const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*, struct RuntimeFeatureSettingOption*, class fallback_allocator<RuntimeFeatureSettingOption>&) (always inlined)",0,0,0,0,0,0
,0,"__uninitialized_copy_a<const std::basic_string_view<char>*, std::basic_string_view<char>*, deluge::memory::fallback_allocator<std::basic_string_view<char> > >(const class basic_string_view<char, std::char_traits<char> >*, const class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*, class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&) (always inlined)",0,0,0,0,0,0
,0,"__uninitialized_copy_a<MenuItem* const*, MenuItem**, deluge::memory::fallback_allocator<MenuItem*> >(const class MenuItem**, const class MenuItem**, class MenuItem**, class fallback_allocator<MenuItem*>&) (always inlined)",0,0,0,0,0,0
,0,"_Alloc_hider::_Alloc_hider(const struct _Alloc_hider*, char*, class allocator<char>) (always inlined)",0,0,0,0,0,0
,0,"_atoi(const char**) (always inlined)",0,0,0,0,0,0
,0,"_Base_manager<deluge_main()::<lambda(auto:62)> >::_M_create<const deluge_main()::<lambda(auto:62)>&>(union _Any_data&, const struct &, struct integral_constant<bool, true>) (always inlined)",0,0,0,0,0,0
,0,"_Base_manager<deluge_main()::<lambda(auto:62)> >::_M_create<deluge_main()::<lambda(auto:62)> >(union _Any_data&, struct, struct integral_constant<bool, true>) (always inlined)",0,0,0,0,0,0
,0,"_Base_manager<deluge_main()::<lambda(auto:62)> >::_M_init_functor<const deluge_main()::<lambda(auto:62)>&>(union _Any_data&, const struct &) (always inlined)",0,0,0,0,0,0
,0,"_Base_manager<deluge_main()::<lambda(auto:62)> >::_M_init_functor<deluge_main()::<lambda(auto:62)> >(union _Any_data&, struct) (always inlined)",0,0,0,0,0,0
,0,"_Base_manager<deluge_main()::<lambda(auto:62)> >::_M_manager(union _Any_data&, const union _Any_data&, enum _Manager_operation) (always inlined)",0,0,0,0,0,0
,0,"_Construct<DelayBuffer::ResampleConfig, DelayBuffer::ResampleConfig>(struct ResampleConfig*, struct ResampleConfig) (always inlined)",0,0,0,0,0,0
,0,"_Construct<deluge::dsp::reverb::Freeverb>(class Freeverb*) (always inlined)",0,0,0,0,0,0
,0,"_Construct<deluge::dsp::reverb::Mutable>(class Mutable*) (always inlined)",0,0,0,0,0,0
,0,"_Construct<FatFS::File, FatFS::File&>(class File*, class File&) (always inlined)",0,0,0,0,0,0
,0,"_Copy_assign_base<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::~_Copy_assign_base(const struct _Copy_assign_base<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"_Copy_ctor_base<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::~_Copy_ctor_base(const struct _Copy_ctor_base<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"_Destroy<deluge::dsp::reverb::Freeverb>(class Freeverb*) (always inlined)",0,0,0,0,0,0
,0,"_Destroy<deluge::dsp::reverb::Mutable>(class Mutable*) (always inlined)",0,0,0,0,0,0
,0,"_DoInit() (always inlined)",0,0,0,0,0,0
"printf.c",455,"_etoa(void(char, void*, unsigned int, unsigned int)*, char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)",30,0,234,0,0,0
"printf.c",325,"_ftoa(void(char, void*, unsigned int, unsigned int)*, char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)",45,0,282,0,0,0
"midi_engine.cpp",844,"_FUN()",208,0,1067,48,5745,277277
"load_song_ui.cpp",448,"_FUN()",1,0,3,0,0,0
"deluge.cpp",607,"_FUN()",1,1,1,1,6,6
"deluge.cpp",589,"_FUN()",1,1,2,2,4,8
"deluge.cpp",585,"_FUN()",1,1,2,2,5,10
"deluge.cpp",577,"_FUN()",1,1,2,2,1308,2616
"deluge.cpp",574,"_FUN()",1,1,1,1,71,71
"audio_recorder.cpp",175,"_FUN()",1,0,20,6,1,6
"audio_file_manager.cpp",1244,"_FUN()",4,0,186,8,1,8
,0,"_Function_base::~_Function_base(const class _Function_base*) (always inlined)",0,0,0,0,0,0
"invoke.h",60,"_Function_handler<long int(PIC::Response), deluge_main()::<lambda(auto:62)> >::_M_invoke(const union _Any_data&, enum Response)",3,0,71,0,0,0
"std_function.h",267,"_Function_handler<long int(PIC::Response), deluge_main()::<lambda(auto:62)> >::_M_manager(union _Any_data&, const union _Any_data&, enum _Manager_operation)",2,0,18,0,0,0
,0,"_GetAvailWriteSpace(struct SEGGER_RTT_BUFFER_UP*) (always inlined)",0,0,0,0,0,0
"resetprg.c",97,"_init()",1,0,1,0,0,0
,0,"_is_digit(char) (always inlined)",0,0,0,0,0,0
,0,"_Iter_less_iter::operator()<SortedTask*, SortedTask*>(const struct _Iter_less_iter*, struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
,0,"_Move_assign_base<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::~_Move_assign_base(const struct _Move_assign_base<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"_Move_ctor_base<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::~_Move_ctor_base(const struct _Move_ctor_base<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
"printf.c",217,"_ntoa_format(void(char, void*, unsigned int, unsigned int)*, char*, unsigned int, unsigned int, char*, unsigned int, _Bool, unsigned int, unsigned int, unsigned int, unsigned int)",27,0,188,0,0,0
"printf.c",273,"_ntoa_long(void(char, void*, unsigned int, unsigned int)*, char*, unsigned int, unsigned int, long unsigned int, _Bool, long unsigned int, unsigned int, unsigned int, unsigned int)",7,1,58,32,1,40
"printf.c",298,"_ntoa_long_long(void(char, void*, unsigned int, unsigned int)*, char*, unsigned int, unsigned int, long long unsigned int, _Bool, long long unsigned int, unsigned int, unsigned int, unsigned int)",7,0,73,0,0,0
,0,"_Optional_base<FatFS::File, false, false>::_Optional_base(const struct _Optional_base<FatFS::File, false, false>*) (always inlined)",0,0,0,0,0,0
,0,"_Optional_base<FatFS::File, false, false>::~_Optional_base(const struct _Optional_base<FatFS::File, false, false>*) (always inlined)",0,0,0,0,0,0
,0,"_Optional_base<RGB, true, true>::_Optional_base<RGB&>(const struct _Optional_base<RGB, true, true>*, struct in_place_t, class RGB&) (always inlined)",0,0,0,0,0,0
,0,"_Optional_base_impl<DelayBuffer::ResampleConfig, std::_Optional_base<DelayBuffer::ResampleConfig, true, true> >::_M_construct<DelayBuffer::ResampleConfig>(const class _Optional_base_impl<DelayBuffer::ResampleConfig, std::_Optional_base<DelayBuffer::ResampleConfig, true, true> >*, struct ResampleConfig) (always inlined)",0,0,0,0,0,0
,0,"_Optional_base_impl<DelayBuffer::ResampleConfig, std::_Optional_base<DelayBuffer::ResampleConfig, true, true> >::_M_is_engaged(const class _Optional_base_impl<DelayBuffer::ResampleConfig, std::_Optional_base<DelayBuffer::ResampleConfig, true, true> >*) (always inlined)",0,0,0,0,0,0
,0,"_Optional_base_impl<DelayBuffer::ResampleConfig, std::_Optional_base<DelayBuffer::ResampleConfig, true, true> >::_M_reset(const class _Optional_base_impl<DelayBuffer::ResampleConfig, std::_Optional_base<DelayBuffer::ResampleConfig, true, true> >*) (always inlined)",0,0,0,0,0,0
,0,"_Optional_base_impl<FatFS::File, std::_Optional_base<FatFS::File, false, false> >::_M_construct<FatFS::File&>(const class _Optional_base_impl<FatFS::File, std::_Optional_base<FatFS::File, false, false> >*, class File&) (always inlined)",0,0,0,0,0,0
,0,"_Optional_payload<FatFS::File, false, false, false>::~_Optional_payload(const struct _Optional_payload<FatFS::File, false, false, false>*) (always inlined)",0,0,0,0,0,0
,0,"_Optional_payload<FatFS::File, true, false, false>::_Optional_payload(const struct _Optional_payload<FatFS::File, true, false, false>*) (always inlined)",0,0,0,0,0,0
,0,"_Optional_payload<RGB, true, true, true>::_Optional_payload<RGB&>(const struct _Optional_payload<RGB, true, true, true>*, struct in_place_t, class RGB&) (always inlined)",0,0,0,0,0,0
,0,"_Optional_payload_base<DelayBuffer::ResampleConfig>::_M_destroy(const struct _Optional_payload_base<DelayBuffer::ResampleConfig>*) (always inlined)",0,0,0,0,0,0
,0,"_Optional_payload_base<FatFS::File>::_Optional_payload_base(const struct _Optional_payload_base<FatFS::File>*) (always inlined)",0,0,0,0,0,0
,0,"_Optional_payload_base<RGB>::_Optional_payload_base<RGB&>(const struct _Optional_payload_base<RGB>*, struct in_place_t, class RGB&) (always inlined)",0,0,0,0,0,0
,0,"_Optional_payload_base<RGB>::_Storage<RGB&>(const union _Storage<RGB, true>*, struct in_place_t, class RGB&) (always inlined)",0,0,0,0,0,0
"printf.c",128,"_out_buffer(char, void*, unsigned int, unsigned int)",2,1,4,3,14,56
"printf.c",138,"_out_null(char, void*, unsigned int, unsigned int)",1,0,1,0,0,0
"printf.c",187,"_out_rev(void(char, void*, unsigned int, unsigned int)*, char*, unsigned int, unsigned int, const char*, unsigned int, unsigned int, unsigned int)",10,0,70,0,0,0
,0,"_PrintInt(struct SEGGER_RTT_PRINTF_DESC*, int, unsigned int, unsigned int, unsigned int, unsigned int) (always inlined)",0,0,0,0,0,0
"SEGGER_RTT_printf.c",146,"_PrintUnsigned(struct SEGGER_RTT_PRINTF_DESC*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)",21,0,98,0,0,0
"sd_util.c",261,"_sd_bit_search(short unsigned int)",3,0,13,0,0,0
,0,"_sd_calc_erase_sector(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
,0,"_sd_card_get_scr(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
,0,"_sd_card_get_status(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
,0,"_sd_card_init(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
"sd_cmd.c",405,"_sd_card_send_cmd_arg(struct __sdhndl*, short unsigned int, int, short unsigned int, short unsigned int)",5,0,14,0,0,0
"sd_cmd.c",461,"_sd_card_send_ocr(struct __sdhndl*, int)",30,0,174,0,0,0
,0,"_sd_card_switch_func(struct __sdhndl*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_sd_card_switch_func_access_mode0(struct __sdhndl*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_sd_card_switch_func_access_mode1(struct __sdhndl*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_sd_check_csd(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
"sd_cmd.c",832,"_sd_check_info2_err(struct __sdhndl*)",9,0,23,0,0,0
"sd_cd.c",165,"_sd_check_media(struct __sdhndl*)",6,0,13,0,0,0
"sd_cmd.c",572,"_sd_check_resp_error(struct __sdhndl*)",5,0,41,0,0,0
"sd_int.c",135,"_sd_clear_info(struct __sdhndl*, short unsigned int, short unsigned int)",2,0,7,0,0,0
"sd_int.c",103,"_sd_clear_int_mask(struct __sdhndl*, short unsigned int, short unsigned int)",5,0,15,0,0,0
"sd_trns.c",137,"_sd_dma_trans(struct __sdhndl*, long int)",25,0,110,0,0,0
,0,"_sd_get_info2(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
"sd_int.c",164,"_sd_get_int(struct __sdhndl*)",6,0,25,0,0,0
"sd_cmd.c",628,"_sd_get_resp(struct __sdhndl*, int)",43,0,92,0,0,0
,0,"_sd_get_resp(struct __sdhndl*, int) (always inlined)",0,0,0,0,0,0
,0,"_sd_get_size(struct __sdhndl*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_sd_init_hndl(struct __sdhndl*, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_sd_io_mount(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
,0,"_sd_iswp(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
,0,"_sd_mem_mount(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
"sd_mount.c",1123,"_sd_read_byte(struct __sdhndl*, short unsigned int, short unsigned int, short unsigned int, unsigned char*, short unsigned int)",25,0,101,0,0,0
"sd_cmd.c",228,"_sd_send_acmd(struct __sdhndl*, short unsigned int, short unsigned int, short unsigned int)",6,0,30,0,0,0
"sd_cmd.c",137,"_sd_send_cmd(struct __sdhndl*, short unsigned int)",19,0,100,0,0,0
"sd_cmd.c",333,"_sd_send_iocmd(struct __sdhndl*, short unsigned int, long unsigned int)",19,0,76,0,0,0
"sd_cmd.c",270,"_sd_send_mcmd(struct __sdhndl*, short unsigned int, long unsigned int)",18,0,69,0,0,0
,0,"_sd_set_arg(struct __sdhndl*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"sd_util.c",74,"_sd_set_clock(struct __sdhndl*, int, int)",9,0,46,0,0,0
,0,"_sd_set_err(struct __sdhndl*, int) (always inlined)",0,0,0,0,0,0
"sd_int.c",65,"_sd_set_int_mask(struct __sdhndl*, short unsigned int, short unsigned int)",6,0,17,0,0,0
,0,"_sd_set_io_speed(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
,0,"_sd_set_mem_speed(struct __sdhndl*) (always inlined)",0,0,0,0,0,0
"sd_util.c",130,"_sd_set_port(struct __sdhndl*, int)",18,0,60,0,0,0
,0,"_sd_single_read(struct __sdhndl*, unsigned char*, long unsigned int, int) (always inlined)",0,0,0,0,0,0
,0,"_sd_single_write(struct __sdhndl*, const unsigned char*, long unsigned int, int) (always inlined)",0,0,0,0,0,0
"sd_trns.c",76,"_sd_software_trans(struct __sdhndl*, unsigned char*, long int, int)",10,0,61,0,0,0
,0,"_sd_write_sect(struct __sdhndl*, const unsigned char*, long unsigned int, long int, int) (always inlined)",0,0,0,0,0,0
"sdio_direct.c",183,"_sdio_direct(struct __sdhndl*, unsigned char*, long unsigned int, long unsigned int, long unsigned int, long unsigned int)",12,0,34,0,0,0
,0,"_sdio_read_byte(struct __sdhndl*, unsigned char*, long unsigned int, long unsigned int, long int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_sdio_software_trans2(struct __sdhndl*, unsigned char*, long int, int) (always inlined)",0,0,0,0,0,0
,0,"_Size::operator()<deluge::static_vector<std::basic_string_view<char>, 32>&>(const struct _Size*, struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 32>&) (always inlined)",0,0,0,0,0,0
,0,"_Size::operator()<deluge::static_vector<std::basic_string_view<char>, 3>&>(const struct _Size*, struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>&) (always inlined)",0,0,0,0,0,0
,0,"_Size::operator()<std::vector<std::basic_string_view<char>, deluge::memory::fallback_allocator<std::basic_string_view<char> > >&>(const struct _Size*, class vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >&) (always inlined)",0,0,0,0,0,0
"SEGGER_RTT_printf.c",114,"_StoreChar(struct SEGGER_RTT_PRINTF_DESC*, char)",8,0,28,0,0,0
,0,"_strnlen_s(const char*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_sub_D_65535_1.1",0,0,587,0,0,0
,0,"_sub_I_65535_0.0",0,0,1220,0,0,0
,0,"_Uninitialized<deluge::dsp::reverb::Mutable, false>::_M_get(const struct _Uninitialized<deluge::dsp::reverb::Mutable, false>*) (always inlined)",0,0,0,0,0,0
,0,"_Unwind_Backtrace",0,0,11,0,0,0
,0,"_Unwind_DebugHook",0,0,1,0,0,0
,0,"_Unwind_decode_typeinfo_ptr.constprop.0",0,0,5,0,0,0
,0,"_Unwind_ForcedUnwind",0,0,11,0,0,0
,0,"_Unwind_GetGR",0,0,11,0,0,0
,0,"_Unwind_RaiseException",0,0,11,0,0,0
,0,"_Unwind_Resume_or_Rethrow",0,0,11,0,0,0
,0,"_Unwind_SetGR",0,0,11,0,0,0
,0,"_Unwind_VRS_Get",0,0,22,0,0,0
,0,"_Unwind_VRS_Pop",0,0,277,0,0,0
,0,"_Unwind_VRS_Set",0,0,22,0,0,0
,0,"_Variant_base<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::~_Variant_base(const struct _Variant_base<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"_Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::_M_valid(const struct _Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"_Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::~_Variant_storage(const struct _Variant_storage<false, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"_Vector_base<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::~_Vector_base(const struct _Vector_base<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >*) (always inlined)",0,0,0,0,0,0
"stl_vector.h",364,"_Vector_base<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> >::~_Vector_base(const struct _Vector_base<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> >*)",5,0,23,0,0,0
,0,"_Vector_base<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::_M_allocate(const struct _Vector_base<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_Vector_base<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::_M_deallocate(const struct _Vector_base<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >*, struct RuntimeFeatureSettingOption*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"_Vector_base<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::_Vector_base(const struct _Vector_base<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >*) (always inlined)",0,0,0,0,0,0
,0,"_Vector_impl::_Vector_impl(const struct _Vector_impl*) (always inlined)",0,0,0,0,0,0
,0,"_Vector_impl_data::_Vector_impl_data(const struct _Vector_impl_data*) (always inlined)",0,0,0,0,0,0
"printf.c",565,"_vsnprintf(char*, const unsigned int, const char*, struct __va_list, void(char, void*, unsigned int, unsigned int)*)",107,7,551,75,0,195
,0,"_WriteBlocking(struct SEGGER_RTT_BUFFER_UP*, const char*, unsigned int) (always inlined)",0,0,0,0,0,0
"SEGGER_RTT.c",421,"_WriteNoCheck(struct SEGGER_RTT_BUFFER_UP*, const char*, unsigned int)",6,0,19,0,0,0
,0,"abs(long int) (always inlined)",0,0,0,0,0,0
"absolute_value.cpp",21,"AbsValueFollower::AbsValueFollower(const class AbsValueFollower*)",2,0,14,0,0,0
"absolute_value.cpp",44,"AbsValueFollower::calcApproxRMS(const class AbsValueFollower*, struct StereoSample*, short unsigned int)",11,10,69,67,115,37045
,0,"Action::Action(const class Action*, enum ActionType) (always inlined)",0,0,0,0,0,0
,0,"Action::addConsequence(const class Action*, class Consequence*) (always inlined)",0,0,0,0,0,0
,0,"Action::containsConsequenceNoteArrayChange(const class Action*, class InstrumentClip*, long int, bool) (always inlined)",0,0,0,0,0,0
,0,"Action::containsConsequenceParamChange(const class Action*, class ParamCollection*, long int) (always inlined)",0,0,0,0,0,0
,0,"Action::deleteAllConsequences(const class Action*, long int, class Song*, bool) (always inlined)",0,0,0,0,0,0
"action.cpp",58,"Action::prepareForDestruction(const class Action*, long int, class Song*)",4,0,28,0,0,0
"general_memory_allocator.h",99,"Action::recordAudioClipSampleChange(const class Action*, class AudioClip*)",7,0,39,0,0,0
"general_memory_allocator.h",99,"Action::recordClipExistenceChange(const class Action*, class Song*, class ClipArray*, class Clip*, enum ExistenceChangeType)",12,0,51,0,0,0
"general_memory_allocator.h",99,"Action::recordClipInstanceExistenceChange(const class Action*, class Output*, class ClipInstance*, enum ExistenceChangeType)",7,0,41,0,0,0
"action.cpp",264,"Action::recordClipLengthChange(const class Action*, class Clip*, long int)",9,0,48,0,0,0
"general_memory_allocator.h",99,"Action::recordNoteArrayChangeDefinitely(const class Action*, class InstrumentClip*, long int, class NoteVector*, bool)",8,0,50,0,0,0
"action.cpp",211,"Action::recordNoteArrayChangeIfNotAlreadySnapshotted(const class Action*, class InstrumentClip*, long int, class NoteVector*, bool, bool)",8,0,30,0,0,0
"action.cpp",237,"Action::recordNoteExistenceChange(const class Action*, class InstrumentClip*, long int, class Note*, enum ExistenceChangeType)",10,0,61,0,0,0
,0,"Action::recordNoteExistenceChange(const class Action*, class InstrumentClip*, long int, class Note*, enum ExistenceChangeType) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.h",99,"Action::recordParamChangeDefinitely(const class Action*, const class ModelStackWithAutoParam*, bool)",7,0,63,0,0,0
"action.cpp",164,"Action::recordParamChangeIfNotAlreadySnapshotted(const class Action*, const class ModelStackWithAutoParam*, bool)",5,0,25,0,0,0
,0,"Action::recordParamChangeIfNotAlreadySnapshotted(const class Action*, const class ModelStackWithAutoParam*, bool) (always inlined)",0,0,0,0,0,0
"action.cpp",313,"Action::updateYScrollClipViewAfter(const class Action*, class InstrumentClip*)",15,0,63,0,0,0
,0,"ActionClipState::grabFromClip(const class ActionClipState*, class Clip*) (always inlined)",0,0,0,0,0,0
"action_logger.cpp",860,"ActionLogger::allowedToDoReversion(const class ActionLogger*)",3,0,18,0,0,0
"action_logger.cpp",763,"ActionLogger::closeAction(enum ActionType, const class ActionLogger*)",3,0,10,0,0,0
"action_logger.cpp",776,"ActionLogger::deleteAllLogs(const class ActionLogger*)",4,0,6,0,0,0
"action_logger.cpp",75,"ActionLogger::deleteLastAction(const class ActionLogger*)",6,0,15,0,0,0
"action_logger.cpp",62,"ActionLogger::deleteLastActionIfEmpty(const class ActionLogger*)",4,0,12,0,0,0
"action_logger.cpp",780,"ActionLogger::deleteLog(long int, const class ActionLogger*)",6,0,20,0,0,0
"action_logger.cpp",84,"ActionLogger::getNewAction(enum ActionType, enum ActionAddition, const class ActionLogger*)",67,0,227,0,0,0
,0,"ActionLogger::notifyClipRecordingAborted(const class ActionLogger*, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"ActionLogger::recordPerformanceViewPress(const class ActionLogger*, struct FXColumnPress*, struct FXColumnPress*, long int) (always inlined)",0,0,0,0,0,0
,0,"ActionLogger::recordSwingChange(const class ActionLogger*, signed char, signed char) (always inlined)",0,0,0,0,0,0
,0,"ActionLogger::recordTempoChange(const class ActionLogger*, long long unsigned int, long long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"ActionLogger::recordUnautomatedParamChange(const class ActionLogger*, const class ModelStackWithAutoParam*, enum ActionType) (always inlined)",0,0,0,0,0,0
,0,"ActionLogger::redo(const class ActionLogger*) (always inlined)",0,0,0,0,0,0
"action_logger.cpp",333,"ActionLogger::revert(enum TimeType, bool, bool, const class ActionLogger*)",189,0,859,0,0,0
,0,"ActionLogger::revertAction(const class ActionLogger*, class Action*, bool, bool, enum TimeType) (always inlined)",0,0,0,0,0,0
,0,"ActionLogger::undo(const class ActionLogger*) (always inlined)",0,0,0,0,0,0
"action_logger.cpp",882,"ActionLogger::undoJustOneConsequencePerNoteRow(class ModelStack*, const class ActionLogger*)",23,0,85,0,0,0
"action_logger.cpp",209,"ActionLogger::updateAction(class Action*, const class ActionLogger*)",26,0,80,0,0,0
"ui_timer_manager.cpp",254,"actuallySetKnobIndicatorLevel(unsigned char, unsigned char, bool)",29,0,142,0,0,0
,0,"ActualSource::ActualSource(const class ActualSource*, enum String, class span<MenuItem*, 4294967295>, long int) (always inlined)",0,0,0,0,0,0
"actual_source.h",32,"ActualSource::beginSession(const class ActualSource*, class MenuItem*)",5,0,20,0,0,0
"sound.h",199,"ActualSource::drawName(const class ActualSource*)",6,0,37,0,0,0
"actual_source.h",26,"ActualSource::~ActualSource(const class ActualSource*)",7,0,28,0,0,0
"actual_source.h",26,"ActualSource::~ActualSource(const class ActualSource*)",7,0,25,0,0,0
,0,"ActualSource::~ActualSource(const class ActualSource*) (always inlined)",0,0,0,0,0,0
,0,"add(float[2], float[2]) (always inlined)",0,0,0,0,0,0
,0,"add_saturation(long int, long int) (always inlined)",0,0,0,0,0,0
"functions.cpp",245,"addAudio(struct StereoSample*, struct StereoSample*, long int)",4,0,13,0,0,0
"task_scheduler.cpp",167,"addOnceTask(void()*, double, unsigned char)",13,0,62,0,0,0
"task_scheduler.cpp",156,"addRepeatingTask(void()*, unsigned char, double, double, double)",10,0,39,0,0,0
,0,"advance<const RuntimeFeatureSettingOption*, unsigned int>(const struct RuntimeFeatureSettingOption*&, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"AftertouchToMono::AftertouchToMono(const class AftertouchToMono*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"after_touch_to_mono.h",29,"AftertouchToMono::readCurrentValue(const class AftertouchToMono*)",2,0,6,0,0,0
"value.h",42,"AftertouchToMono::writeCurrentValue(const class AftertouchToMono*)",2,0,8,0,0,0
"menu_item.h",54,"AftertouchToMono::~AftertouchToMono(const class AftertouchToMono*)",1,0,1,0,0,0
"after_touch_to_mono.h",25,"AftertouchToMono::~AftertouchToMono(const class AftertouchToMono*)",2,0,6,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<deluge::l10n::String> >::_S_construct<deluge::l10n::String, const deluge::l10n::String&>(class fallback_allocator<deluge::l10n::String>&, enum String*, const enum String&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<deluge::l10n::String> >::_S_construct<deluge::l10n::String, deluge::l10n::String>(class fallback_allocator<deluge::l10n::String>&, enum String*, enum String) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<deluge::l10n::String> >::construct<deluge::l10n::String, const deluge::l10n::String&>(class fallback_allocator<deluge::l10n::String>&, enum String*, const enum String&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<deluge::l10n::String> >::construct<deluge::l10n::String, deluge::l10n::String>(class fallback_allocator<deluge::l10n::String>&, enum String*, enum String) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<MenuItem*> >::_S_construct<MenuItem*, MenuItem* const&>(class fallback_allocator<MenuItem*>&, class MenuItem**, const class MenuItem*&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<MenuItem*> >::_S_construct<MenuItem*, MenuItem*&>(class fallback_allocator<MenuItem*>&, class MenuItem**, class MenuItem*&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<MenuItem*> >::construct<MenuItem*, MenuItem* const&>(class fallback_allocator<MenuItem*>&, class MenuItem**, const class MenuItem*&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<MenuItem*> >::construct<MenuItem*, MenuItem*&>(class fallback_allocator<MenuItem*>&, class MenuItem**, class MenuItem*&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::_S_construct<RuntimeFeatureSettingOption, const RuntimeFeatureSettingOption&>(class fallback_allocator<RuntimeFeatureSettingOption>&, struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::allocate(class fallback_allocator<RuntimeFeatureSettingOption>&, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::construct<RuntimeFeatureSettingOption, const RuntimeFeatureSettingOption&>(class fallback_allocator<RuntimeFeatureSettingOption>&, struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::deallocate(class fallback_allocator<RuntimeFeatureSettingOption>&, struct RuntimeFeatureSettingOption*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::_S_construct<std::basic_string_view<char>, char const*&>(class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&, class basic_string_view<char, std::char_traits<char> >*, const char*&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::_S_construct<std::basic_string_view<char>, const std::basic_string_view<char, std::char_traits<char> >&>(class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&, class basic_string_view<char, std::char_traits<char> >*, const class basic_string_view<char, std::char_traits<char> >&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::_S_construct<std::basic_string_view<char>, std::basic_string_view<char, std::char_traits<char> > >(class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&, class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::construct<std::basic_string_view<char>, char const*&>(class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&, class basic_string_view<char, std::char_traits<char> >*, const char*&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::construct<std::basic_string_view<char>, const std::basic_string_view<char, std::char_traits<char> >&>(class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&, class basic_string_view<char, std::char_traits<char> >*, const class basic_string_view<char, std::char_traits<char> >&) (always inlined)",0,0,0,0,0,0
,0,"allocator_traits<deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::construct<std::basic_string_view<char>, std::basic_string_view<char, std::char_traits<char> > >(class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&, class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.h",99,"allocLowSpeed(long unsigned int, void*)",3,0,23,0,0,0
"general_memory_allocator.h",99,"allocMaxSpeed(long unsigned int, void*)",3,0,23,0,0,0
,0,"Allpass::Allpass(const class Allpass*) (always inlined)",0,0,0,0,0,0
,0,"AllPass::AllPass(const struct AllPass*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"Allpass::mute(const class Allpass*) (always inlined)",0,0,0,0,0,0
,0,"AllPass::Process(const struct AllPass*, class Context&, float) (always inlined)",0,0,0,0,0,0
,0,"Allpass::setBuffer(const class Allpass*, class span<long int, 4294967295>) (always inlined)",0,0,0,0,0,0
,0,"Allpass::setFeedback(const class Allpass*, float) (always inlined)",0,0,0,0,0,0
,0,"Analog::Analog(const class Analog*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"analog.h",32,"Analog::getOptions(const class Analog*)",4,0,45,0,0,0
"analog.h",28,"Analog::readCurrentValue(const class Analog*)",2,0,6,0,0,0
"value.h",42,"Analog::writeCurrentValue(const class Analog*)",1,0,9,0,0,0
"menu_item.h",54,"Analog::~Analog(const class Analog*)",1,0,1,0,0,0
"analog.h",25,"Analog::~Analog(const class Analog*)",2,0,6,0,0,0
,0,"apply<std::ranges::__detail::__tuple_for_each<std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&>(std::ranges::zip_view<std::span<StereoSample, 4294967295>, std::span<StereoSample, 4294967295> >::_Iterator<true>::operator+=(difference_type) requires  __all_random_access<_Const, _Vs ...>::<lambda(_It&)>&, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&)::<lambda(_Ts&& ...)>, std::pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >&>(struct, struct pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> > >&) (always inlined)",0,0,0,0,0,0
"arpeggiator.cpp",53,"Arpeggiator::Arpeggiator(const class Arpeggiator*)",11,0,49,0,0,0
,0,"Arpeggiator::Arpeggiator(const class Arpeggiator*, enum String, class initializer_list<MenuItem*>) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",134,"Arpeggiator::beginSession(const class Arpeggiator*, class MenuItem*)",2,0,24,0,0,0
,0,"Arpeggiator::calculateNextNoteAndOrOctave(const class Arpeggiator*, class ArpeggiatorSettings*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Arpeggiator::hasAnyInputNotesActive(const class Arpeggiator*)",1,0,5,0,0,0
,0,"Arpeggiator::hasAnyInputNotesActive(const class Arpeggiator*) (always inlined)",0,0,0,0,0,0
"arpeggiator.cpp",256,"Arpeggiator::noteOff(const class Arpeggiator*, class ArpeggiatorSettings*, long int, class ArpReturnInstruction*)",35,0,120,0,0,0
"arpeggiator.cpp",143,"Arpeggiator::noteOn(const class Arpeggiator*, class ArpeggiatorSettings*, long int, long int, class ArpReturnInstruction*, long int, const short int*)",33,0,183,0,0,0
"arpeggiator.cpp",76,"Arpeggiator::reset(const class Arpeggiator*)",2,0,7,0,0,0
,0,"Arpeggiator::setInitialNoteAndOctave(const class Arpeggiator*, class ArpeggiatorSettings*) (always inlined)",0,0,0,0,0,0
"arpeggiator.cpp",670,"Arpeggiator::switchNoteOn(const class Arpeggiator*, class ArpeggiatorSettings*, class ArpReturnInstruction*, bool)",68,0,333,0,0,0
"arpeggiator.h",26,"Arpeggiator::~Arpeggiator(const class Arpeggiator*)",7,0,28,0,0,0
"arpeggiator.h",26,"Arpeggiator::~Arpeggiator(const class Arpeggiator*)",7,0,25,0,0,0
,0,"Arpeggiator::~Arpeggiator(const class Arpeggiator*) (always inlined)",0,0,0,0,0,0
,0,"ArpeggiatorBase::ArpeggiatorBase(const class ArpeggiatorBase*) (always inlined)",0,0,0,0,0,0
"arpeggiator.cpp",361,"ArpeggiatorBase::carryOnOctaveSequence(const class ArpeggiatorBase*, class ArpeggiatorSettings*)",24,0,73,0,0,0
"arpeggiator.cpp",846,"ArpeggiatorBase::doTickForward(const class ArpeggiatorBase*, class ArpeggiatorSettings*, class ArpReturnInstruction*, long unsigned int, bool)",18,0,67,0,0,0
,0,"ArpeggiatorBase::evaluateRhythm(const class ArpeggiatorBase*, bool) (always inlined)",0,0,0,0,0,0
"arpeggiator.cpp",407,"ArpeggiatorBase::increaseSequenceAndRhythmIndexes(const class ArpeggiatorBase*)",4,0,20,0,0,0
"arpeggiator.cpp",325,"ArpeggiatorBase::maybeSetupNewRatchet(const class ArpeggiatorBase*, class ArpeggiatorSettings*)",9,0,56,0,0,0
"arpeggiator.cpp",795,"ArpeggiatorBase::render(const class ArpeggiatorBase*, class ArpeggiatorSettings*, long int, long unsigned int, long unsigned int, long unsigned int, long unsigned int, long unsigned int, long unsigned int, class ArpReturnInstruction*)",23,0,143,0,0,0
,0,"ArpeggiatorBase::resetRatchet(const class ArpeggiatorBase*) (always inlined)",0,0,0,0,0,0
,0,"ArpeggiatorBase::resetRhythm(const class ArpeggiatorBase*) (always inlined)",0,0,0,0,0,0
,0,"ArpeggiatorBase::switchAnyNoteOff(const class ArpeggiatorBase*, class ArpReturnInstruction*) (always inlined)",0,0,0,0,0,0
"arpeggiator.cpp",765,"ArpeggiatorBase::updateParams(const class ArpeggiatorBase*, long unsigned int, long unsigned int, long unsigned int, long unsigned int)",6,0,34,0,0,0
,0,"ArpeggiatorForDrum::ArpeggiatorForDrum(const class ArpeggiatorForDrum*) (always inlined)",0,0,0,0,0,0
,0,"ArpeggiatorForDrum::calculateNextOctave(const class ArpeggiatorForDrum*, class ArpeggiatorSettings*) (always inlined)",0,0,0,0,0,0
"arpeggiator.cpp",759,"ArpeggiatorForDrum::hasAnyInputNotesActive(const class ArpeggiatorForDrum*)",1,0,5,0,0,0
"arpeggiator.cpp",82,"ArpeggiatorForDrum::noteOn(const class ArpeggiatorForDrum*, class ArpeggiatorSettings*, long int, long int, class ArpReturnInstruction*, long int, const short int*)",12,0,38,0,0,0
"arpeggiator.cpp",60,"ArpeggiatorForDrum::reset(const class ArpeggiatorForDrum*)",1,0,3,0,0,0
,0,"ArpeggiatorForDrum::setInitialOctave(const class ArpeggiatorForDrum*, class ArpeggiatorSettings*) (always inlined)",0,0,0,0,0,0
"arpeggiator.cpp",455,"ArpeggiatorForDrum::switchNoteOn(const class ArpeggiatorForDrum*, class ArpeggiatorSettings*, class ArpReturnInstruction*, bool)",29,0,127,0,0,0
"arpeggiator.cpp",35,"ArpeggiatorSettings::ArpeggiatorSettings(const class ArpeggiatorSettings*)",9,0,31,0,0,0
"arpeggiator.cpp",881,"ArpeggiatorSettings::getPhaseIncrement(const class ArpeggiatorSettings*, long int)",8,0,24,0,0,0
"arpeggiator.h",191,"ArpeggiatorSettings::updatePresetFromCurrentSettings(const class ArpeggiatorSettings*)",5,0,37,0,0,0
,0,"ArpeggiatorSettings::updatePresetFromCurrentSettings(const class ArpeggiatorSettings*) (always inlined)",0,0,0,0,0,0
,0,"ArpeggiatorSettings::updateSettingsFromCurrentPreset(const class ArpeggiatorSettings*) (always inlined)",0,0,0,0,0,0
,0,"arpModeToString(enum ArpMode) (always inlined)",0,0,0,0,0,0
,0,"arpMpeModSourceToString(enum ArpMpeModSource) (always inlined)",0,0,0,0,0,0
,0,"ArpMpeVelocity::ArpMpeVelocity(const class ArpMpeVelocity*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"mpe_velocity.h",39,"ArpMpeVelocity::getOptions(const class ArpMpeVelocity*)",4,0,51,0,0,0
"mpe_velocity.h",32,"ArpMpeVelocity::readCurrentValue(const class ArpMpeVelocity*)",2,0,6,0,0,0
"mpe_velocity.h",34,"ArpMpeVelocity::writeCurrentValue(const class ArpMpeVelocity*)",2,0,6,0,0,0
"mpe_velocity.h",29,"ArpMpeVelocity::~ArpMpeVelocity(const class ArpMpeVelocity*)",2,0,6,0,0,0
"menu_item.h",54,"ArpMpeVelocity::~ArpMpeVelocity(const class ArpMpeVelocity*)",1,0,1,0,0,0
,0,"arpNoteModeToString(enum ArpNoteMode) (always inlined)",0,0,0,0,0,0
,0,"arpOctaveModeToString(enum ArpOctaveMode) (always inlined)",0,0,0,0,0,0
,0,"arpPresetToOldArpMode(enum ArpPreset) (always inlined)",0,0,0,0,0,0
,0,"ArpReturnInstruction::ArpReturnInstruction(const class ArpReturnInstruction*) (always inlined)",0,0,0,0,0,0
"arrangement.cpp",115,"Arrangement::doTickForward(const class Arrangement*, long int)",69,0,381,0,0,0
"arrangement.cpp",506,"Arrangement::doUniqueCloneOnClipInstance(class ClipInstance*, long int, bool, const class Arrangement*)",50,0,184,0,0,0
,0,"Arrangement::doUniqueCloneOnClipInstance(const class Arrangement*, class ClipInstance*, long int, bool) (always inlined)",0,0,0,0,0,0
"arrangement.cpp",656,"Arrangement::endAnyLinearRecording(const class Arrangement*)",7,0,35,0,0,0
"arrangement.cpp",77,"Arrangement::endPlayback(const class Arrangement*)",26,0,112,0,0,0
,0,"Arrangement::getLivePos(const class Arrangement*, long unsigned int*) (always inlined)",0,0,0,0,0,0
"arrangement.cpp",548,"Arrangement::getLivePos(long unsigned int*, const class Arrangement*)",3,0,8,0,0,0
"arrangement.cpp",561,"Arrangement::getPosAtWhichClipWillCut(const class Arrangement*, const class ModelStackWithTimelineCounter*)",21,0,97,0,0,0
"arrangement.cpp",469,"Arrangement::isOutputAvailable(const class Arrangement*, class Output*)",7,0,47,0,0,0
"arrangement.cpp",348,"Arrangement::resetPlayPos(const class Arrangement*, long int, bool, long int)",39,0,174,0,0,0
"arrangement.cpp",392,"Arrangement::resumeClipInstancePlayback(const class Arrangement*, class ClipInstance*, bool, bool)",8,0,36,0,0,0
"arrangement.cpp",424,"Arrangement::reSyncClip(const class Arrangement*, class ModelStackWithTimelineCounter*, bool, bool)",11,0,56,0,0,0
"arrangement.cpp",442,"Arrangement::resyncToSongTicks(const class Arrangement*, class Song*)",1,0,1,0,0,0
"arrangement.cpp",450,"Arrangement::reversionDone(const class Arrangement*)",9,0,53,0,0,0
"arrangement.cpp",487,"Arrangement::rowEdited(long int, long int, class Clip*, class ClipInstance*, class Output*, const class Arrangement*)",9,0,43,0,0,0
"arrangement.cpp",49,"Arrangement::setupPlayback(const class Arrangement*)",7,0,41,0,0,0
"arrangement.cpp",552,"Arrangement::stopOutputRecordingAtLoopEnd(const class Arrangement*)",4,0,13,0,0,0
"arrangement.cpp",612,"Arrangement::willClipContinuePlayingAtEnd(const class Arrangement*, const class ModelStackWithTimelineCounter*)",7,0,28,0,0,0
"arrangement.cpp",627,"Arrangement::willClipLoopAtSomePoint(const class Arrangement*, const class ModelStackWithTimelineCounter*)",13,0,67,0,0,0
"arrangement.h",27,"Arrangement::~Arrangement(const class Arrangement*)",2,0,6,0,0,0
"arrangement.h",27,"Arrangement::~Arrangement(const class Arrangement*)",1,0,1,0,0,0
"arranger_view.cpp",874,"ArrangerView::auditionEnded(const class ArrangerView*)",13,0,53,0,0,0
,0,"ArrangerView::autoScrollOnPlaybackEnd(const class ArrangerView*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",659,"ArrangerView::beginAudition(class Output*, const class ArrangerView*)",20,0,90,0,0,0
"arranger_view.cpp",173,"ArrangerView::buttonAction(const class ArrangerView*, unsigned char, bool, bool)",171,0,752,0,0,0
,0,"ArrangerView::changeOutputToAudio(const class ArrangerView*) (always inlined)",0,0,0,0,0,0
,0,"ArrangerView::clearArrangement(const class ArrangerView*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",3232,"ArrangerView::clipNeedsReRendering(const class ArrangerView*, class Clip*)",2,0,17,0,0,0
"arranger_view.cpp",1141,"ArrangerView::deleteClipInstance(class Output*, long int, class ClipInstance*, class Action*, const class ArrangerView*, bool)",7,0,28,0,0,0
,0,"ArrangerView::deleteOutput(const class ArrangerView*) (always inlined)",0,0,0,0,0,0
,0,"ArrangerView::doActualRender(const class ArrangerView*, long int, long unsigned int, long unsigned int, class RGB*, unsigned char[18]*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"ArrangerView::drawMuteSquare(const class ArrangerView*, long int, class RGB*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",703,"ArrangerView::endAudition(const class ArrangerView*, class Output*, bool)",12,0,63,0,0,0
"arranger_view.cpp",1629,"ArrangerView::exitSubModeWithoutAction(const class ArrangerView*, class UI*)",21,0,76,0,0,0
"arranger_view.cpp",464,"ArrangerView::focusRegained(const class ArrangerView*)",13,0,49,0,0,0
"ui.cpp",382,"ArrangerView::getClipForSelection(const class ArrangerView*)",6,0,23,0,0,0
,0,"ArrangerView::getClipForSelection(const class ArrangerView*) (always inlined)",0,0,0,0,0,0
,0,"ArrangerView::getDrumForAudition(const class ArrangerView*, class Kit*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",3206,"ArrangerView::getGreyedOutRowsNotRepresentingOutput(const class ArrangerView*, class Output*)",4,0,14,0,0,0
"arranger_view.cpp",3189,"ArrangerView::getGreyoutColsAndRows(const class ArrangerView*, long unsigned int*, long unsigned int*)",6,0,28,0,0,0
,0,"ArrangerView::getGreyoutColsAndRows(const class ArrangerView*, long unsigned int*, long unsigned int*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",3131,"ArrangerView::getMaxLength(const class ArrangerView*)",8,0,38,0,0,0
"arranger_view.cpp",3149,"ArrangerView::getMaxZoom(const class ArrangerView*)",6,0,25,0,0,0
"arranger_view.cpp",617,"ArrangerView::getNoteRowForAudition(class ModelStack*, class Kit*, const class ArrangerView*)",17,0,53,0,0,0
,0,"ArrangerView::goToSongView(const class ArrangerView*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",2944,"ArrangerView::graphicsRoutine(const class ArrangerView*)",41,0,229,0,0,0
"arranger_view.cpp",1082,"ArrangerView::handleAuditionPadAction(const class ArrangerView*, long int, long int, class UI*)",45,0,266,0,0,0
"arranger_view.cpp",952,"ArrangerView::handleStatusPadAction(const class ArrangerView*, long int, long int, class UI*)",41,0,191,0,0,0
"ui.cpp",388,"ArrangerView::horizontalEncoderAction(const class ArrangerView*, long int)",84,0,403,0,0,0
,0,"ArrangerView::horizontalScrollOneSquare(const class ArrangerView*, long int) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",3112,"ArrangerView::initiateXScroll(const class ArrangerView*, long int)",7,0,25,0,0,0
"arranger_view.cpp",2421,"ArrangerView::modEncoderAction(const class ArrangerView*, long int, long int)",2,0,3,0,0,0
,0,"ArrangerView::moveClipToSession(const class ArrangerView*) (always inlined)",0,0,0,0,0,0
,0,"ArrangerView::navigateThroughPresets(const class ArrangerView*, long int) (always inlined)",0,0,0,0,0,0
,0,"ArrangerView::notifyActiveClipChangedOnOutput(const class ArrangerView*, class Output*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",3182,"ArrangerView::notifyPlaybackBegun(const class ArrangerView*)",3,0,12,0,0,0
"arranger_view.cpp",433,"ArrangerView::opened(const class ArrangerView*)",7,0,28,0,0,0
"arranger_view.cpp",1114,"ArrangerView::outputActivated(class Output*, const class ArrangerView*)",6,0,33,0,0,0
,0,"ArrangerView::outputActivated(const class ArrangerView*, class Output*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",1125,"ArrangerView::outputDeactivated(class Output*, const class ArrangerView*)",9,0,28,0,0,0
,0,"ArrangerView::outputDeactivated(const class ArrangerView*, class Output*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",897,"ArrangerView::padAction(const class ArrangerView*, long int, long int, long int)",237,0,1063,0,0,0
"arranger_view.cpp",3216,"ArrangerView::playbackEnded(const class ArrangerView*)",14,0,85,0,0,0
"arranger_view.cpp",1908,"ArrangerView::putDraggedClipInstanceInNewPosition(const class ArrangerView*, class Output*)",54,0,234,0,0,0
"arranger_view.cpp",2799,"ArrangerView::reassessWhetherDoingAutoScroll(const class ArrangerView*, long int)",7,0,45,0,0,0
,0,"ArrangerView::reassessWhetherDoingAutoScroll(const class ArrangerView*, long int) (always inlined)",0,0,0,0,0,0
,0,"ArrangerView::rememberInteractionWithClipInstance(const class ArrangerView*, long int, class ClipInstance*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",2071,"ArrangerView::renderMainPads(const class ArrangerView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",1,0,7,0,0,0
"arranger_view.cpp",2075,"ArrangerView::renderMainPads(const class ArrangerView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",10,0,475,0,0,0
"arranger_view.cpp",101,"ArrangerView::renderOLED(const class ArrangerView*, unsigned char[128]*)",1,0,3,0,0,0
,0,"ArrangerView::renderRowForOutput(const class ArrangerView*, class ModelStack*, class Output*, long int, long unsigned int, class RGB*, unsigned char*, long int, long int) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",516,"ArrangerView::renderSidebar(const class ArrangerView*, long unsigned int, class RGB[18]*, unsigned char[18]*)",27,0,198,0,0,0
"arranger_view.cpp",491,"ArrangerView::repopulateOutputsOnScreen(const class ArrangerView*, bool)",10,0,57,0,0,0
,0,"ArrangerView::repopulateOutputsOnScreen(const class ArrangerView*, bool) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",3177,"ArrangerView::scrollFinished(const class ArrangerView*)",2,0,7,0,0,0
"arranger_view.cpp",2325,"ArrangerView::selectEncoderAction(const class ArrangerView*, signed char)",52,0,207,0,0,0
"arranger_view.cpp",451,"ArrangerView::setLedStates(const class ArrangerView*)",5,0,25,0,0,0
,0,"ArrangerView::setNoSubMode(const class ArrangerView*) (always inlined)",0,0,0,0,0,0
"arranger_view.h",73,"ArrangerView::supportsTriplets(const class ArrangerView*)",1,0,2,0,0,0
"arranger_view.cpp",3170,"ArrangerView::tellMatrixDriverWhichRowsContainSomethingZoomable(const class ArrangerView*)",3,0,13,0,0,0
"arranger_view.cpp",2298,"ArrangerView::timerCallback(const class ArrangerView*)",12,0,52,0,0,0
"arranger_view.cpp",1798,"ArrangerView::transitionToArrangementEditor(const class ArrangerView*)",60,0,279,0,0,0
,0,"ArrangerView::transitionToClipView(const class ArrangerView*, class ClipInstance*) (always inlined)",0,0,0,0,0,0
"arranger_view.cpp",2909,"ArrangerView::verticalEncoderAction(const class ArrangerView*, long int, bool)",39,0,166,0,0,0
,0,"array<BidirectionalLinkedList, 10>::operator[](const struct array<BidirectionalLinkedList, 10>*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"array<BidirectionalLinkedList, 10>::~array(const struct array<BidirectionalLinkedList, 10>*, const int) (always inlined)",0,0,0,0,0,0
,0,"array<freeverb::Comb, 8>::array(const struct array<freeverb::Comb, 8>*) (always inlined)",0,0,0,0,0,0
,0,"array<long int, 1139>::data(const struct array<long int, 1139>*) (always inlined)",0,0,0,0,0,0
,0,"array<long int, 128>::fill(const struct array<long int, 128>*, const long int&) (always inlined)",0,0,0,0,0,0
,0,"asterixToInt(char*, long int) (always inlined)",0,0,0,0,0,0
,0,"atexit",0,0,5,0,0,0
,0,"Attack::Attack(const class Attack*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"rms_feedback.h",74,"Attack::getDisplayValue(const class Attack*)",1,0,7,0,0,0
"compressor_values.h",26,"Attack::getMaxValue(const class Attack*)",1,0,2,0,0,0
"compressor_values.h",25,"Attack::getUnit(const class Attack*)",1,0,3,0,0,0
"compressor_values.h",15,"Attack::readCurrentValue(const class Attack*)",2,0,9,0,0,0
"attack.h",28,"Attack::readCurrentValue(const class Attack*)",3,0,29,0,0,0
"attack.h",28,"Attack::readCurrentValue(const class Attack*)",2,0,10,0,0,0
"value.h",42,"Attack::writeCurrentValue(const class Attack*)",2,0,14,0,0,0
"value.h",42,"Attack::writeCurrentValue(const class Attack*)",7,0,27,0,0,0
"attack.h",31,"Attack::writeCurrentValue(const class Attack*)",2,0,10,0,0,0
"menu_item.h",54,"Attack::~Attack(const class Attack*)",1,0,1,0,0,0
"menu_item.h",54,"Attack::~Attack(const class Attack*)",1,0,1,0,0,0
"menu_item.h",54,"Attack::~Attack(const class Attack*)",1,0,1,0,0,0
"compressor_values.h",10,"Attack::~Attack(const class Attack*)",2,0,6,0,0,0
"attack.h",24,"Attack::~Attack(const class Attack*)",2,0,6,0,0,0
"attack.h",23,"Attack::~Attack(const class Attack*)",2,0,6,0,0,0
"audio_clip.cpp",117,"AudioClip::abortRecording(const class AudioClip*)",9,0,39,0,0,0
"audio_clip.cpp",49,"AudioClip::AudioClip(const class AudioClip*)",13,0,68,0,0,0
"audio_clip.cpp",149,"AudioClip::beginLinearRecording(const class AudioClip*, class ModelStackWithTimelineCounter*, long int)",7,0,41,0,0,0
"audio_clip.cpp",1187,"AudioClip::changeOutput(const class AudioClip*, class ModelStackWithTimelineCounter*, class Output*)",2,0,14,0,0,0
"audio_clip.cpp",1169,"AudioClip::claimOutput(const class AudioClip*, class ModelStackWithTimelineCounter*)",2,0,11,0,0,0
"audio_clip.cpp",1232,"AudioClip::clear(const class AudioClip*, class Action*, class ModelStackWithTimelineCounter*, bool)",12,0,45,0,0,0
"general_memory_allocator.h",99,"AudioClip::clone(const class AudioClip*, class ModelStackWithTimelineCounter*, bool)",23,0,88,0,0,0
"general_memory_allocator.h",99,"AudioClip::cloneAsNewOverdub(const class AudioClip*, class ModelStackWithTimelineCounter*, enum OverDubType)",15,0,69,0,0,0
"audio_clip.cpp",255,"AudioClip::cloneOutput(const class AudioClip*, class ModelStackWithTimelineCounter*)",7,0,27,0,0,0
"audio_clip.cpp",111,"AudioClip::copyBasicsFrom(const class AudioClip*, const class Clip*)",2,0,5,0,0,0
"audio_clip.cpp",1262,"AudioClip::currentlyScrollableAndZoomable(const class AudioClip*)",3,0,19,0,0,0
"audio_clip.cpp",880,"AudioClip::detachAudioClipFromOutput(const class AudioClip*, class Song*, bool, bool)",15,0,87,0,0,0
"audio_clip.cpp",875,"AudioClip::detachFromOutput(const class AudioClip*, class ModelStackWithTimelineCounter*, bool, bool, bool, bool, bool, bool)",1,0,4,0,0,0
"audio_clip.cpp",771,"AudioClip::expectNoFurtherTicks(const class AudioClip*, class Song*, bool)",9,0,42,0,0,0
"audio_clip.cpp",169,"AudioClip::finishLinearRecording(const class AudioClip*, class ModelStackWithTimelineCounter*, class Clip*, long int)",17,0,68,0,0,0
,0,"AudioClip::finishLinearRecording(const class AudioClip*, class ModelStackWithTimelineCounter*, class Clip*, long int) (always inlined)",0,0,0,0,0,0
,0,"AudioClip::getCullImmunity(const class AudioClip*) (always inlined)",0,0,0,0,0,0
"audio_clip.cpp",1262,"AudioClip::getCurrentlyRecordingLinearly(const class AudioClip*)",1,0,5,0,0,0
,0,"AudioClip::getCurrentlyRecordingLinearly(const class AudioClip*) (always inlined)",0,0,0,0,0,0
"audio_clip.cpp",1326,"AudioClip::getCurrentParamManager(const class AudioClip*)",1,0,2,0,0,0
"audio_clip.cpp",743,"AudioClip::getLoopingType(const class AudioClip*, const class ModelStackWithTimelineCounter*)",1,0,19,0,0,0
,0,"AudioClip::getNumSamplesTilLoop(const class AudioClip*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
"audio_clip.cpp",920,"AudioClip::getSamplesFromTicks(const class AudioClip*, long int)",3,0,26,0,0,0
,0,"AudioClip::getSamplesFromTicks(const class AudioClip*, long int) (always inlined)",0,0,0,0,0,0
"audio_clip.cpp",934,"AudioClip::getScrollAndZoomInSamples(const class AudioClip*, long int, long int, long long int*, long long int*)",10,0,73,0,0,0
"audio_clip.h",86,"AudioClip::getXMLTag(const class AudioClip*)",1,0,3,0,0,0
"audio_clip.cpp",144,"AudioClip::isAbandonedOverdub(const class AudioClip*)",1,0,7,0,0,0
"audio_clip.cpp",1179,"AudioClip::loadSample(const class AudioClip*, bool)",3,0,22,0,0,0
"audio_clip.cpp",808,"AudioClip::posReachedEnd(const class AudioClip*, class ModelStackWithTimelineCounter*)",35,0,171,0,0,0
"audio_clip.cpp",272,"AudioClip::processCurrentPos(const class AudioClip*, class ModelStackWithTimelineCounter*, long unsigned int)",33,0,125,0,0,0
"audio_clip.cpp",1213,"AudioClip::quantizeLengthForArrangementRecording(const class AudioClip*, class ModelStackWithTimelineCounter*, long int, long unsigned int, long int, long int)",5,0,43,0,0,0
"audio_clip.cpp",1072,"AudioClip::readFromFile(const class AudioClip*, class Deserializer&, class Song*)",46,0,272,0,0,0
"audio_clip.cpp",968,"AudioClip::renderAsSingleRow(const class AudioClip*, class ModelStackWithTimelineCounter*, class TimelineView*, long int, long unsigned int, class RGB*, unsigned char*, bool, long int, long int, long int, long int, bool, bool)",12,0,172,0,0,0
"audio_clip.h",112,"AudioClip::renderSidebar(const class AudioClip*, long unsigned int, class RGB[18]*, unsigned char[18]*)",1,0,3,0,0,0
"playback_handler.h",214,"AudioClip::resumePlayback(const class AudioClip*, class ModelStackWithTimelineCounter*, bool)",28,0,127,0,0,0
"audio_clip.cpp",487,"AudioClip::sampleZoneChanged(const class AudioClip*, const class ModelStackWithTimelineCounter*)",2,0,18,0,0,0
"audio_clip.cpp",1194,"AudioClip::setOutput(const class AudioClip*, class ModelStackWithTimelineCounter*, class Output*, class AudioClip*)",5,0,16,0,0,0
"audio_clip.cpp",1267,"AudioClip::setPos(const class AudioClip*, class ModelStackWithTimelineCounter*, long int, bool)",2,0,10,0,0,0
,0,"AudioClip::setupPlaybackBounds(const class AudioClip*) (always inlined)",0,0,0,0,0,0
"audio_clip.cpp",1274,"AudioClip::shiftHorizontally(const class AudioClip*, class ModelStackWithTimelineCounter*, long int)",24,0,122,0,0,0
"audio_clip.cpp",761,"AudioClip::unassignVoiceSample(const class AudioClip*, bool)",5,0,13,0,0,0
"audio_clip.cpp",139,"AudioClip::wantsToBeginLinearRecording(const class AudioClip*, class Song*)",1,0,15,0,0,0
"audio_clip.h",77,"AudioClip::willCloneOutputForOverdub(const class AudioClip*)",1,0,2,0,0,0
"audio_clip.cpp",1006,"AudioClip::writeDataToFile(const class AudioClip*, class Serializer&, class Song*)",36,0,238,0,0,0
"audio_clip.cpp",64,"AudioClip::~AudioClip(const class AudioClip*)",2,0,8,0,0,0
"audio_clip.cpp",64,"AudioClip::~AudioClip(const class AudioClip*)",3,0,22,0,0,0
,0,"AudioClipView::adjustLoopLength(const class AudioClipView*, long int) (always inlined)",0,0,0,0,0,0
"audio_clip_view.cpp",284,"AudioClipView::buttonAction(const class AudioClipView*, unsigned char, bool, bool)",55,0,270,0,0,0
"audio_clip_view.cpp",513,"AudioClipView::changeUnderlyingSampleLength(const class AudioClipView*, class AudioClip*, const class Sample*, long int, long int, long long unsigned int)",22,0,132,0,0,0
"audio_clip_view.cpp",609,"AudioClipView::clipNeedsReRendering(const class AudioClipView*, class Clip*)",5,0,23,0,0,0
"audio_clip_view.cpp",90,"AudioClipView::focusRegained(const class AudioClipView*)",1,0,6,0,0,0
"clip_navigation_timeline_view.cpp",27,"AudioClipView::focusRegained(const class AudioClipView*, const class AudioClipView*)",5,0,25,0,0,0
"audio_clip_view.cpp",759,"AudioClipView::getMaxLength(const class AudioClipView*)",2,0,9,0,0,0
"song.cpp",244,"AudioClipView::getMaxZoom(const class AudioClipView*)",4,0,16,0,0,0
"audio_clip_view.h",61,"AudioClipView::getUIType(const class AudioClipView*)",1,0,2,0,0,0
"ui.cpp",382,"AudioClipView::graphicsRoutine(const class AudioClipView*)",17,0,110,0,0,0
"ui.cpp",416,"AudioClipView::horizontalEncoderAction(const class AudioClipView*, long int)",21,0,102,0,0,0
"audio_clip_view.cpp",268,"AudioClipView::needsRenderingDependingOnSubMode(const class AudioClipView*)",2,0,11,0,0,0
,0,"AudioClipView::needsRenderingDependingOnSubMode(const class AudioClipView*) (always inlined)",0,0,0,0,0,0
"audio_clip_view.cpp",73,"AudioClipView::opened(const class AudioClipView*)",5,0,17,0,0,0
"audio_clip_view.cpp",427,"AudioClipView::padAction(const class AudioClipView*, long int, long int, long int)",30,0,126,0,0,0
"audio_clip_view.cpp",606,"AudioClipView::playbackEnded(const class AudioClipView*)",1,0,3,0,0,0
"audio_clip_view.cpp",103,"AudioClipView::renderMainPads(const class AudioClipView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",26,0,174,0,0,0
"audio_clip_view.cpp",98,"AudioClipView::renderOLED(const class AudioClipView*, unsigned char[128]*)",1,0,6,0,0,0
"audio_clip_view.cpp",195,"AudioClipView::renderSidebar(const class AudioClipView*, long unsigned int, class RGB[18]*, unsigned char[18]*)",5,0,24,0,0,0
"audio_clip_view.cpp",623,"AudioClipView::sampleNeedsReRendering(const class AudioClipView*, class Sample*)",6,0,18,0,0,0
"audio_clip_view.cpp",630,"AudioClipView::selectEncoderAction(const class AudioClipView*, signed char)",2,0,13,0,0,0
,0,"AudioClipView::selectEncoderAction(const class AudioClipView*, signed char) (always inlined)",0,0,0,0,0,0
"audio_clip_view.cpp",747,"AudioClipView::setupScroll(const class AudioClipView*, long unsigned int)",2,0,11,0,0,0
"audio_clip_view.cpp",755,"AudioClipView::tellMatrixDriverWhichRowsContainSomethingZoomable(const class AudioClipView*)",1,0,5,0,0,0
"audio_clip_view.cpp",185,"AudioClipView::timerCallback(const class AudioClipView*)",4,0,12,0,0,0
"audio_clip_view.cpp",733,"AudioClipView::verticalEncoderAction(const class AudioClipView*, long int, bool)",5,0,37,0,0,0
"audio_file.cpp",484,"AudioFile::addReason(const class AudioFile*)",4,0,16,0,0,0
,0,"AudioFile::AudioFile(const class AudioFile*, enum AudioFileType) (always inlined)",0,0,0,0,0,0
"audio_file.h",32,"AudioFile::finalizeAfterLoad(const class AudioFile*, long unsigned int)",1,0,1,0,0,0
"audio_file.cpp",539,"AudioFile::getAppropriateQueue(const class AudioFile*)",1,0,2,0,0,0
"audio_file.cpp",34,"AudioFile::loadFile(const class AudioFile*, class AudioFileReader*, bool, bool)",134,0,790,0,0,0
"audio_file.cpp",512,"AudioFile::mayBeStolen(const class AudioFile*, void*)",2,0,10,0,0,0
"audio_file.cpp",492,"AudioFile::removeReason(const class AudioFile*, const char*)",10,0,44,0,0,0
,0,"AudioFile::removeReason(const class AudioFile*, const char*) (always inlined)",0,0,0,0,0,0
"audio_file.cpp",527,"AudioFile::steal(const class AudioFile*, const char*)",4,0,30,0,0,0
,0,"AudioFile::steal(const class AudioFile*, const char*) (always inlined)",0,0,0,0,0,0
"audio_file.h",29,"AudioFile::~AudioFile(const class AudioFile*)",2,0,14,0,0,0
"audio_file.h",29,"AudioFile::~AudioFile(const class AudioFile*)",2,0,11,0,0,0
,0,"AudioFile::~AudioFile(const class AudioFile*) (always inlined)",0,0,0,0,0,0
,0,"AudioFileHolder::AudioFileHolder(const class AudioFileHolder*) (always inlined)",0,0,0,0,0,0
"audio_file_holder.cpp",39,"AudioFileHolder::loadFile(const class AudioFileHolder*, bool, bool, bool, long int, struct FilePointer*, bool)",6,0,35,0,0,0
,0,"AudioFileHolder::loadFile(const class AudioFileHolder*, bool, bool, bool, long int, struct FilePointer*, bool) (always inlined)",0,0,0,0,0,0
"audio_file_holder.cpp",65,"AudioFileHolder::setAudioFile(const class AudioFileHolder*, class AudioFile*, bool, bool, long int)",8,0,32,0,0,0
"audio_file_holder.cpp",27,"AudioFileHolder::~AudioFileHolder(const class AudioFileHolder*)",1,0,11,0,0,0
"audio_file_holder.cpp",27,"AudioFileHolder::~AudioFileHolder(const class AudioFileHolder*)",2,0,8,0,0,0
,0,"AudioFileHolder::~AudioFileHolder(const class AudioFileHolder*) (always inlined)",0,0,0,0,0,0
"audio_file_manager.cpp",1385,"AudioFileManager::addReasonToCluster(const class AudioFileManager*, class Cluster*)",3,0,12,0,0,0
"audio_file_manager.cpp",895,"AudioFileManager::allocateCluster(enum ClusterType, bool, void*, const class AudioFileManager*)",17,0,47,0,0,0
,0,"AudioFileManager::cardReinserted(const class AudioFileManager*) (always inlined)",0,0,0,0,0,0
,0,"AudioFileManager::deallocateCluster(const class AudioFileManager*, class Cluster*) (always inlined)",0,0,0,0,0,0
"audio_file_manager.cpp",212,"AudioFileManager::deleteAnyTempRecordedSamplesFromMemory(const class AudioFileManager*)",11,0,31,0,0,0
"audio_file_manager.cpp",375,"AudioFileManager::deleteUnusedAudioFileFromMemory(class AudioFile*, long int, const class AudioFileManager*)",5,0,12,0,0,0
"audio_file_manager.cpp",363,"AudioFileManager::deleteUnusedAudioFileFromMemoryIndexUnknown(class AudioFile*, const class AudioFileManager*)",6,0,20,0,0,0
,0,"AudioFileManager::deleteUnusedAudioFileFromMemoryIndexUnknown(const class AudioFileManager*, class AudioFile*) (always inlined)",0,0,0,0,0,0
,0,"AudioFileManager::enqueueCluster(const class AudioFileManager*, class Cluster*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"AudioFileManager::ensureEnoughMemoryForOneMoreAudioFile(const class AudioFileManager*) (always inlined)",0,0,0,0,0,0
"audio_file_manager.cpp",436,"AudioFileManager::getAudioFileFromFilename(class String*, bool, enum Error*, struct FilePointer*, enum AudioFileType, bool, const class AudioFileManager*)",175,0,723,0,0,0
,0,"AudioFileManager::getUnusedAudioRecordingFilePath(const class AudioFileManager*, class String*, class String*, enum AudioRecordingFolder, long unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"AudioFileManager::loadAnyEnqueuedClusters(const class AudioFileManager*, long int, bool) (always inlined)",0,0,0,0,0,0
"audio_file_manager.cpp",1279,"AudioFileManager::loadAnyEnqueuedClusters(long int, bool, const class AudioFileManager*)",31,4,110,33,1284,45208
"audio_file_manager.cpp",922,"AudioFileManager::loadCluster(class Cluster*, long int, const class AudioFileManager*)",110,0,516,0,0,0
,0,"AudioFileManager::loadingQueueHasAnyLowestPriorityElements(const class AudioFileManager*) (always inlined)",0,0,0,0,0,0
"audio_file_manager.cpp",1394,"AudioFileManager::removeReasonFromCluster(const class AudioFileManager*, class Cluster*, const char*, bool)",17,0,117,0,0,0
,0,"AudioFileManager::setClusterSize(const class AudioFileManager*, long unsigned int) (always inlined)",0,0,0,0,0,0
"audio_file_manager.cpp",390,"AudioFileManager::setupAlternateAudioFileDir(class String*, const char*, class String*, const class AudioFileManager*)",7,0,17,0,0,0
,0,"AudioFileManager::setupAlternateAudioFileDir(const class AudioFileManager*, class String*, const char*, class String*) (always inlined)",0,0,0,0,0,0
"d_string.h",88,"AudioFileManager::setupAlternateAudioFilePath(class String*, long int, class String*, const class AudioFileManager*)",25,0,75,0,0,0
,0,"AudioFileManager::setupAlternateAudioFilePath(const class AudioFileManager*, class String*, long int, class String*) (always inlined)",0,0,0,0,0,0
,0,"AudioFileManager::slowRoutine(const class AudioFileManager*) (always inlined)",0,0,0,0,0,0
,0,"AudioFileManager::thingBeginningLoading(const class AudioFileManager*, enum ThingType) (always inlined)",0,0,0,0,0,0
,0,"AudioFileManager::thingFinishedLoading(const class AudioFileManager*) (always inlined)",0,0,0,0,0,0
,0,"AudioFileManager::tryToDeleteAudioFileFromMemoryIfItExists(const class AudioFileManager*, const char*) (always inlined)",0,0,0,0,0,0
"audio_file_reader.cpp",49,"AudioFileReader::advanceClustersIfNecessary(const class AudioFileReader*)",5,0,21,0,0,0
,0,"AudioFileReader::getBytePos(const class AudioFileReader*) (always inlined)",0,0,0,0,0,0
,0,"AudioFileReader::jumpForwardToBytePos(const class AudioFileReader*, long unsigned int) (always inlined)",0,0,0,0,0,0
"audio_file_reader.cpp",44,"AudioFileReader::readBytes(const class AudioFileReader*, char*, long int)",2,0,18,0,0,0
"audio_file_vector.cpp",32,"AudioFileVector::searchForExactObject(const class AudioFileVector*, class AudioFile*)",13,0,47,0,0,0
"audio_input_selector.cpp",116,"AudioInputSelector::getGreyoutColsAndRows(const class AudioInputSelector*, long unsigned int*, long unsigned int*)",2,0,11,0,0,0
"audio_input_selector.cpp",58,"AudioInputSelector::getOptions(const class AudioInputSelector*)",2,0,62,0,0,0
"audio_input_selector.cpp",53,"AudioInputSelector::getTitle(const class AudioInputSelector*)",1,0,2,0,0,0
"audio_input_selector.cpp",120,"AudioInputSelector::selectEncoderAction(const class AudioInputSelector*, signed char)",15,0,41,0,0,0
"audio_input_selector.cpp",77,"AudioInputSelector::setupAndCheckAvailability(const class AudioInputSelector*)",6,0,19,0,0,0
"context_menu.h",31,"AudioInputSelector::~AudioInputSelector(const class AudioInputSelector*)",1,0,1,0,0,0
"audio_input_selector.h",26,"AudioInputSelector::~AudioInputSelector(const class AudioInputSelector*)",2,0,6,0,0,0
"output.cpp",31,"AudioOutput::AudioOutput(const class AudioOutput*)",16,0,38,0,0,0
"audio_output.cpp",51,"AudioOutput::cloneFrom(const class AudioOutput*, class ModControllableAudio*)",2,0,11,0,0,0
"general_memory_allocator.h",99,"AudioOutput::createNewClipForArrangementRecording(const class AudioOutput*, class ModelStack*)",9,0,44,0,0,0
"audio_output.cpp",286,"AudioOutput::cutAllSound(const class AudioOutput*)",3,0,10,0,0,0
"audio_output.cpp",368,"AudioOutput::deleteBackedUpParamManagers(const class AudioOutput*, class Song*)",1,0,4,0,0,0
"audio_output.h",45,"AudioOutput::getModelStackWithParam(const class AudioOutput*, class ModelStackWithTimelineCounter*, class Clip*, long int, enum Kind, bool, bool)",4,0,11,0,0,0
"audio_output.h",46,"AudioOutput::getModKnobMode(const class AudioOutput*)",1,0,2,0,0,0
"audio_output.cpp",417,"AudioOutput::getThingWithMostReverb(const class AudioOutput*, class Sound**, class ParamManager**, class GlobalEffectableForClip**, long int*)",2,0,14,0,0,0
"audio_output.h",74,"AudioOutput::getXMLTag(const class AudioOutput*)",1,0,3,0,0,0
"audio_output.cpp",411,"AudioOutput::isSkippingRendering(const class AudioOutput*)",2,0,12,0,0,0
,0,"AudioOutput::isSkippingRendering(const class AudioOutput*) (always inlined)",0,0,0,0,0,0
"audio_output.h",66,"AudioOutput::offerReceivedCCToLearnedParams(const class AudioOutput*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*)",1,0,12,0,0,0
"audio_output.h",70,"AudioOutput::offerReceivedPitchBendToLearnedParams(const class AudioOutput*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*)",1,0,6,0,0,0
"audio_output.cpp",331,"AudioOutput::readFromFile(const class AudioOutput*, class Deserializer&, class Song*, class Clip*, long int)",22,0,157,0,0,0
"audio_output.cpp",88,"AudioOutput::renderGlobalEffectableForClip(const class AudioOutput*, class ModelStackWithTimelineCounter*, struct StereoSample*, long int*, long int, long int*, long int, long int, bool, bool, long int, long int, long int)",111,0,865,0,0,0
"audio_output.cpp",60,"AudioOutput::renderOutput(const class AudioOutput*, class ModelStack*, struct StereoSample*, struct StereoSample*, long int, long int*, long int, long int, bool, bool)",3,0,29,0,0,0
"audio_output.cpp",70,"AudioOutput::resetEnvelope(const class AudioOutput*)",3,0,14,0,0,0
"audio_output.cpp",396,"AudioOutput::setActiveClip(const class AudioOutput*, class ModelStackWithTimelineCounter*, enum PgmChangeSend)",9,0,45,0,0,0
"audio_output.h",45,"AudioOutput::toModControllable(const class AudioOutput*)",1,0,2,0,0,0
"audio_output.h",58,"AudioOutput::toOutput(const class AudioOutput*)",1,0,1,0,0,0
"audio_output.cpp",392,"AudioOutput::wantsToBeginArrangementRecording(const class AudioOutput*)",2,0,6,0,0,0
"audio_output.cpp",281,"AudioOutput::willRenderAsOneChannelOnlyWhichWillNeedCopying(const class AudioOutput*)",1,0,15,0,0,0
"audio_output.cpp",302,"AudioOutput::writeDataToFile(const class AudioOutput*, class Serializer&, class Clip*, class Song*)",14,0,88,0,0,0
"audio_output.cpp",47,"AudioOutput::~AudioOutput(const class AudioOutput*)",2,0,8,0,0,0
"audio_output.cpp",47,"AudioOutput::~AudioOutput(const class AudioOutput*)",2,0,11,0,0,0
,0,"AudioRecorder::AudioRecorder(const class AudioRecorder*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"audio_recorder.cpp",151,"AudioRecorder::beginOutputRecording(const class AudioRecorder*)",6,0,23,0,0,0
"audio_recorder.h",30,"AudioRecorder::beginSession(const class AudioRecorder*, class MenuItem*)",7,0,22,0,0,0
,0,"AudioRecorder::beginSession(const class AudioRecorder*, class MenuItem*) (always inlined)",0,0,0,0,0,0
"audio_recorder.cpp",247,"AudioRecorder::buttonAction(const class AudioRecorder*, unsigned char, bool, bool)",5,0,22,0,0,0
"audio_recorder.h",48,"AudioRecorder::checkPermissionToBeginSession(const class AudioRecorder*, class ModControllableAudio*, long int, class MultiRange**)",5,0,26,0,0,0
,0,"AudioRecorder::checkPermissionToBeginSession(const class AudioRecorder*, class ModControllableAudio*, long int, class MultiRange**) (always inlined)",0,0,0,0,0,0
"audio_recorder.cpp",169,"AudioRecorder::endRecordingSoon(const class AudioRecorder*, long int)",3,0,21,0,0,0
,0,"AudioRecorder::endRecordingSoon(const class AudioRecorder*, long int) (always inlined)",0,0,0,0,0,0
"audio_engine.cpp",1563,"AudioRecorder::finishRecording(const class AudioRecorder*)",13,0,31,0,0,0
"audio_recorder.h",51,"AudioRecorder::getUIType(const class AudioRecorder*)",1,0,2,0,0,0
"audio_recorder.cpp",268,"AudioRecorder::isCurrentlyResampling(const class AudioRecorder*)",3,0,13,0,0,0
"sound.h",199,"AudioRecorder::isRelevant(const class AudioRecorder*, class ModControllableAudio*, long int)",1,0,4,0,0,0
"audio_recorder.cpp",68,"AudioRecorder::opened(const class AudioRecorder*)",30,0,155,0,0,0
"audio_recorder.cpp",184,"AudioRecorder::process(const class AudioRecorder*)",23,0,91,0,0,0
"audio_recorder.cpp",127,"AudioRecorder::renderOLED(const class AudioRecorder*, unsigned char[128]*)",1,0,14,0,0,0
"audio_recorder.cpp",134,"AudioRecorder::setupRecordingToFile(const class AudioRecorder*, enum AudioInputChannel, long int, enum AudioRecordingFolder)",9,0,42,0,0,0
"menu_item.h",54,"AudioRecorder::~AudioRecorder(const class AudioRecorder*)",1,0,1,0,0,0
"audio_recorder.h",26,"AudioRecorder::~AudioRecorder(const class AudioRecorder*)",2,0,6,0,0,0
,0,"AudioSourceSelector::AudioSourceSelector(const class AudioSourceSelector*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"audio_source_selector.h",28,"AudioSourceSelector::selectButtonPress(const class AudioSourceSelector*)",4,0,10,0,0,0
,0,"AudioSourceSelector::selectButtonPress(const class AudioSourceSelector*) (always inlined)",0,0,0,0,0,0
"menu_item.h",54,"AudioSourceSelector::~AudioSourceSelector(const class AudioSourceSelector*)",1,0,1,0,0,0
"audio_source_selector.h",23,"AudioSourceSelector::~AudioSourceSelector(const class AudioSourceSelector*)",2,0,6,0,0,0
,0,"Automation::Automation(const class Automation*) (always inlined)",0,0,0,0,0,0
"automation.cpp",64,"Automation::buttonAction(const class Automation*, unsigned char, bool, bool)",27,0,108,0,0,0
"automation.h",34,"Automation::getPatchSource(const class Automation*)",1,0,2,0,0,0
"automation.cpp",173,"Automation::horizontalEncoderAction(const class Automation*, long int)",2,0,11,0,0,0
"automation.cpp",136,"Automation::selectAutomationViewParameter(const class Automation*, bool)",21,0,87,0,0,0
"buttons.cpp",261,"Automation::selectButtonPress(const class Automation*)",9,0,51,0,0,0
,0,"AutomationView::auditionPadAction(const class AutomationView*, long int, long int, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::automationEditPadAction(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, long int, long int, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"pic.h",301,"AutomationView::blinkInterpolationShortcut(const class AutomationView*)",5,0,19,0,0,0
"automation_view.cpp",627,"AutomationView::blinkShortcuts(const class AutomationView*)",17,0,52,0,0,0
,0,"AutomationView::blinkShortcuts(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",1467,"AutomationView::buttonAction(const class AutomationView*, unsigned char, bool, bool)",125,0,748,0,0,0
,0,"AutomationView::buttonAction(const class AutomationView*, unsigned char, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::calculateKnobPosForMiddlePadPress(const class AutomationView*, enum Kind, long int) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",4455,"AutomationView::calculateKnobPosForModEncoderTurn(class ModelStackWithAutoParam*, long int, long int, const class AutomationView*)",9,0,25,0,0,0
"automation_view.cpp",4216,"AutomationView::calculateKnobPosForPadPress(const class AutomationView*, enum OutputType, long int, class ModelStackWithAutoParam*)",17,0,48,0,0,0
,0,"AutomationView::calculateKnobPosForSinglePadPress(const class AutomationView*, enum Kind, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::copyAutomation(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, long int, long int) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",1419,"AutomationView::displayAutomation(const class AutomationView*, bool, bool)",20,0,82,0,0,0
"automation_view.cpp",4541,"AutomationView::displayCVErrorMessage(const class AutomationView*)",4,0,24,0,0,0
,0,"AutomationView::enterScaleMode(const class AutomationView*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::exitScaleMode(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",457,"AutomationView::focusRegained(const class AutomationView*)",30,0,102,0,0,0
"automation_view.cpp",4520,"AutomationView::getAffectEntire(const class AutomationView*)",4,0,14,0,0,0
"automation_view.cpp",574,"AutomationView::getAutomationSubType(const class AutomationView*)",2,0,14,0,0,0
,0,"AutomationView::getAutomationSubType(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"song.cpp",244,"AutomationView::getEffectiveLength(const class AutomationView*, class ModelStackWithTimelineCounter*)",8,0,26,0,0,0
"automation_view.cpp",3829,"AutomationView::getLastSelectedGlobalParamArrayPosition(class Clip*, const class AutomationView*)",9,0,45,0,0,0
"automation_view.cpp",3811,"AutomationView::getLastSelectedNonGlobalParamArrayPosition(class Clip*, const class AutomationView*)",6,0,20,0,0,0
,0,"AutomationView::getLastSelectedParamArrayPosition(const class AutomationView*, class Clip*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",3745,"AutomationView::getLastSelectedParamShortcut(const class AutomationView*, class Clip*)",13,0,82,0,0,0
"automation_view.cpp",3952,"AutomationView::getMaxLength(const class AutomationView*)",3,0,12,0,0,0
,0,"AutomationView::getMaxLength(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",3961,"AutomationView::getMaxZoom(const class AutomationView*)",3,0,10,0,0,0
"automation_view.cpp",3987,"AutomationView::getMiddlePosFromSquare(const class AutomationView*, long int, long int, long int, long int)",4,0,23,0,0,0
"automation_view.cpp",3915,"AutomationView::getModelStackWithParamForClip(const class AutomationView*, class ModelStackWithTimelineCounter*, class Clip*, long int, enum Kind)",4,0,33,0,0,0
"automation_view.cpp",3970,"AutomationView::getNavSysId(const class AutomationView*)",1,0,2,0,0,0
,0,"AutomationView::getNavSysId(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",4501,"AutomationView::getNextSelectedParamArrayPosition(const class AutomationView*, long int, long int, long int)",3,0,13,0,0,0
"automation_view.cpp",4013,"AutomationView::getNodeInterpolation(class ModelStackWithAutoParam*, long int, bool, const class AutomationView*)",16,0,40,0,0,0
"automation_view.cpp",4001,"AutomationView::getParameterKnobPos(class ModelStackWithAutoParam*, long unsigned int, const class AutomationView*)",4,0,12,0,0,0
"automation_view.cpp",1325,"AutomationView::getParameterName(class Clip*, enum OutputType, char*, const class AutomationView*)",39,0,192,0,0,0
"automation_view.cpp",3979,"AutomationView::getSquareWidth(const class AutomationView*, long int, long int, long int, long int)",2,0,20,0,0,0
"automation_view.h",61,"AutomationView::getUIType(const class AutomationView*)",1,0,2,0,0,0
"automation_view.cpp",558,"AutomationView::graphicsRoutine(const class AutomationView*)",5,0,18,0,0,0
,0,"AutomationView::graphicsRoutine(const class AutomationView*) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleAuditionPadAction(const class AutomationView*, class InstrumentClip*, class Output*, enum OutputType, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleBackAndHorizontalEncoderButtonComboAction(const class AutomationView*, class Clip*, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleClipButtonAction(const class AutomationView*, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleCrossScreenButtonAction(const class AutomationView*, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleCVButtonAction(const class AutomationView*, enum OutputType, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleEditPadAction(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, class Output*, enum OutputType, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleHorizontalEncoderButtonAction(const class AutomationView*, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleKeyboardButtonAction(const class AutomationView*, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleKitButtonAction(const class AutomationView*, enum OutputType, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleMidiButtonAction(const class AutomationView*, enum OutputType, bool) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",4286,"AutomationView::handleMultiPadPress(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, long int, long int, long int, long int, long int, long int, long int, bool)",38,0,250,0,0,0
,0,"AutomationView::handleMutePadAction(const class AutomationView*, class ModelStackWithTimelineCounter*, class InstrumentClip*, class Output*, enum OutputType, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleParameterAutomationChange(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, enum OutputType, long int, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleParameterSelection(const class AutomationView*, class Clip*, enum OutputType, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleScaleButtonAction(const class AutomationView*, class InstrumentClip*, enum OutputType, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleSelectEncoderButtonAction(const class AutomationView*, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleSessionButtonAction(const class AutomationView*, class Clip*, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleSinglePadPress(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, long int, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleSynthButtonAction(const class AutomationView*, enum OutputType, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::handleVerticalEncoderButtonAction(const class AutomationView*, bool) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",2704,"AutomationView::horizontalEncoderAction(const class AutomationView*, long int)",33,0,170,0,0,0
"automation_view.cpp",4505,"AutomationView::inAutomationEditor(const class AutomationView*)",3,0,16,0,0,0
"automation_view.cpp",409,"AutomationView::initializeView(const class AutomationView*)",19,0,60,0,0,0
,0,"AutomationView::initInterpolation(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",380,"AutomationView::initMIDICCShortcutsForAutomation(const class AutomationView*)",6,0,25,0,0,0
,0,"AutomationView::initPadSelection(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",3863,"AutomationView::initParameterSelection(const class AutomationView*)",18,0,44,0,0,0
"automation_view.cpp",3083,"AutomationView::modEncoderAction(const class AutomationView*, long int, long int)",54,0,299,0,0,0
,0,"AutomationView::modEncoderActionForSelectedPad(const class AutomationView*, class ModelStackWithAutoParam*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::modEncoderActionForUnselectedPad(const class AutomationView*, class ModelStackWithAutoParam*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",66,"AutomationView::modEncoderButtonAction(const class AutomationView*, unsigned char, bool)",60,0,328,0,0,0
"automation_view.cpp",3850,"AutomationView::noteRowChanged(const class AutomationView*, class InstrumentClip*, class NoteRow*)",1,0,3,0,0,0
"automation_view.cpp",3855,"AutomationView::notifyPlaybackBegun(const class AutomationView*)",3,0,13,0,0,0
,0,"AutomationView::notifyPlaybackBegun(const class AutomationView*) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::onAutomationOverview(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",399,"AutomationView::opened(const class AutomationView*)",4,0,9,0,0,0
"song.cpp",244,"AutomationView::openedInBackground(const class AutomationView*)",16,0,63,0,0,0
"automation_view.cpp",1953,"AutomationView::padAction(const class AutomationView*, long int, long int, long int)",206,0,1315,0,0,0
,0,"AutomationView::padAction(const class AutomationView*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::pasteAutomation(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",845,"AutomationView::possiblyRefreshAutomationEditorGrid(class Clip*, enum Kind, long int, const class AutomationView*)",9,0,35,0,0,0
"automation_view.cpp",2346,"AutomationView::recordSinglePadPress(long int, long int, const class AutomationView*)",16,0,38,0,0,0
,0,"AutomationView::renderAutomationColumn(const class AutomationView*, class ModelStackWithAutoParam*, class RGB[18]*, unsigned char[18]*, long int, long int, bool, long int, long int, enum Kind, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::renderAutomationEditor(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, class RGB[18]*, unsigned char[18]*, long int, long int, long unsigned int, long int, long int, bool, enum Kind, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::renderAutomationOverview(const class AutomationView*, class ModelStackWithTimelineCounter*, class ModelStackWithThreeMainThings*, class Clip*, enum OutputType, class RGB[18]*, unsigned char[18]*, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::renderBipolarSquare(const class AutomationView*, class RGB[18]*, unsigned char[18]*, long int, long int, bool, enum Kind, long int) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",1097,"AutomationView::renderDisplay(const class AutomationView*, long int, long int, bool)",65,0,359,0,0,0
,0,"AutomationView::renderDisplay(const class AutomationView*, long int, long int, bool) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::renderDisplay7SEG(const class AutomationView*, class Clip*, enum OutputType, long int, bool) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",4409,"AutomationView::renderDisplayForMultiPadPress(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, long int, long int, long int, long int, bool)",18,0,97,0,0,0
,0,"AutomationView::renderDisplayOLED(const class AutomationView*, class Clip*, enum OutputType, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::renderLove(const class AutomationView*, class RGB[18]*, unsigned char[18]*, long int) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",593,"AutomationView::renderMainPads(const class AutomationView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",72,0,634,0,0,0
"automation_view.h",74,"AutomationView::renderOLED(const class AutomationView*, unsigned char[128]*)",1,0,1,0,0,0
"automation_view.cpp",1066,"AutomationView::renderSidebar(const class AutomationView*, long unsigned int, class RGB[18]*, unsigned char[18]*)",3,0,15,0,0,0
,0,"AutomationView::renderUndefinedArea(const class AutomationView*, long int, long unsigned int, long int, class RGB[18]*, unsigned char[18]*, long int, class TimelineView*, bool, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::renderUnipolarSquare(const class AutomationView*, class RGB[18]*, unsigned char[18]*, long int, long int, bool, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::resetInterpolationShortcutBlinking(const class AutomationView*) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::resetParameterShortcutBlinking(const class AutomationView*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",4547,"AutomationView::resetShortcutBlinking(const class AutomationView*)",4,0,19,0,0,0
"automation_view.cpp",3447,"AutomationView::selectEncoderAction(const class AutomationView*, signed char)",80,0,383,0,0,0
,0,"AutomationView::selectGlobalParam(const class AutomationView*, long int, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::selectMIDICC(const class AutomationView*, long int, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::selectNonGlobalParam(const class AutomationView*, long int, class Clip*) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",3629,"AutomationView::selectPatchCable(long int, class Clip*, const class AutomationView*)",16,0,49,0,0,0
"automation_view.cpp",3674,"AutomationView::selectPatchCableAtIndex(class Clip*, class PatchCableSet*, long int, bool&, const class AutomationView*)",16,0,39,0,0,0
"automation_view.cpp",4107,"AutomationView::setKnobIndicatorLevels(class ModelStackWithAutoParam*, long int, long int, const class AutomationView*)",10,0,57,0,0,0
"automation_view.cpp",4044,"AutomationView::setParameterAutomationValue(const class AutomationView*, class ModelStackWithAutoParam*, long int, long int, long int, long int, long int, long int, bool)",24,0,128,0,0,0
,0,"AutomationView::shiftAutomationHorizontally(const class AutomationView*, class ModelStackWithAutoParam*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::shortcutPadAction(const class AutomationView*, class ModelStackWithAutoParam*, class Clip*, class Output*, enum OutputType, long int, long int, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"automation_view.h",114,"AutomationView::toClipMinder(const class AutomationView*)",1,0,8,0,0,0
,0,"AutomationView::toggleAutomationInterpolation(const class AutomationView*) (always inlined)",0,0,0,0,0,0
,0,"AutomationView::toggleAutomationPadSelectionMode(const class AutomationView*, class ModelStackWithAutoParam*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"playback_handler.h",214,"AutomationView::updateModPosition(const class AutomationView*, class ModelStackWithAutoParam*, long unsigned int, bool, bool)",11,0,60,0,0,0
,0,"AutomationView::updateModPosition(const class AutomationView*, class ModelStackWithAutoParam*, long unsigned int, bool, bool) (always inlined)",0,0,0,0,0,0
"automation_view.cpp",2814,"AutomationView::verticalEncoderAction(const class AutomationView*, long int, bool)",88,0,402,0,0,0
"auto_param.cpp",1631,"AutoParam::appendParam(const class AutoParam*, class AutoParam*, long int, long int, bool)",40,0,202,0,0,0
"auto_param.cpp",53,"AutoParam::AutoParam(const class AutoParam*)",5,0,11,0,0,0
"auto_param.cpp",1420,"AutoParam::beenCloned(const class AutoParam*, bool, long int)",27,0,146,0,0,0
,0,"AutoParam::cancelOverriding(const class AutoParam*) (always inlined)",0,0,0,0,0,0
,0,"AutoParam::containsSomething(const class AutoParam*, long unsigned int) (always inlined)",0,0,0,0,0,0
"auto_param.cpp",2187,"AutoParam::copy(const class AutoParam*, long int, long int, class CopiedParamAutomation*, bool, const class ModelStackWithAutoParam*)",27,0,145,0,0,0
"auto_param.cpp",368,"AutoParam::deleteAutomation(const class AutoParam*, class Action*, const class ModelStackWithAutoParam*, bool)",7,0,31,0,0,0
,0,"AutoParam::deleteAutomation(const class AutoParam*, class Action*, const class ModelStackWithAutoParam*, bool) (always inlined)",0,0,0,0,0,0
,0,"AutoParam::deleteAutomationBasicForSetup(const class AutoParam*) (always inlined)",0,0,0,0,0,0
"auto_param.cpp",1739,"AutoParam::deleteNodesBeyondPos(const class AutoParam*, long int)",4,0,18,0,0,0
,0,"AutoParam::deleteNodesWithinRegion(const class AutoParam*, const class ModelStackWithAutoParam*, long int, long int) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"AutoParam::deleteRedundantNodeInLinearRun(const class AutoParam*, long int, long int, bool)",18,0,99,0,0,0
,0,"AutoParam::deleteTime(const class AutoParam*, long int, long int, class ModelStackWithAutoParam*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"AutoParam::generateRepeats(const class AutoParam*, long unsigned int, long unsigned int, bool)",45,0,237,0,0,0
,0,"AutoParam::generateRepeats(const class AutoParam*, long unsigned int, long unsigned int, bool) (always inlined)",0,0,0,0,0,0
,0,"AutoParam::getCurrentValue(const class AutoParam*) (always inlined)",0,0,0,0,0,0
,0,"AutoParam::getDistanceToNextNode(const class AutoParam*, const class ModelStackWithAutoParam*, long int, bool) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"AutoParam::getValueAtPos(const class AutoParam*, long unsigned int, const class ModelStackWithAutoParam*, bool)",23,0,88,0,0,0
"auto_param.cpp",1309,"AutoParam::getValuePossiblyAtPos(const class AutoParam*, long int, class ModelStackWithAutoParam*)",3,0,6,0,0,0
,0,"AutoParam::getValuePossiblyAtPos(const class AutoParam*, long int, class ModelStackWithAutoParam*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"AutoParam::grabValueFromPos(const class AutoParam*, long unsigned int, const class ModelStackWithAutoParam*)",4,0,15,0,0,0
,0,"AutoParam::grabValueFromPos(const class AutoParam*, long unsigned int, const class ModelStackWithAutoParam*) (always inlined)",0,0,0,0,0,0
"auto_param.cpp",1042,"AutoParam::homogenizeRegion(const class AutoParam*, const class ModelStackWithAutoParam*, long int, long int, long int, bool, bool, long int, bool, long int)",74,0,360,0,0,0
,0,"AutoParam::insertStolenNodes(const class AutoParam*, const class ModelStackWithAutoParam*, long int, long int, long int, class Action*, struct StolenParamNodes*) (always inlined)",0,0,0,0,0,0
,0,"AutoParam::insertTime(const class AutoParam*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"AutoParam::isAutomated(const class AutoParam*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"AutoParam::makeInterpolationGoodAgain(const class AutoParam*, long int, long int)",35,0,149,0,0,0
"auto_param.cpp",2643,"AutoParam::nudgeNonInterpolatingNodesAtPos(const class AutoParam*, long int, long int, long int, class Action*, const class ModelStackWithAutoParam*)",32,0,130,0,0,0
"auto_param.cpp",2060,"AutoParam::paste(const class AutoParam*, long int, long int, float, const class ModelStackWithAutoParam*, class CopiedParamAutomation*, bool)",45,0,243,0,0,0
"resizeable_array.h",56,"AutoParam::processCurrentPos(const class AutoParam*, const class ModelStackWithAutoParam*, bool, bool, bool, bool)",91,0,463,0,0,0
"auto_param.cpp",1878,"AutoParam::readFromFile(const class AutoParam*, class Deserializer&, long int)",43,0,156,0,0,0
,0,"AutoParam::setCurrentValueBasicForSetup(const class AutoParam*, long int) (always inlined)",0,0,0,0,0,0
"auto_param.cpp",99,"AutoParam::setCurrentValueInResponseToUserInput(const class AutoParam*, long int, const class ModelStackWithAutoParam*, long int, bool, bool, bool)",86,0,355,0,0,0
"auto_param.cpp",87,"AutoParam::setCurrentValueWithNoReversionOrRecording(const class AutoParam*, const class ModelStackWithAutoParam*, long int)",4,0,18,0,0,0
"auto_param.cpp",922,"AutoParam::setNodeAtPos(const class AutoParam*, long int, long int, bool)",13,0,37,0,0,0
"auto_param.cpp",1383,"AutoParam::setPlayPos(const class AutoParam*, long unsigned int, const class ModelStackWithAutoParam*, bool)",14,0,59,0,0,0
"auto_param.cpp",776,"AutoParam::setupInterpolation(const class AutoParam*, class ParamNode*, long int, long int, bool)",17,0,42,0,0,0
"auto_param.cpp",949,"AutoParam::setValueForRegion(const class AutoParam*, long unsigned int, long unsigned int, long int, const class ModelStackWithAutoParam*, enum ActionType)",31,0,131,0,0,0
"auto_param.cpp",850,"AutoParam::setValuePossiblyForRegion(const class AutoParam*, long int, const class ModelStackWithAutoParam*, long int, long int, bool)",5,0,22,0,0,0
,0,"AutoParam::setValuePossiblyForRegion(const class AutoParam*, long int, const class ModelStackWithAutoParam*, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"auto_param.cpp",2031,"AutoParam::shiftParamVolumeByDB(const class AutoParam*, float)",4,0,24,0,0,0
,0,"AutoParam::shiftValues(const class AutoParam*, long int) (always inlined)",0,0,0,0,0,0
"auto_param.cpp",2752,"AutoParam::stealNodes(const class AutoParam*, const class ModelStackWithAutoParam*, long int, long int, long int, class Action*, struct StolenParamNodes*)",27,0,145,0,0,0
"auto_param.cpp",2044,"AutoParam::swapState(const class AutoParam*, class AutoParamState*, const class ModelStackWithAutoParam*)",4,0,27,0,0,0
"auto_param.cpp",830,"AutoParam::tickSamples(const class AutoParam*, long int)",7,0,32,0,0,0
,0,"AutoParam::transposeCCValuesToChannelPressureValues(const class AutoParam*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"AutoParam::trimToLength(const class AutoParam*, long unsigned int, class Action*, const class ModelStackWithAutoParam*)",35,0,139,0,0,0
"auto_param.cpp",1847,"AutoParam::writeToFile(const class AutoParam*, class Serializer&, bool, long int*)",11,0,62,0,0,0
,0,"AutoParam::~AutoParam(const class AutoParam*) (always inlined)",0,0,0,0,0,0
,0,"AutoParamState::AutoParamState(const class AutoParamState*) (always inlined)",0,0,0,0,0,0
,0,"AutoParamState::~AutoParamState(const class AutoParamState*) (always inlined)",0,0,0,0,0,0
,0,"BackedUpParamManager::BackedUpParamManager(const struct BackedUpParamManager*) (always inlined)",0,0,0,0,0,0
,0,"BackedUpParamManager::~BackedUpParamManager(const struct BackedUpParamManager*) (always inlined)",0,0,0,0,0,0
,0,"Bank::Bank(const class Bank*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"bank.h",24,"Bank::readCurrentValue(const class Bank*)",2,0,6,0,0,0
"bank.h",26,"Bank::writeCurrentValue(const class Bank*)",4,0,12,0,0,0
"menu_item.h",54,"Bank::~Bank(const class Bank*)",1,0,1,0,0,0
"bank.h",21,"Bank::~Bank(const class Bank*)",2,0,6,0,0,0
,0,"Base::Base(const struct Base*) (always inlined)",0,0,0,0,0,0
,0,"Base::calcFilterCutoff(float) (always inlined)",0,0,0,0,0,0
"base.hpp",33,"Base::getHPF(const struct Base*)",1,0,3,0,0,0
"base.hpp",32,"Base::setHPF(const struct Base*, float)",1,0,1,0,0,0
,0,"Base::setPanLevels(const struct Base*, const long int, const long int) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int, unsigned int, const char*) (always inlined)",0,0,0,0,0,0
"basic_string.tcc",134,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int&, unsigned int)",2,0,24,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int&, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, char*) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, const char*) (always inlined)",0,0,0,0,0,0
"basic_string.h",280,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*)",4,0,9,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*) (always inlined)",0,0,0,0,0,0
"basic_string.tcc",321,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int, unsigned int, const char*, unsigned int)",13,0,91,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int, unsigned int, const char*, unsigned int) (always inlined)",0,0,0,0,0,0
"basic_string.tcc",506,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int, unsigned int, const char*, const unsigned int)",10,0,77,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int, unsigned int, const char*, const unsigned int) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_allocate(class allocator<char>&, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, const char*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, const char*, unsigned int) (always inlined)",0,0,0,0,0,0
"basic_string.h",1059,"basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*, const char*)",6,0,93,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::length(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::operator std::__cxx11::basic_string<char>::__sv_type(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*) (always inlined)",0,0,0,0,0,0
,0,"basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string(const class basic_string<char, std::char_traits<char>, std::allocator<char> >*) (always inlined)",0,0,0,0,0,0
,0,"basic_string_view<char, std::char_traits<char> >::basic_string_view(const class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"basic_string_view<char, std::char_traits<char> >::empty(const class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"basic_string_view<char, std::char_traits<char> >::substr(const class basic_string_view<char, std::char_traits<char> >*, unsigned int, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"BasicFilterComponent::BasicFilterComponent(const class BasicFilterComponent*) (always inlined)",0,0,0,0,0,0
,0,"BasicFilterComponent::doAPF(const class BasicFilterComponent*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"BasicFilterComponent::doFilter(const class BasicFilterComponent*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"BasicFilterComponent::getFeedbackOutput(const class BasicFilterComponent*, long int) (always inlined)",0,0,0,0,0,0
,0,"BasicFilterComponent::getFeedbackOutputWithoutLshift(const class BasicFilterComponent*, long int) (always inlined)",0,0,0,0,0,0
,0,"BasicFilterComponent::reset(const class BasicFilterComponent*) (always inlined)",0,0,0,0,0,0
"deluge.cpp",112,"batteryLEDBlink()",3,0,22,0,0,0
,0,"Bend::Bend(const class Bend*, enum String, class initializer_list<MenuItem*>) (always inlined)",0,0,0,0,0,0
"bend.h",28,"Bend::isRelevant(const class Bend*, class ModControllableAudio*, long int)",2,0,11,0,0,0
"bend.h",23,"Bend::~Bend(const class Bend*)",7,0,28,0,0,0
"bend.h",23,"Bend::~Bend(const class Bend*)",7,0,25,0,0,0
,0,"Bend::~Bend(const class Bend*) (always inlined)",0,0,0,0,0,0
,0,"BendRange::BendRange(const class BendRange*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"bend_range.h",24,"BendRange::getMaxValue(const class BendRange*)",1,0,2,0,0,0
"bend_range.h",26,"BendRange::readCurrentValue(const class BendRange*)",2,0,5,0,0,0
"value.h",42,"BendRange::writeCurrentValue(const class BendRange*)",1,0,5,0,0,0
"menu_item.h",54,"BendRange::~BendRange(const class BendRange*)",1,0,1,0,0,0
"bend_range.h",23,"BendRange::~BendRange(const class BendRange*)",2,0,6,0,0,0
,0,"BidirectionalLinkedList::addToEnd(const class BidirectionalLinkedList*, class BidirectionalLinkedListNode*) (always inlined)",0,0,0,0,0,0
,0,"BidirectionalLinkedList::BidirectionalLinkedList(const class BidirectionalLinkedList*) (always inlined)",0,0,0,0,0,0
,0,"BidirectionalLinkedList::getFirst(const class BidirectionalLinkedList*) (always inlined)",0,0,0,0,0,0
,0,"BidirectionalLinkedList::getNext(const class BidirectionalLinkedList*, class BidirectionalLinkedListNode*) (always inlined)",0,0,0,0,0,0
,0,"BidirectionalLinkedList::~BidirectionalLinkedList(const class BidirectionalLinkedList*, const int) (always inlined)",0,0,0,0,0,0
,0,"BidirectionalLinkedListNode::BidirectionalLinkedListNode(const class BidirectionalLinkedListNode*) (always inlined)",0,0,0,0,0,0
,0,"BidirectionalLinkedListNode::insertOtherNodeBefore(const class BidirectionalLinkedListNode*, class BidirectionalLinkedListNode*) (always inlined)",0,0,0,0,0,0
"bidirectional_linked_list.cpp",134,"BidirectionalLinkedListNode::remove(const class BidirectionalLinkedListNode*)",4,0,8,0,0,0
,0,"BidirectionalLinkedListNode::remove(const class BidirectionalLinkedListNode*) (always inlined)",0,0,0,0,0,0
"bidirectional_linked_list.cpp",128,"BidirectionalLinkedListNode::~BidirectionalLinkedListNode(const class BidirectionalLinkedListNode*)",5,0,14,0,0,0
"bidirectional_linked_list.cpp",128,"BidirectionalLinkedListNode::~BidirectionalLinkedListNode(const class BidirectionalLinkedListNode*)",5,0,9,0,0,0
,0,"BidirectionalLinkedListNode::~BidirectionalLinkedListNode(const class BidirectionalLinkedListNode*) (always inlined)",0,0,0,0,0,0
,0,"blinkKnobIndicator(long int, bool) (always inlined)",0,0,0,0,0,0
"indicator_leds.cpp",314,"blinkKnobIndicatorLevelTimeout()",4,0,23,0,0,0
,0,"blinkKnobIndicatorLevelTimeout() (always inlined)",0,0,0,0,0,0
"indicator_leds.cpp",65,"blinkLed(enum LED, unsigned char, unsigned char, bool)",15,0,62,0,0,0
"oled.cpp",749,"breakStringIntoLines(const char*, struct TextLineBreakdown*)",31,0,76,0,0,0
"browser.cpp",557,"Browser::arrivedInNewFolder(const class Browser*, long int, const char*, const char*)",90,0,435,0,0,0
"browser.cpp",1568,"Browser::backButtonAction(const class Browser*)",15,0,70,0,0,0
,0,"Browser::backButtonAction(const class Browser*) (always inlined)",0,0,0,0,0,0
"browser.cpp",66,"Browser::Browser(const class Browser*)",9,0,19,0,0,0
"browser.cpp",1502,"Browser::buttonAction(const class Browser*, unsigned char, bool, bool)",15,0,70,0,0,0
"browser.cpp",117,"Browser::close(const class Browser*)",2,0,6,0,0,0
,0,"Browser::createFolder(const class Browser*) (always inlined)",0,0,0,0,0,0
,0,"Browser::cullSomeFileItems(const class Browser*) (always inlined)",0,0,0,0,0,0
,0,"Browser::currentFileDeleted(const class Browser*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",50,"Browser::deleteFolderAndDuplicateItems(enum Availability)",33,0,204,0,0,0
"browser.cpp",146,"Browser::deleteSomeFileItems(long int, long int)",7,0,34,0,0,0
"browser.cpp",1445,"Browser::displayText(const class Browser*, bool)",17,0,139,0,0,0
"resizeable_array.h",56,"Browser::emptyFileItems()",7,0,32,0,0,0
"browser.cpp",1491,"Browser::getCurrentFileItem()",5,0,18,0,0,0
"resizeable_array.h",56,"Browser::getNewFileItem(const class Browser*)",28,0,113,0,0,0
"browser.cpp",1385,"Browser::getSlot(const char*)",14,0,65,0,0,0
"browser.h",106,"Browser::getUIType(const class Browser*)",1,0,2,0,0,0
"display.h",92,"Browser::getUnusedSlot(const class Browser*, enum OutputType, class String*, const char*)",40,0,215,0,0,0
"browser.cpp",1586,"Browser::goIntoDeleteFileContextMenu(const class Browser*)",4,0,17,0,0,0
,0,"Browser::goIntoDeleteFileContextMenu(const class Browser*) (always inlined)",0,0,0,0,0,0
"browser.cpp",1618,"Browser::goIntoFolder(const class Browser*, const char*)",12,0,50,0,0,0
,0,"Browser::goIntoFolder(const class Browser*, const char*) (always inlined)",0,0,0,0,0,0
,0,"Browser::goUpOneDirectoryLevel(const class Browser*) (always inlined)",0,0,0,0,0,0
"browser.cpp",1540,"Browser::mainButtonAction(const class Browser*, bool)",10,0,40,0,0,0
"browser.cpp",79,"Browser::opened(const class Browser*)",6,0,12,0,0,0
"browser.cpp",1173,"Browser::predictExtendedText(const class Browser*)",35,0,178,0,0,0
"browser.cpp",255,"Browser::readFileItemsForFolder(const class Browser*, const char*, bool, const char**, const char*, long int, long int)",57,0,208,0,0,0
"browser.cpp",490,"Browser::readFileItemsFromFolderAndMemory(const class Browser*, class Song*, enum OutputType, const char*, const char*, const char*, bool, enum Availability, long int)",16,0,87,0,0,0
"browser.cpp",1311,"Browser::renderOLED(const class Browser*, unsigned char[128]*)",21,0,157,0,0,0
"browser.cpp",935,"Browser::selectEncoderAction(const class Browser*, signed char)",79,0,473,0,0,0
"browser.cpp",1595,"Browser::setEnteredTextFromCurrentFilename(const class Browser*)",8,0,25,0,0,0
"browser.cpp",1705,"Browser::sortFileItems(const class Browser*)",44,0,140,0,0,0
"buttons.cpp",68,"buttonAction(unsigned char, bool, bool)",61,0,533,0,0,0
,0,"byteToHex(unsigned char, char*) (always inlined)",0,0,0,0,0,0
,0,"cableToLinearParamShortcut(long int) (always inlined)",0,0,0,0,0,0
,0,"CacheManager::CacheManager(const class CacheManager*) (always inlined)",0,0,0,0,0,0
,0,"CacheManager::QueueForReclamation(const class CacheManager*, enum StealableQueue, class Stealable*) (always inlined)",0,0,0,0,0,0
,0,"CacheManager::ReclaimMemory(const class CacheManager*, class MemoryRegion&, long int, void*, long int* restrict) (always inlined)",0,0,0,0,0,0
,0,"CacheManager::~CacheManager(const class CacheManager*, const int) (always inlined)",0,0,0,0,0,0
"midi_takeover.cpp",42,"calculateKnobPos(long int, long int, class MIDIKnob*, bool, long int)",31,0,223,0,0,0
,0,"change_destination_of_send_pipe(struct usb_utr*, short unsigned int, short unsigned int*, int) (always inlined)",0,0,0,0,0,0
,0,"changeDimmerInterval(long int) (always inlined)",0,0,0,0,0,0
,0,"changeRefreshTime(long int) (always inlined)",0,0,0,0,0,0
"ui.cpp",99,"changeRootUI(class UI*)",8,0,33,0,0,0
"ui.cpp",129,"changeUIAtLevel(class UI*, long int)",11,0,46,0,0,0
,0,"changeUISideways(class UI*) (always inlined)",0,0,0,0,0,0
,0,"char_traits<char>::assign(char&, const char&) (always inlined)",0,0,0,0,0,0
,0,"char_traits<char>::compare(const char*, const char*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"char_traits<char>::copy(char*, const char*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"char_traits<char>::move(char*, const char*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"charCaseEqual(char, char) (always inlined)",0,0,0,0,0,0
"ff.c",3291,"check_fs(struct FATFS*, long unsigned int)",8,0,92,0,0,0
,0,"ChordColumn::ChordColumn(const class ChordColumn*) (always inlined)",0,0,0,0,0,0
"chord.cpp",72,"ChordColumn::handlePad(const class ChordColumn*, class ModelStackWithTimelineCounter*, struct PressedPad, class KeyboardLayout*)",9,0,64,0,0,0
"chord.cpp",68,"ChordColumn::handleVerticalEncoder(const class ChordColumn*, signed char, long int)",1,0,2,0,0,0
"chord.cpp",59,"ChordColumn::renderColumn(const class ChordColumn*, class RGB[18]*, long int)",4,0,18,0,0,0
"chord.cpp",50,"ChordColumn::setActiveChord(const class ChordColumn*, enum ChordModeChord)",3,0,6,0,0,0
,0,"ChordMemColumn::ChordMemColumn(const class ChordMemColumn*) (always inlined)",0,0,0,0,0,0
"chord_mem.cpp",39,"ChordMemColumn::handlePad(const class ChordMemColumn*, class ModelStackWithTimelineCounter*, struct PressedPad, class KeyboardLayout*)",17,0,149,0,0,0
"chord_mem.cpp",25,"ChordMemColumn::renderColumn(const class ChordMemColumn*, class RGB[18]*, long int)",5,0,23,0,0,0
,0,"clamp<float>(const float&, const float&, const float&) (always inlined)",0,0,0,0,0,0
,0,"clamp<int>(const int&, const int&, const int&) (always inlined)",0,0,0,0,0,0
,0,"clamp<long int>(const long int&, const long int&, const long int&) (always inlined)",0,0,0,0,0,0
,0,"clamp<long long int>(const long long int&, const long long int&, const long long int&) (always inlined)",0,0,0,0,0,0
,0,"clamp<long unsigned int>(const long unsigned int&, const long unsigned int&, const long unsigned int&) (always inlined)",0,0,0,0,0,0
,0,"clamp<short int>(const short int&, const short int&, const short int&) (always inlined)",0,0,0,0,0,0
,0,"clamp<signed char>(const signed char&, const signed char&, const signed char&) (always inlined)",0,0,0,0,0,0
,0,"clamp<unsigned char>(const unsigned char&, const unsigned char&, const unsigned char&) (always inlined)",0,0,0,0,0,0
,0,"clear_status(long unsigned int, long unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"clearColumnWithoutSending(long int) (always inlined)",0,0,0,0,0,0
,0,"clearIRQInterrupt(int) (always inlined)",0,0,0,0,0,0
,0,"clearKnobIndicatorLevels() (always inlined)",0,0,0,0,0,0
,0,"clearMainPadsWithoutSending() (always inlined)",0,0,0,0,0,0
,0,"clearPendingUIRendering() (always inlined)",0,0,0,0,0,0
,0,"clearShiftSticky() (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",238,"clearSideBar()",3,0,10,0,0,0
"clear_song.cpp",73,"ClearSong::acceptCurrentOption(const class ClearSong*)",27,0,87,0,0,0
"clear_song.cpp",55,"ClearSong::focusRegained(const class ClearSong*)",10,0,41,0,0,0
"display.h",92,"ClearSong::getOptions(const class ClearSong*)",5,0,39,0,0,0
"clear_song.cpp",39,"ClearSong::getTitle(const class ClearSong*)",1,0,2,0,0,0
"context_menu.h",31,"ClearSong::~ClearSong(const class ClearSong*)",1,0,1,0,0,0
"clear_song.h",23,"ClearSong::~ClearSong(const class ClearSong*)",2,0,6,0,0,0
"pad_leds.cpp",133,"clearTickSquares(bool)",10,0,78,0,0,0
"clip.cpp",325,"Clip::appendClip(const class Clip*, class ModelStackWithTimelineCounter*, class ModelStackWithTimelineCounter*)",11,0,69,0,0,0
"clip.cpp",608,"Clip::backtrackingCouldLoopBackToEnd(const class Clip*)",1,0,6,0,0,0
"clip.cpp",517,"Clip::beginInstance(const class Clip*, class Song*, long int)",15,0,48,0,0,0
"clip.cpp",1027,"Clip::beginLinearRecording(const class Clip*, class ModelStackWithTimelineCounter*, long int)",6,0,18,0,0,0
,0,"Clip::beginLinearRecording(const class Clip*, class ModelStackWithTimelineCounter*, long int) (always inlined)",0,0,0,0,0,0
,0,"Clip::cancelAnyArming(const class Clip*) (always inlined)",0,0,0,0,0,0
"clip.cpp",990,"Clip::clear(const class Clip*, class Action*, class ModelStackWithTimelineCounter*, bool)",10,0,47,0,0,0
,0,"Clip::Clip(const class Clip*, enum ClipType) (always inlined)",0,0,0,0,0,0
"clip.cpp",98,"Clip::copyBasicsFrom(const class Clip*, const class Clip*)",5,0,11,0,0,0
,0,"Clip::copyBasicsFrom(const class Clip*, const class Clip*) (always inlined)",0,0,0,0,0,0
"clip.cpp",510,"Clip::deleteSoundsWhichWontSound(const class Clip*, class Song*)",2,0,25,0,0,0
"clip.cpp",862,"Clip::drawUndefinedArea(long int, long unsigned int, long int, class RGB*, unsigned char*, class TimelineView*, bool, const class Clip*, long int)",16,0,70,0,0,0
"clip.cpp",548,"Clip::endInstance(const class Clip*, long int, bool)",7,0,34,0,0,0
"clip.cpp",628,"Clip::expectEvent(const class Clip*)",1,0,1,0,0,0
"clip.cpp",624,"Clip::getActiveModControllable(const class Clip*, class ModelStackWithTimelineCounter*)",3,0,12,0,0,0
"clip.cpp",165,"Clip::getActualCurrentPosAsIfPlayingInForwardDirection(const class Clip*)",5,0,11,0,0,0
,0,"Clip::getClipBeingRecordedFrom(const class Clip*) (always inlined)",0,0,0,0,0,0
"clip.cpp",457,"Clip::getClipToRecordTo(const class Clip*)",1,0,11,0,0,0
,0,"Clip::getClipToRecordTo(const class Clip*) (always inlined)",0,0,0,0,0,0
,0,"Clip::getCurrentPosAsIfPlayingInForwardDirection(const class Clip*) (always inlined)",0,0,0,0,0,0
"clip.cpp",191,"Clip::getLastProcessedPos(const class Clip*)",1,0,2,0,0,0
"clip.cpp",148,"Clip::getLivePos(const class Clip*)",7,0,13,0,0,0
"clip.cpp",598,"Clip::getLoopLength(const class Clip*)",1,0,2,0,0,0
,0,"Clip::getLoopLength(const class Clip*) (always inlined)",0,0,0,0,0,0
"clip.cpp",1054,"Clip::getMaxLength(const class Clip*)",1,0,2,0,0,0
"clip.cpp",139,"Clip::getMaxZoom(const class Clip*)",4,0,14,0,0,0
"clip.cpp",612,"Clip::getPosAtWhichPlaybackWillCut(const class Clip*, const class ModelStackWithTimelineCounter*)",1,0,6,0,0,0
"clip.cpp",616,"Clip::getSuggestedParamManager(const class Clip*, class Clip*, class ParamManagerForTimeline**, class Sound*)",1,0,3,0,0,0
"clip.cpp",620,"Clip::getTimelineCounterToRecordTo(const class Clip*)",2,0,11,0,0,0
"clip.h",78,"Clip::increaseLengthWithRepeats(const class Clip*, class ModelStackWithTimelineCounter*, long int, enum IndependentNoteRowLengthIncrease, bool, class Action*)",1,0,1,0,0,0
"clip.cpp",1170,"Clip::incrementPos(const class Clip*, class ModelStackWithTimelineCounter*, long int)",3,0,7,0,0,0
,0,"Clip::isActiveOnOutput(const class Clip*) (always inlined)",0,0,0,0,0,0
,0,"Clip::isArrangementOnlyClip(const class Clip*) (always inlined)",0,0,0,0,0,0
"clip.cpp",603,"Clip::isPlayingAutomationNow(const class Clip*)",1,0,15,0,0,0
"clip.cpp",840,"Clip::lengthChanged(const class Clip*, class ModelStackWithTimelineCounter*, long int, class Action*)",11,0,55,0,0,0
,0,"Clip::lengthChanged(const class Clip*, class ModelStackWithTimelineCounter*, long int, class Action*) (always inlined)",0,0,0,0,0,0
,0,"Clip::opportunityToBeginSessionLinearRecording(const class Clip*, class ModelStackWithTimelineCounter*, bool*, long int) (always inlined)",0,0,0,0,0,0
"clip.cpp",895,"Clip::outputChanged(const class Clip*, class ModelStackWithTimelineCounter*, class Output*)",3,0,23,0,0,0
,0,"Clip::outputChanged(const class Clip*, class ModelStackWithTimelineCounter*, class Output*) (always inlined)",0,0,0,0,0,0
"clip.cpp",806,"Clip::posReachedEnd(const class Clip*, class ModelStackWithTimelineCounter*)",10,0,49,0,0,0
"clip.cpp",1059,"Clip::possiblyCloneForArrangementRecording(const class Clip*, class ModelStackWithTimelineCounter*)",42,0,174,0,0,0
"clip.cpp",222,"Clip::processCurrentPos(const class Clip*, class ModelStackWithTimelineCounter*, long unsigned int)",36,0,174,0,0,0
"clip.cpp",697,"Clip::readTagFromFile(const class Clip*, class Deserializer&, const char*, class Song*, long int*)",32,0,213,0,0,0
"clip.cpp",208,"Clip::reGetParameterAutomation(const class Clip*, class ModelStackWithTimelineCounter*)",7,0,29,0,0,0
,0,"Clip::reGetParameterAutomation(const class Clip*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
"clip.cpp",638,"Clip::renderAsSingleRow(const class Clip*, class ModelStackWithTimelineCounter*, class TimelineView*, long int, long unsigned int, class RGB*, unsigned char*, bool, long int, long int, long int, long int, bool, bool)",5,0,26,0,0,0
,0,"Clip::renderAsSingleRow(const class Clip*, class ModelStackWithTimelineCounter*, class TimelineView*, long int, long unsigned int, class RGB*, unsigned char*, bool, long int, long int, long int, long int, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"Clip::resumeOriginalClipFromThisClone(const class Clip*, class ModelStackWithTimelineCounter*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
"clip.cpp",358,"Clip::setPos(const class Clip*, class ModelStackWithTimelineCounter*, long int, bool)",10,0,38,0,0,0
"param_manager.h",53,"Clip::setPosForParamManagers(const class Clip*, class ModelStackWithTimelineCounter*, bool)",6,0,27,0,0,0
"clip.cpp",107,"Clip::setupForRecordingAsAutoOverdub(const class Clip*, class Clip*, class Song*, enum OverDubType)",9,0,32,0,0,0
"clip.cpp",914,"Clip::solicitParamManager(const class Clip*, class Song*, class ParamManager*, class Clip*)",31,0,119,0,0,0
"clip.h",127,"Clip::stopAllNotesPlaying(const class Clip*, class Song*, bool)",1,0,1,0,0,0
"clip.h",73,"Clip::transferVoicesToOriginalClipFromThisClone(const class Clip*, class ModelStackWithTimelineCounter*, class ModelStackWithTimelineCounter*)",1,0,2,0,0,0
"clip.cpp",568,"Clip::undoDetachmentFromOutput(const class Clip*, class ModelStackWithTimelineCounter*)",10,0,39,0,0,0
"clip.cpp",1034,"Clip::wantsToBeginLinearRecording(const class Clip*, class Song*)",1,0,8,0,0,0
"clip.cpp",661,"Clip::writeDataToFile(const class Clip*, class Serializer&, class Song*)",17,0,122,0,0,0
,0,"Clip::writeMidiCommandsToFile(const class Clip*, class Serializer&, class Song*) (always inlined)",0,0,0,0,0,0
"clip.cpp",646,"Clip::writeToFile(const class Clip*, class Song*, class Serializer&)",7,0,28,0,0,0
"song.cpp",66,"Clip::~Clip(const class Clip*)",8,0,17,0,0,0
,0,"ClipArray::ClipArray(const class ClipArray*) (always inlined)",0,0,0,0,0,0
,0,"ClipArray::getClipAtIndex(const class ClipArray*, long int) (always inlined)",0,0,0,0,0,0
"clip_array.cpp",31,"ClipArray::getIndexForClip(const class ClipArray*, class Clip*)",3,0,21,0,0,0
"clip_array.cpp",22,"ClipArray::insertClipAtIndex(const class ClipArray*, class Clip*, long int)",1,0,1,0,0,0
,0,"ClipArray::insertClipAtIndex(const class ClipArray*, class Clip*, long int) (always inlined)",0,0,0,0,0,0
,0,"ClipArray::~ClipArray(const class ClipArray*) (always inlined)",0,0,0,0,0,0
"clip_instance.cpp",39,"ClipInstance::change(const class ClipInstance*, class Action*, class Output*, long int, long int, class Clip*)",9,0,53,0,0,0
"clip_instance.cpp",31,"ClipInstance::getColour(const class ClipInstance*)",4,0,21,0,0,0
,0,"ClipInstance::getColour(const class ClipInstance*) (always inlined)",0,0,0,0,0,0
,0,"ClipInstanceVector::ClipInstanceVector(const class ClipInstanceVector*) (always inlined)",0,0,0,0,0,0
"clip_instance_vector.cpp",25,"ClipInstanceVector::getElement(const class ClipInstanceVector*, long int)",6,0,16,0,0,0
,0,"ClipInstanceVector::~ClipInstanceVector(const class ClipInstanceVector*) (always inlined)",0,0,0,0,0,0
"clip_navigation_timeline_view.cpp",38,"ClipNavigationTimelineView::horizontalScrollForLinearRecording(const class ClipNavigationTimelineView*, long int)",7,0,43,0,0,0
,0,"Clipping::Clipping(const class Clipping*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"clipping.h",30,"Clipping::getMaxValue(const class Clipping*)",1,0,2,0,0,0
"clipping.h",28,"Clipping::readCurrentValue(const class Clipping*)",2,0,6,0,0,0
"clipping.h",29,"Clipping::writeCurrentValue(const class Clipping*)",2,0,6,0,0,0
"menu_item.h",54,"Clipping::~Clipping(const class Clipping*)",1,0,1,0,0,0
"clipping.h",24,"Clipping::~Clipping(const class Clipping*)",2,0,6,0,0,0
"clip_view.cpp",54,"ClipView::buttonAction(const class ClipView*, unsigned char, bool, bool)",3,0,25,0,0,0
"clip_view.cpp",246,"ClipView::changeClipLength(const class ClipView*, long int, long unsigned int, class Action*&)",33,0,147,0,0,0
"clip_navigation_timeline_view.cpp",27,"ClipView::focusRegained(const class ClipView*)",1,0,5,0,0,0
,0,"ClipView::focusRegained(const class ClipView*) (always inlined)",0,0,0,0,0,0
,0,"ClipView::getLengthChopAmount(const class ClipView*, long int) (always inlined)",0,0,0,0,0,0
,0,"ClipView::getLengthExtendAmount(const class ClipView*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",244,"ClipView::getMaxLength(const class ClipView*)",1,0,7,0,0,0
"song.cpp",244,"ClipView::getMaxZoom(const class ClipView*)",1,0,5,0,0,0
"song.cpp",244,"ClipView::getTickSquare(const class ClipView*)",11,0,68,0,0,0
"ui.cpp",416,"ClipView::horizontalEncoderAction(const class ClipView*, long int)",36,0,199,0,0,0
"clip_view.cpp",82,"ClipView::lengthenClip(long int, const class ClipView*)",22,0,82,0,0,0
"clip_view.cpp",121,"ClipView::shortenClip(long int, const class ClipView*)",8,0,34,0,0,0
"ui.cpp",179,"closeUI(class UI*)",19,0,134,0,0,0
,0,"closeUSBHost() (always inlined)",0,0,0,0,0,0
,0,"clst2sect(struct FATFS*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"Cluster::Cluster(const class Cluster*) (always inlined)",0,0,0,0,0,0
"cluster.cpp",41,"Cluster::convertDataIfNecessary(const class Cluster*)",34,0,136,0,0,0
"cluster.cpp",153,"Cluster::getAppropriateQueue(const class Cluster*)",8,0,34,0,0,0
"cluster.cpp",217,"Cluster::mayBeStolen(const class Cluster*, void*)",5,0,23,0,0,0
,0,"Cluster::mayBeStolen(const class Cluster*, void*) (always inlined)",0,0,0,0,0,0
"cluster.cpp",180,"Cluster::steal(const class Cluster*, const char*)",75,0,435,0,0,0
"cluster.h",30,"Cluster::~Cluster(const class Cluster*)",2,0,8,0,0,0
"cluster.h",30,"Cluster::~Cluster(const class Cluster*)",2,0,5,0,0,0
,0,"Cluster::~Cluster(const class Cluster*) (always inlined)",0,0,0,0,0,0
"cluster_priority_queue.cpp",28,"ClusterPriorityQueue::add(const class ClusterPriorityQueue*, class Cluster*, long unsigned int)",10,0,21,0,0,0
,0,"ClusterPriorityQueue::grabHead(const class ClusterPriorityQueue*) (always inlined)",0,0,0,0,0,0
"cluster_priority_queue.cpp",51,"ClusterPriorityQueue::removeIfPresent(const class ClusterPriorityQueue*, class Cluster*)",5,0,31,0,0,0
,0,"clz(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"cmp_lfn(const short unsigned int*, unsigned char*) (always inlined)",0,0,0,0,0,0
"colour.h",45,"Colour::getOptions(const class Colour*)",4,0,61,0,0,0
"colour.cpp",31,"Colour::getRGB(const class Colour*)",12,0,71,0,0,0
"value.h",38,"Colour::readCurrentValue(const class Colour*)",1,0,3,0,0,0
"colour.h",41,"Colour::writeCurrentValue(const class Colour*)",3,0,6,0,0,0
"menu_item.h",54,"Colour::~Colour(const class Colour*)",1,0,1,0,0,0
"colour.h",24,"Colour::~Colour(const class Colour*)",2,0,6,0,0,0
"column_controls.cpp",145,"ColumnControlsKeyboard::checkNewInstrument(const class ColumnControlsKeyboard*, class Instrument*)",13,0,53,0,0,0
,0,"ColumnControlsKeyboard::checkNewInstrument(const class ColumnControlsKeyboard*, class Instrument*) (always inlined)",0,0,0,0,0,0
"column_controls.h",67,"ColumnControlsKeyboard::ColumnControlsKeyboard(const class ColumnControlsKeyboard*)",8,0,80,0,0,0
"column_controls.cpp",50,"ColumnControlsKeyboard::enableNote(const class ColumnControlsKeyboard*, unsigned char, unsigned char)",6,0,112,0,0,0
"column_controls.cpp",62,"ColumnControlsKeyboard::evaluatePads(const class ColumnControlsKeyboard*, struct PressedPad*)",22,0,95,0,0,0
"column_controls.cpp",177,"ColumnControlsKeyboard::getColumnForFunc(const class ColumnControlsKeyboard*, enum ColumnControlFunction)",7,0,17,0,0,0
,0,"ColumnControlsKeyboard::getColumnForFunc(const class ColumnControlsKeyboard*, enum ColumnControlFunction) (always inlined)",0,0,0,0,0,0
"column_controls.cpp",116,"ColumnControlsKeyboard::handleHorizontalEncoder(const class ColumnControlsKeyboard*, long int, bool)",1,0,1,0,0,0
"column_controls.cpp",102,"ColumnControlsKeyboard::handleVerticalEncoder(const class ColumnControlsKeyboard*, long int)",1,0,1,0,0,0
"column_controls.cpp",195,"ColumnControlsKeyboard::horizontalEncoderHandledByColumns(const class ColumnControlsKeyboard*, long int, bool)",18,0,132,0,0,0
"column_controls.cpp",222,"ColumnControlsKeyboard::renderSidebarPads(const class ColumnControlsKeyboard*, class RGB[18]*)",2,0,15,0,0,0
"column_controls.cpp",106,"ColumnControlsKeyboard::verticalEncoderHandledByColumns(const class ColumnControlsKeyboard*, long int)",3,0,17,0,0,0
,0,"ColumnControlsKeyboard::verticalEncoderHandledByColumns(const class ColumnControlsKeyboard*, long int) (always inlined)",0,0,0,0,0,0
,0,"Comb::Comb(const class Comb*) (always inlined)",0,0,0,0,0,0
,0,"Comb::setDamp(const class Comb*, float) (always inlined)",0,0,0,0,0,0
,0,"combineHitStrengths(long int, long int) (always inlined)",0,0,0,0,0,0
"display.h",93,"Command::beginSession(const class Command*, class MenuItem*)",2,0,8,0,0,0
,0,"Command::Command(const class Command*, enum String, enum GlobalMIDICommand) (always inlined)",0,0,0,0,0,0
"command.cpp",37,"Command::drawPixelsForOled(const class Command*)",18,0,185,0,0,0
"learned_midi.h",59,"Command::drawValue(const class Command*)",5,0,32,0,0,0
"command.cpp",166,"Command::learnCC(const class Command*, class MIDIDevice*, long int, long int, long int)",3,0,8,0,0,0
,0,"Command::learnCC(const class Command*, class MIDIDevice*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"command.cpp",149,"Command::learnNoteOn(const class Command*, class MIDIDevice*, long int, long int)",9,0,47,0,0,0
"command.cpp",139,"Command::learnProgramChange(const class Command*, class MIDIDevice*, long int, long int)",4,0,27,0,0,0
"command.cpp",115,"Command::selectEncoderAction(const class Command*, long int)",6,0,18,0,0,0
"command.cpp",125,"Command::unlearnAction(const class Command*)",8,0,43,0,0,0
"menu_item.h",54,"Command::~Command(const class Command*)",1,0,1,0,0,0
"command.h",27,"Command::~Command(const class Command*)",2,0,6,0,0,0
,0,"Common<__vector(2) float>::Common(const class Common<__vector(2) float>*, class initializer_list<float>) (always inlined)",0,0,0,0,0,0
,0,"Common<__vector(2) float>::each_lane<DualCosineOscillator::InitApproximate()::<lambda(float&, int)> >(const class Common<__vector(2) float>*, struct) (always inlined)",0,0,0,0,0,0
,0,"Common<__vector(2) float>::Load(const float*) (always inlined)",0,0,0,0,0,0
,0,"Common<__vector(2) float>::operator*(const class Common<__vector(2) float>*, class Common<__vector(2) float>) (always inlined)",0,0,0,0,0,0
,0,"Common<__vector(2) float>::operator-(const class Common<__vector(2) float>*, class Common<__vector(2) float>) (always inlined)",0,0,0,0,0,0
,0,"Common<__vector(2) float>::Subtract(const class Common<__vector(2) float>*, class Common<__vector(2) float>) (always inlined)",0,0,0,0,0,0
,0,"CompParam::CompParam(const class CompParam*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"value.h",42,"CompParam::getFinalValue(const class CompParam*)",3,0,12,0,0,0
"compressor_params.h",29,"CompParam::readCurrentValue(const class CompParam*)",4,0,27,0,0,0
"menu_item.h",54,"CompParam::~CompParam(const class CompParam*)",1,0,1,0,0,0
"compressor_params.h",25,"CompParam::~CompParam(const class CompParam*)",2,0,6,0,0,0
,0,"configuredAsPeripheral(long int) (always inlined)",0,0,0,0,0,0
"midi_device_manager.cpp",643,"ConnectedUSBMIDIDevice::bufferMessage(const class ConnectedUSBMIDIDevice*, long unsigned int)",8,0,35,0,0,0
"midi_device_manager.cpp",678,"ConnectedUSBMIDIDevice::consumeSendData(const class ConnectedUSBMIDIDevice*)",9,0,34,0,0,0
,0,"ConnectedUSBMIDIDevice::sendBufferSpace(const class ConnectedUSBMIDIDevice*) (always inlined)",0,0,0,0,0,0
,0,"Consequence::Consequence(const class Consequence*) (always inlined)",0,0,0,0,0,0
,0,"ConsequenceArrangerParamsTimeInserted::ConsequenceArrangerParamsTimeInserted(const class ConsequenceArrangerParamsTimeInserted*, long int, long int) (always inlined)",0,0,0,0,0,0
"consequence_arranger_params_time_inserted.cpp",33,"ConsequenceArrangerParamsTimeInserted::revert(const class ConsequenceArrangerParamsTimeInserted*, enum TimeType, class ModelStack*)",11,0,37,0,0,0
"consequence_arranger_params_time_inserted.h",23,"ConsequenceArrangerParamsTimeInserted::~ConsequenceArrangerParamsTimeInserted(const class ConsequenceArrangerParamsTimeInserted*)",1,0,1,0,0,0
"consequence_arranger_params_time_inserted.h",23,"ConsequenceArrangerParamsTimeInserted::~ConsequenceArrangerParamsTimeInserted(const class ConsequenceArrangerParamsTimeInserted*)",2,0,6,0,0,0
,0,"ConsequenceAudioClipSetSample::ConsequenceAudioClipSetSample(const class ConsequenceAudioClipSetSample*, class AudioClip*) (always inlined)",0,0,0,0,0,0
"consequence_audio_clip_set_sample.cpp",35,"ConsequenceAudioClipSetSample::revert(const class ConsequenceAudioClipSetSample*, enum TimeType, class ModelStack*)",19,0,85,0,0,0
"consequence_audio_clip_set_sample.h",25,"ConsequenceAudioClipSetSample::~ConsequenceAudioClipSetSample(const class ConsequenceAudioClipSetSample*)",1,0,11,0,0,0
"consequence_audio_clip_set_sample.h",25,"ConsequenceAudioClipSetSample::~ConsequenceAudioClipSetSample(const class ConsequenceAudioClipSetSample*)",1,0,8,0,0,0
,0,"ConsequenceAudioClipSetSample::~ConsequenceAudioClipSetSample(const class ConsequenceAudioClipSetSample*) (always inlined)",0,0,0,0,0,0
,0,"ConsequenceBeginPlayback::ConsequenceBeginPlayback(const class ConsequenceBeginPlayback*) (always inlined)",0,0,0,0,0,0
"consequence_begin_playback.cpp",26,"ConsequenceBeginPlayback::revert(const class ConsequenceBeginPlayback*, enum TimeType, class ModelStack*)",6,0,17,0,0,0
"consequence_begin_playback.h",22,"ConsequenceBeginPlayback::~ConsequenceBeginPlayback(const class ConsequenceBeginPlayback*)",2,0,6,0,0,0
"consequence_begin_playback.h",22,"ConsequenceBeginPlayback::~ConsequenceBeginPlayback(const class ConsequenceBeginPlayback*)",1,0,1,0,0,0
,0,"ConsequenceClipBeginLinearRecord::ConsequenceClipBeginLinearRecord(const class ConsequenceClipBeginLinearRecord*, class Clip*) (always inlined)",0,0,0,0,0,0
"consequence_clip_begin_linear_record.cpp",35,"ConsequenceClipBeginLinearRecord::revert(const class ConsequenceClipBeginLinearRecord*, enum TimeType, class ModelStack*)",10,0,69,0,0,0
"consequence_clip_begin_linear_record.h",24,"ConsequenceClipBeginLinearRecord::~ConsequenceClipBeginLinearRecord(const class ConsequenceClipBeginLinearRecord*)",2,0,6,0,0,0
"consequence_clip_begin_linear_record.h",24,"ConsequenceClipBeginLinearRecord::~ConsequenceClipBeginLinearRecord(const class ConsequenceClipBeginLinearRecord*)",1,0,1,0,0,0
,0,"ConsequenceClipExistence::ConsequenceClipExistence(const class ConsequenceClipExistence*, class Clip*, class ClipArray*, enum ExistenceChangeType) (always inlined)",0,0,0,0,0,0
"consequence_clip_existence.cpp",43,"ConsequenceClipExistence::prepareForDestruction(const class ConsequenceClipExistence*, long int, class Song*)",6,0,32,0,0,0
,0,"ConsequenceClipExistence::prepareForDestruction(const class ConsequenceClipExistence*, long int, class Song*) (always inlined)",0,0,0,0,0,0
"consequence_clip_existence.cpp",60,"ConsequenceClipExistence::revert(const class ConsequenceClipExistence*, enum TimeType, class ModelStack*)",47,0,261,0,0,0
"consequence_clip_existence.h",27,"ConsequenceClipExistence::~ConsequenceClipExistence(const class ConsequenceClipExistence*)",1,0,1,0,0,0
"consequence_clip_existence.h",27,"ConsequenceClipExistence::~ConsequenceClipExistence(const class ConsequenceClipExistence*)",2,0,6,0,0,0
,0,"ConsequenceClipHorizontalShift::ConsequenceClipHorizontalShift(const class ConsequenceClipHorizontalShift*, long int) (always inlined)",0,0,0,0,0,0
"consequence_clip_horizontal_shift.cpp",29,"ConsequenceClipHorizontalShift::revert(const class ConsequenceClipHorizontalShift*, enum TimeType, class ModelStack*)",9,0,25,0,0,0
"consequence_clip_horizontal_shift.h",23,"ConsequenceClipHorizontalShift::~ConsequenceClipHorizontalShift(const class ConsequenceClipHorizontalShift*)",1,0,1,0,0,0
"consequence_clip_horizontal_shift.h",23,"ConsequenceClipHorizontalShift::~ConsequenceClipHorizontalShift(const class ConsequenceClipHorizontalShift*)",2,0,6,0,0,0
,0,"ConsequenceClipInstanceChange::ConsequenceClipInstanceChange(const class ConsequenceClipInstanceChange*, class Output*, class ClipInstance*, long int, long int, class Clip*) (always inlined)",0,0,0,0,0,0
"consequence_clip_instance_change.cpp",35,"ConsequenceClipInstanceChange::revert(const class ConsequenceClipInstanceChange*, enum TimeType, class ModelStack*)",7,0,31,0,0,0
"consequence_clip_instance_change.h",26,"ConsequenceClipInstanceChange::~ConsequenceClipInstanceChange(const class ConsequenceClipInstanceChange*)",1,0,1,0,0,0
"consequence_clip_instance_change.h",26,"ConsequenceClipInstanceChange::~ConsequenceClipInstanceChange(const class ConsequenceClipInstanceChange*)",2,0,6,0,0,0
,0,"ConsequenceClipInstanceExistence::ConsequenceClipInstanceExistence(const class ConsequenceClipInstanceExistence*, class Output*, class ClipInstance*, enum ExistenceChangeType) (always inlined)",0,0,0,0,0,0
"consequence_clip_instance_existence.cpp",36,"ConsequenceClipInstanceExistence::revert(const class ConsequenceClipInstanceExistence*, enum TimeType, class ModelStack*)",9,0,47,0,0,0
"consequence_clip_instance_existence.h",27,"ConsequenceClipInstanceExistence::~ConsequenceClipInstanceExistence(const class ConsequenceClipInstanceExistence*)",1,0,1,0,0,0
"consequence_clip_instance_existence.h",27,"ConsequenceClipInstanceExistence::~ConsequenceClipInstanceExistence(const class ConsequenceClipInstanceExistence*)",2,0,6,0,0,0
,0,"ConsequenceClipLength::ConsequenceClipLength(const class ConsequenceClipLength*, class Clip*, long int) (always inlined)",0,0,0,0,0,0
"consequence_clip_length.cpp",34,"ConsequenceClipLength::revert(const class ConsequenceClipLength*, enum TimeType, class ModelStack*)",8,0,22,0,0,0
"consequence_clip_length.h",25,"ConsequenceClipLength::~ConsequenceClipLength(const class ConsequenceClipLength*)",1,0,1,0,0,0
"consequence_clip_length.h",25,"ConsequenceClipLength::~ConsequenceClipLength(const class ConsequenceClipLength*)",2,0,6,0,0,0
,0,"ConsequenceInstrumentClipMultiply::ConsequenceInstrumentClipMultiply(const class ConsequenceInstrumentClipMultiply*) (always inlined)",0,0,0,0,0,0
"consequence_instrument_clip_multiply.cpp",28,"ConsequenceInstrumentClipMultiply::revert(const class ConsequenceInstrumentClipMultiply*, enum TimeType, class ModelStack*)",14,0,59,0,0,0
"consequence_instrument_clip_multiply.h",23,"ConsequenceInstrumentClipMultiply::~ConsequenceInstrumentClipMultiply(const class ConsequenceInstrumentClipMultiply*)",1,0,1,0,0,0
"consequence_instrument_clip_multiply.h",23,"ConsequenceInstrumentClipMultiply::~ConsequenceInstrumentClipMultiply(const class ConsequenceInstrumentClipMultiply*)",2,0,6,0,0,0
,0,"ConsequenceNoteArrayChange::ConsequenceNoteArrayChange(const class ConsequenceNoteArrayChange*, class InstrumentClip*, long int, class NoteVector*, bool) (always inlined)",0,0,0,0,0,0
"consequence_note_array_change.cpp",42,"ConsequenceNoteArrayChange::revert(const class ConsequenceNoteArrayChange*, enum TimeType, class ModelStack*)",4,0,12,0,0,0
"consequence_note_array_change.h",26,"ConsequenceNoteArrayChange::~ConsequenceNoteArrayChange(const class ConsequenceNoteArrayChange*)",2,0,11,0,0,0
"consequence_note_array_change.h",26,"ConsequenceNoteArrayChange::~ConsequenceNoteArrayChange(const class ConsequenceNoteArrayChange*)",3,0,8,0,0,0
,0,"ConsequenceNoteArrayChange::~ConsequenceNoteArrayChange(const class ConsequenceNoteArrayChange*) (always inlined)",0,0,0,0,0,0
,0,"ConsequenceNoteExistence::ConsequenceNoteExistence(const class ConsequenceNoteExistence*, class InstrumentClip*, long int, class Note*, enum ExistenceChangeType) (always inlined)",0,0,0,0,0,0
"consequence_note_existence.cpp",40,"ConsequenceNoteExistence::revert(const class ConsequenceNoteExistence*, enum TimeType, class ModelStack*)",13,0,63,0,0,0
"consequence_note_existence.h",26,"ConsequenceNoteExistence::~ConsequenceNoteExistence(const class ConsequenceNoteExistence*)",1,0,1,0,0,0
"consequence_note_existence.h",26,"ConsequenceNoteExistence::~ConsequenceNoteExistence(const class ConsequenceNoteExistence*)",2,0,6,0,0,0
,0,"ConsequenceNoteRowHorizontalShift::ConsequenceNoteRowHorizontalShift(const class ConsequenceNoteRowHorizontalShift*, long int, long int) (always inlined)",0,0,0,0,0,0
"consequence_note_row_horizontal_shift.cpp",33,"ConsequenceNoteRowHorizontalShift::revert(const class ConsequenceNoteRowHorizontalShift*, enum TimeType, class ModelStack*)",12,0,39,0,0,0
"consequence_note_row_horizontal_shift.h",23,"ConsequenceNoteRowHorizontalShift::~ConsequenceNoteRowHorizontalShift(const class ConsequenceNoteRowHorizontalShift*)",1,0,1,0,0,0
"consequence_note_row_horizontal_shift.h",23,"ConsequenceNoteRowHorizontalShift::~ConsequenceNoteRowHorizontalShift(const class ConsequenceNoteRowHorizontalShift*)",2,0,6,0,0,0
,0,"ConsequenceNoteRowLength::ConsequenceNoteRowLength(const class ConsequenceNoteRowLength*, long int, long int) (always inlined)",0,0,0,0,0,0
"consequence_note_row_length.cpp",41,"ConsequenceNoteRowLength::performChange(const class ConsequenceNoteRowLength*, class ModelStackWithNoteRow*, class Action*, long int, bool)",5,0,29,0,0,0
"model_stack.h",159,"ConsequenceNoteRowLength::revert(const class ConsequenceNoteRowLength*, enum TimeType, class ModelStack*)",7,0,34,0,0,0
"consequence_note_row_length.h",25,"ConsequenceNoteRowLength::~ConsequenceNoteRowLength(const class ConsequenceNoteRowLength*)",1,0,1,0,0,0
"consequence_note_row_length.h",25,"ConsequenceNoteRowLength::~ConsequenceNoteRowLength(const class ConsequenceNoteRowLength*)",2,0,6,0,0,0
,0,"ConsequenceNoteRowMute::ConsequenceNoteRowMute(const class ConsequenceNoteRowMute*, class InstrumentClip*, long int) (always inlined)",0,0,0,0,0,0
"consequence_note_row_mute.cpp",31,"ConsequenceNoteRowMute::revert(const class ConsequenceNoteRowMute*, enum TimeType, class ModelStack*)",5,0,26,0,0,0
"consequence_note_row_mute.h",22,"ConsequenceNoteRowMute::~ConsequenceNoteRowMute(const class ConsequenceNoteRowMute*)",1,0,1,0,0,0
"consequence_note_row_mute.h",22,"ConsequenceNoteRowMute::~ConsequenceNoteRowMute(const class ConsequenceNoteRowMute*)",2,0,6,0,0,0
,0,"ConsequenceOutputExistence::ConsequenceOutputExistence(const class ConsequenceOutputExistence*, class Output*, enum ExistenceChangeType) (always inlined)",0,0,0,0,0,0
"consequence_output_existence.cpp",33,"ConsequenceOutputExistence::revert(const class ConsequenceOutputExistence*, enum TimeType, class ModelStack*)",8,0,31,0,0,0
"consequence_output_existence.h",25,"ConsequenceOutputExistence::~ConsequenceOutputExistence(const class ConsequenceOutputExistence*)",2,0,6,0,0,0
"consequence_output_existence.h",25,"ConsequenceOutputExistence::~ConsequenceOutputExistence(const class ConsequenceOutputExistence*)",1,0,1,0,0,0
,0,"ConsequenceParamChange::ConsequenceParamChange(const class ConsequenceParamChange*, const class ModelStackWithAutoParam*, bool) (always inlined)",0,0,0,0,0,0
"consequence_param_change.cpp",49,"ConsequenceParamChange::revert(const class ConsequenceParamChange*, enum TimeType, class ModelStack*)",2,0,10,0,0,0
"consequence_param_change.h",25,"ConsequenceParamChange::~ConsequenceParamChange(const class ConsequenceParamChange*)",2,0,11,0,0,0
"consequence_param_change.h",25,"ConsequenceParamChange::~ConsequenceParamChange(const class ConsequenceParamChange*)",3,0,8,0,0,0
,0,"ConsequenceParamChange::~ConsequenceParamChange(const class ConsequenceParamChange*) (always inlined)",0,0,0,0,0,0
,0,"ConsequencePerformanceViewPress::ConsequencePerformanceViewPress(const class ConsequencePerformanceViewPress*, struct FXColumnPress*, struct FXColumnPress*, long int) (always inlined)",0,0,0,0,0,0
"consequence_performance_view_press.cpp",33,"ConsequencePerformanceViewPress::revert(const class ConsequencePerformanceViewPress*, enum TimeType, class ModelStack*)",2,0,19,0,0,0
"consequence_performance_view_press.h",23,"ConsequencePerformanceViewPress::~ConsequencePerformanceViewPress(const class ConsequencePerformanceViewPress*)",1,0,1,0,0,0
"consequence_performance_view_press.h",23,"ConsequencePerformanceViewPress::~ConsequencePerformanceViewPress(const class ConsequencePerformanceViewPress*)",2,0,6,0,0,0
,0,"ConsequenceScaleAddNote::ConsequenceScaleAddNote(const class ConsequenceScaleAddNote*, long int) (always inlined)",0,0,0,0,0,0
"consequence_scale_add_note.cpp",31,"ConsequenceScaleAddNote::revert(const class ConsequenceScaleAddNote*, enum TimeType, class ModelStack*)",13,0,69,0,0,0
,0,"ConsequenceScaleAddNote::revert(const class ConsequenceScaleAddNote*, enum TimeType, class ModelStack*) (always inlined)",0,0,0,0,0,0
"consequence_scale_add_note.h",23,"ConsequenceScaleAddNote::~ConsequenceScaleAddNote(const class ConsequenceScaleAddNote*)",1,0,1,0,0,0
"consequence_scale_add_note.h",23,"ConsequenceScaleAddNote::~ConsequenceScaleAddNote(const class ConsequenceScaleAddNote*)",2,0,6,0,0,0
,0,"ConsequenceSwingChange::ConsequenceSwingChange(const class ConsequenceSwingChange*, signed char, signed char) (always inlined)",0,0,0,0,0,0
"consequence_swing_change.cpp",28,"ConsequenceSwingChange::revert(const class ConsequenceSwingChange*, enum TimeType, class ModelStack*)",2,0,6,0,0,0
"consequence_swing_change.h",23,"ConsequenceSwingChange::~ConsequenceSwingChange(const class ConsequenceSwingChange*)",2,0,6,0,0,0
"consequence_swing_change.h",23,"ConsequenceSwingChange::~ConsequenceSwingChange(const class ConsequenceSwingChange*)",1,0,1,0,0,0
,0,"ConsequenceTempoChange::ConsequenceTempoChange(const class ConsequenceTempoChange*, long long unsigned int, long long unsigned int) (always inlined)",0,0,0,0,0,0
"consequence_tempo_change.cpp",30,"ConsequenceTempoChange::revert(const class ConsequenceTempoChange*, enum TimeType, class ModelStack*)",6,0,50,0,0,0
"consequence_tempo_change.h",23,"ConsequenceTempoChange::~ConsequenceTempoChange(const class ConsequenceTempoChange*)",2,0,6,0,0,0
"consequence_tempo_change.h",23,"ConsequenceTempoChange::~ConsequenceTempoChange(const class ConsequenceTempoChange*)",1,0,1,0,0,0
"display.cpp",114,"consoleTextIfAllBootedUp(const char*)",2,0,12,0,0,0
,0,"consoleTextIfAllBootedUp(const char*) (always inlined)",0,0,0,0,0,0
,0,"construct_at<deluge::l10n::String, const deluge::l10n::String&>(enum String*, const enum String&) (always inlined)",0,0,0,0,0,0
,0,"construct_at<deluge::l10n::String, deluge::l10n::String>(enum String*, enum String) (always inlined)",0,0,0,0,0,0
,0,"construct_at<MenuItem*, MenuItem* const&>(class MenuItem**, const class MenuItem*&) (always inlined)",0,0,0,0,0,0
,0,"construct_at<MenuItem*, MenuItem*&>(class MenuItem**, class MenuItem*&) (always inlined)",0,0,0,0,0,0
,0,"construct_at<RuntimeFeatureSettingOption, const RuntimeFeatureSettingOption&>(struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption&) (always inlined)",0,0,0,0,0,0
,0,"construct_at<std::basic_string_view<char>, char const*&>(class basic_string_view<char, std::char_traits<char> >*, const char*&) (always inlined)",0,0,0,0,0,0
,0,"construct_at<std::basic_string_view<char>, const std::basic_string_view<char, std::char_traits<char> >&>(class basic_string_view<char, std::char_traits<char> >*, const class basic_string_view<char, std::char_traits<char> >&) (always inlined)",0,0,0,0,0,0
,0,"construct_at<std::basic_string_view<char>, std::basic_string_view<char, std::char_traits<char> > >(class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
,0,"Context::Add(const class Context*, float) (always inlined)",0,0,0,0,0,0
,0,"Context::Lp(const class Context*, float&, float) (always inlined)",0,0,0,0,0,0
,0,"Context::Multiply(const class Context*, float) (always inlined)",0,0,0,0,0,0
"context_menu.h",38,"ContextMenu::acceptCurrentOption(const class ContextMenu*)",1,0,2,0,0,0
"context_menu.cpp",156,"ContextMenu::buttonAction(const class ContextMenu*, unsigned char, bool, bool)",11,0,47,0,0,0
"context_menu.cpp",192,"ContextMenu::drawCurrentOption(const class ContextMenu*)",6,0,42,0,0,0
"display.h",93,"ContextMenu::focusRegained(const class ContextMenu*)",2,0,8,0,0,0
"context_menu.h",46,"ContextMenu::getAcceptButton(const class ContextMenu*)",1,0,2,0,0,0
"context_menu.cpp",29,"ContextMenu::getGreyoutColsAndRows(const class ContextMenu*, long unsigned int*, long unsigned int*)",2,0,4,0,0,0
"context_menu.h",55,"ContextMenu::getUIType(const class ContextMenu*)",1,0,2,0,0,0
"context_menu.h",37,"ContextMenu::isCurrentOptionAvailable(const class ContextMenu*)",1,0,2,0,0,0
"context_menu.cpp",200,"ContextMenu::padAction(const class ContextMenu*, long int, long int, long int)",4,0,25,0,0,0
"context_menu.cpp",59,"ContextMenu::renderOLED(const class ContextMenu*, unsigned char[128]*)",18,0,127,0,0,0
"context_menu.cpp",112,"ContextMenu::selectEncoderAction(const class ContextMenu*, signed char)",18,0,84,0,0,0
"context_menu.cpp",34,"ContextMenu::setupAndCheckAvailability(const class ContextMenu*)",5,0,30,0,0,0
"context_menu.cpp",218,"ContextMenuForLoading::focusRegained(const class ContextMenuForLoading*)",3,0,14,0,0,0
"context_menu.h",73,"ContextMenuForLoading::getAcceptButton(const class ContextMenuForLoading*)",1,0,2,0,0,0
"context_menu.cpp",212,"ContextMenuForSaving::focusRegained(const class ContextMenuForSaving*)",3,0,14,0,0,0
"context_menu.h",64,"ContextMenuForSaving::getAcceptButton(const class ContextMenuForSaving*)",1,0,2,0,0,0
,0,"convertFloatToIntAtMemoryLocation(long unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"ConvertFromIeeeExtended(unsigned char*) (always inlined)",0,0,0,0,0,0
,0,"CopiedNoteRow::CopiedNoteRow(const class CopiedNoteRow*) (always inlined)",0,0,0,0,0,0
"copied_note_row.cpp",26,"CopiedNoteRow::~CopiedNoteRow(const class CopiedNoteRow*)",3,0,12,0,0,0
"copied_note_row.cpp",26,"CopiedNoteRow::~CopiedNoteRow(const class CopiedNoteRow*)",3,0,9,0,0,0
,0,"CopiedNoteRow::~CopiedNoteRow(const class CopiedNoteRow*) (always inlined)",0,0,0,0,0,0
,0,"copy<char const* const*, std::basic_string_view<char>*>(const char**, const char**, class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"copy<const RuntimeFeatureSettingOption*, RuntimeFeatureSettingOption*>(const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*, struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
"oled.cpp",681,"copyBackgroundAroundForeground(unsigned char[128]*, unsigned char[128]*, long int, long int, long int, long int)",19,0,98,0,0,0
,0,"copyModelStack(void*, const void*, long int) (always inlined)",0,0,0,0,0,0
,0,"copyRowWithMask(unsigned char, unsigned char*, unsigned char*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"cos",0,0,45,0,0,0
,0,"Count::Count(const class Count*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"count.h",29,"Count::readCurrentValue(const class Count*)",2,0,6,0,0,0
"count.h",32,"Count::writeCurrentValue(const class Count*)",34,0,172,0,0,0
"menu_item.h",54,"Count::~Count(const class Count*)",1,0,1,0,0,0
"count.h",26,"Count::~Count(const class Count*)",2,0,6,0,0,0
,0,"CountIn::CountIn(const class CountIn*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"countin.h",25,"CountIn::readCurrentValue(const class CountIn*)",2,0,5,0,0,0
"value.h",42,"CountIn::writeCurrentValue(const class CountIn*)",1,0,5,0,0,0
"menu_item.h",54,"CountIn::~CountIn(const class CountIn*)",1,0,1,0,0,0
"countin.h",22,"CountIn::~CountIn(const class CountIn*)",2,0,6,0,0,0
,0,"CountToStereoSpread::CountToStereoSpread(const class CountToStereoSpread*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"count.h",42,"CountToStereoSpread::selectButtonPress(const class CountToStereoSpread*)",1,0,2,0,0,0
"menu_item.h",54,"CountToStereoSpread::~CountToStereoSpread(const class CountToStereoSpread*)",1,0,1,0,0,0
"count.h",39,"CountToStereoSpread::~CountToStereoSpread(const class CountToStereoSpread*)",2,0,6,0,0,0
,0,"CPG_Init() (always inlined)",0,0,0,0,0,0
"ff.c",1520,"create_chain(struct FFOBJID*, long unsigned int)",32,0,146,0,0,0
"ff.c",2859,"create_name(struct DIR*, const char**)",49,0,261,0,0,0
,0,"CStringArray::partitionForStrings(const class CStringArray*, long int, long int) (always inlined)",0,0,0,0,0,0
"c_string_array.cpp",56,"CStringArray::quickSortForStrings(long int, long int, const class CStringArray*)",22,0,97,0,0,0
"c_string_array.cpp",95,"CStringArray::search(const char*, bool*, const class CStringArray*)",20,0,45,0,0,0
,0,"CStringArray::sortForStrings(const class CStringArray*) (always inlined)",0,0,0,0,0,0
"audio_engine.cpp",286,"cullVoice(bool, enum CullType, unsigned int, class Sound*)",30,0,222,0,0,0
,0,"cullVoices(unsigned int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::analogOutTick(const class CVEngine*) (always inlined)",0,0,0,0,0,0
"cv_engine.cpp",232,"CVEngine::calculateVoltage(long int, unsigned char, const class CVEngine*)",10,0,43,0,0,0
,0,"CVEngine::isNoteOn(const class CVEngine*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::isTriggerClockOutputEnabled(const class CVEngine*) (always inlined)",0,0,0,0,0,0
"cv_engine.cpp",198,"CVEngine::physicallySwitchGate(long int, const class CVEngine*)",4,0,20,0,0,0
,0,"CVEngine::playbackBegun(const class CVEngine*) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::playbackEnded(const class CVEngine*) (always inlined)",0,0,0,0,0,0
"cv_engine.cpp",223,"CVEngine::recalculateCVChannelVoltage(unsigned char, const class CVEngine*)",4,0,14,0,0,0
"cv_engine.cpp",141,"CVEngine::sendNote(bool, unsigned char, short int, const class CVEngine*)",19,0,61,0,0,0
"display.h",92,"CVEngine::sendVoltageOut(unsigned char, short unsigned int, const class CVEngine*)",8,0,17,0,0,0
,0,"CVEngine::setCVPitchBend(const class CVEngine*, unsigned char, long int, bool) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::setCVTranspose(const class CVEngine*, unsigned char, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::setCVVoltsPerOctave(const class CVEngine*, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::setGateType(const class CVEngine*, unsigned char, enum GateType) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::switchGateOff(const class CVEngine*, long int) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::switchGateOn(const class CVEngine*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"CVEngine::updateClockOutput(const class CVEngine*) (always inlined)",0,0,0,0,0,0
"cv_engine.cpp",94,"CVEngine::updateGateOutputs(const class CVEngine*)",6,0,23,0,0,0
"cv_engine.cpp",314,"CVEngine::updateRunOutput(const class CVEngine*)",15,0,40,0,0,0
,0,"CVEngine::updateRunOutput(const class CVEngine*) (always inlined)",0,0,0,0,0,0
"melodic_instrument.h",33,"CVInstrument::CVInstrument(const class CVInstrument*)",6,0,29,0,0,0
"cv_instrument.h",44,"CVInstrument::getXMLTag(const class CVInstrument*)",1,0,3,0,0,0
"cv_instrument.cpp",54,"CVInstrument::monophonicExpressionEvent(const class CVInstrument*, long int, long int)",3,0,8,0,0,0
,0,"CVInstrument::monophonicExpressionEvent(const class CVInstrument*, long int, long int) (always inlined)",0,0,0,0,0,0
"cv_instrument.cpp",40,"CVInstrument::noteOffPostArp(const class CVInstrument*, long int, long int, long int)",1,0,4,0,0,0
"cv_instrument.cpp",33,"CVInstrument::noteOnPostArp(const class CVInstrument*, long int, struct ArpNote*)",3,0,13,0,0,0
"cv_instrument.cpp",45,"CVInstrument::polyphonicExpressionEventPostArpeggiator(const class CVInstrument*, long int, long int, long int, struct ArpNote*)",5,0,20,0,0,0
,0,"CVInstrument::polyphonicExpressionEventPostArpeggiator(const class CVInstrument*, long int, long int, long int, struct ArpNote*) (always inlined)",0,0,0,0,0,0
"cv_instrument.cpp",97,"CVInstrument::setActiveClip(const class CVInstrument*, class ModelStackWithTimelineCounter*, enum PgmChangeSend)",13,0,38,0,0,0
"cv_instrument.cpp",124,"CVInstrument::setupWithoutActiveClip(const class CVInstrument*, class ModelStack*)",3,0,5,0,0,0
"non_audio_instrument.cpp",225,"CVInstrument::updatePitchBendOutput(const class CVInstrument*, bool)",6,0,31,0,0,0
"cv_instrument.cpp",86,"CVInstrument::writeDataToFile(const class CVInstrument*, class Serializer&, class Clip*, class Song*)",7,0,33,0,0,0
"cv_instrument.h",27,"CVInstrument::~CVInstrument(const class CVInstrument*)",6,0,29,0,0,0
"cv_instrument.h",27,"CVInstrument::~CVInstrument(const class CVInstrument*)",6,0,26,0,0,0
,0,"CVInstrument::~CVInstrument(const class CVInstrument*) (always inlined)",0,0,0,0,0,0
"oled_low_level.c",160,"cvSPITransferComplete(long unsigned int)",8,0,42,0,0,0
,0,"Damping::Damping(const class Damping*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"damping.h",27,"Damping::readCurrentValue(const class Damping*)",4,0,14,0,0,0
"value.h",42,"Damping::writeCurrentValue(const class Damping*)",3,0,10,0,0,0
"menu_item.h",54,"Damping::~Damping(const class Damping*)",1,0,1,0,0,0
"damping.h",24,"Damping::~Damping(const class Damping*)",2,0,6,0,0,0
"decimal.cpp",33,"Decimal::beginSession(const class Decimal*, class MenuItem*)",7,0,33,0,0,0
,0,"Decimal::Decimal(const class Decimal*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"decimal.cpp",164,"Decimal::drawActualValue(const class Decimal*, bool)",13,0,83,0,0,0
"decimal.cpp",134,"Decimal::drawPixelsForOled(const class Decimal*)",14,0,68,0,0,0
"display.h",92,"Decimal::drawValue(const class Decimal*)",3,0,10,0,0,0
"decimal.h",34,"Decimal::getDefaultEditPos(const class Decimal*)",1,0,2,0,0,0
"decimal.cpp",83,"Decimal::horizontalEncoderAction(const class Decimal*, long int)",13,0,51,0,0,0
"value.h",42,"Decimal::scrollToGoodPos(const class Decimal*)",11,0,48,0,0,0
"decimal.cpp",57,"Decimal::selectEncoderAction(const class Decimal*, long int)",8,0,31,0,0,0
,0,"DefaultGridDefaultActiveMode::DefaultGridDefaultActiveMode(const class DefaultGridDefaultActiveMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"grid_default_active_mode.h",31,"DefaultGridDefaultActiveMode::getOptions(const class DefaultGridDefaultActiveMode*)",4,0,51,0,0,0
"grid_default_active_mode.h",28,"DefaultGridDefaultActiveMode::readCurrentValue(const class DefaultGridDefaultActiveMode*)",2,0,5,0,0,0
"value.h",45,"DefaultGridDefaultActiveMode::writeCurrentValue(const class DefaultGridDefaultActiveMode*)",1,0,5,0,0,0
"menu_item.h",54,"DefaultGridDefaultActiveMode::~DefaultGridDefaultActiveMode(const class DefaultGridDefaultActiveMode*)",1,0,1,0,0,0
"grid_default_active_mode.h",25,"DefaultGridDefaultActiveMode::~DefaultGridDefaultActiveMode(const class DefaultGridDefaultActiveMode*)",2,0,6,0,0,0
,0,"DefaultVelocityToLevel::DefaultVelocityToLevel(const class DefaultVelocityToLevel*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"default_velocity_to_level.h",29,"DefaultVelocityToLevel::readCurrentValue(const class DefaultVelocityToLevel*)",2,0,14,0,0,0
"value.h",42,"DefaultVelocityToLevel::writeCurrentValue(const class DefaultVelocityToLevel*)",22,0,110,0,0,0
"menu_item.h",54,"DefaultVelocityToLevel::~DefaultVelocityToLevel(const class DefaultVelocityToLevel*)",1,0,1,0,0,0
"default_velocity_to_level.h",24,"DefaultVelocityToLevel::~DefaultVelocityToLevel(const class DefaultVelocityToLevel*)",2,0,6,0,0,0
,0,"Delay::copySecondaryToPrimary(const class Delay*) (always inlined)",0,0,0,0,0,0
,0,"Delay::Delay(const class Delay*) (always inlined)",0,0,0,0,0,0
"delay.cpp",197,"Delay::discardBuffers(const class Delay*)",6,0,18,0,0,0
,0,"Delay::discardBuffers(const class Delay*) (always inlined)",0,0,0,0,0,0
,0,"Delay::getAmountToWriteBeforeReadingBegins(const class Delay*) (always inlined)",0,0,0,0,0,0
"delay.cpp",185,"Delay::hasWrapped(const class Delay*)",8,0,25,0,0,0
"delay.cpp",30,"Delay::informWhetherActive(const class Delay*, bool, long int)",18,2,69,11,4,54
"delay.cpp",203,"Delay::initializeSecondaryBuffer(const class Delay*, long int, bool)",7,0,42,0,0,0
,0,"Delay::initializeSecondaryBuffer(const class Delay*, long int, bool) (always inlined)",0,0,0,0,0,0
,0,"Delay::prepareToBeginWriting(const class Delay*) (always inlined)",0,0,0,0,0,0
"delay.cpp",223,"Delay::process(const class Delay*, class span<StereoSample, 4294967295>, const struct State&)",110,1,1044,12,3,37
"delay.cpp",138,"Delay::setTimeToAbandon(const class Delay*, const struct State&)",13,0,42,0,0,0
,0,"Delay::setTimeToAbandon(const class Delay*, const struct State&) (always inlined)",0,0,0,0,0,0
"delay.cpp",92,"Delay::setupWorkingState(const class Delay*, struct State&, long unsigned int, bool)",16,2,79,18,5,87
,0,"Delay::~Delay(const class Delay*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::advance<Delay::process(std::span<StereoSample>, const State&)::<lambda()> >(const class DelayBuffer*, struct) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::advance<ModControllableAudio::processStutter(StereoSample*, int32_t, ParamManager*)::<lambda()> >(const class DelayBuffer*, struct) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::clear(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::clearAndMoveOn(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::current(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::DelayBuffer(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
"delay_buffer.cpp",93,"DelayBuffer::discard(const class DelayBuffer*)",3,0,9,0,0,0
,0,"DelayBuffer::discard(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::end(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::getIdealBufferSizeFromRate(long unsigned int) (always inlined)",0,0,0,0,0,0
"delay_buffer.cpp",29,"DelayBuffer::init(const class DelayBuffer*, long unsigned int, long unsigned int, bool)",15,0,64,0,0,0
,0,"DelayBuffer::invalidate(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::isActive(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::isNative(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::makeNativeRatePrecise(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::makeNativeRatePreciseRelativeToOtherBuffer(const class DelayBuffer*, const class DelayBuffer&) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::moveOn(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::resampling(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::setCurrent(const class DelayBuffer*, struct StereoSample*) (always inlined)",0,0,0,0,0,0
"delay_buffer.cpp",127,"DelayBuffer::setupForRender(const class DelayBuffer*, long int)",13,0,68,0,0,0
"delay_buffer.cpp",101,"DelayBuffer::setupResample(const class DelayBuffer*)",10,0,30,0,0,0
,0,"DelayBuffer::size(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::writeNative(const class DelayBuffer*, struct StereoSample) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::writeNativeAndMoveOn(const class DelayBuffer*, struct StereoSample, struct StereoSample**) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::writeResampled(const class DelayBuffer*, struct StereoSample, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"DelayBuffer::~DelayBuffer(const class DelayBuffer*) (always inlined)",0,0,0,0,0,0
,0,"DelayLine::DelayLine(const struct DelayLine*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"DelayLine::Interpolate(const struct DelayLine*, float) (always inlined)",0,0,0,0,0,0
,0,"DelayLine::Write(const struct DelayLine*, long int, float) (always inlined)",0,0,0,0,0,0
"cfunctions.c",237,"delayMS(long unsigned int)",3,0,12,0,0,0
"ui.h",154,"DeleteFile::acceptCurrentOption(const class DeleteFile*)",23,0,116,0,0,0
"display.h",92,"DeleteFile::getOptions(const class DeleteFile*)",8,0,54,0,0,0
"ui.h",154,"DeleteFile::getTitle(const class DeleteFile*)",3,0,13,0,0,0
"delete_file.h",23,"DeleteFile::~DeleteFile(const class DeleteFile*)",2,0,6,0,0,0
"context_menu.h",31,"DeleteFile::~DeleteFile(const class DeleteFile*)",1,0,1,0,0,0
"deluge.cpp",1022,"deleteOldSongBeforeLoadingNew()",6,0,18,0,0,0
,0,"deluge_main() (always inlined)",0,0,0,0,0,0
,0,"delugeAlloc(unsigned int, bool) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.h",99,"delugeDealloc(void*)",3,0,21,0,0,0
,0,"Depth_Patched::Depth_Patched(const class Depth_Patched*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"depth_patched.h",30,"Depth_Patched::isRelevant(const class Depth_Patched*, class ModControllableAudio*, long int)",2,0,23,0,0,0
"menu_item.h",54,"Depth_Patched::~Depth_Patched(const class Depth_Patched*)",1,0,1,0,0,0
"depth_patched.h",25,"Depth_Patched::~Depth_Patched(const class Depth_Patched*)",2,0,6,0,0,0
,0,"Depth_Unpatched::Depth_Unpatched(const class Depth_Unpatched*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"menu_item.h",54,"Depth_Unpatched::~Depth_Unpatched(const class Depth_Unpatched*)",1,0,1,0,0,0
"depth_unpatched.h",24,"Depth_Unpatched::~Depth_Unpatched(const class Depth_Unpatched*)",2,0,6,0,0,0
,0,"Destination::Destination(const class Destination*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"destination.h",31,"Destination::getOptions(const class Destination*)",5,0,57,0,0,0
"destination.h",39,"Destination::isRelevant(const class Destination*, class ModControllableAudio*, long int)",1,0,9,0,0,0
"destination.h",27,"Destination::readCurrentValue(const class Destination*)",2,0,6,0,0,0
"value.h",42,"Destination::writeCurrentValue(const class Destination*)",1,0,9,0,0,0
"menu_item.h",54,"Destination::~Destination(const class Destination*)",1,0,1,0,0,0
"destination.h",24,"Destination::~Destination(const class Destination*)",2,0,6,0,0,0
,0,"destroy_at<deluge::dsp::reverb::Freeverb>(class Freeverb*) (always inlined)",0,0,0,0,0,0
,0,"destroy_at<deluge::dsp::reverb::Mutable>(class Mutable*) (always inlined)",0,0,0,0,0,0
,0,"destroy_at<FatFS::File>(class File*) (always inlined)",0,0,0,0,0,0
"midi_device_manager.cpp",309,"detachedAsPeripheral(long int)",9,0,24,0,0,0
,0,"Detune::Detune(const class Detune*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"detune.h",27,"Detune::readCurrentValue(const class Detune*)",2,0,6,0,0,0
"detune.h",30,"Detune::writeCurrentValue(const class Detune*)",5,0,17,0,0,0
"menu_item.h",54,"Detune::~Detune(const class Detune*)",1,0,1,0,0,0
"detune.h",24,"Detune::~Detune(const class Detune*)",2,0,6,0,0,0
,0,"Device::Device(const struct Device*, enum String, class initializer_list<MenuItem*>) (always inlined)",0,0,0,0,0,0
"device.h",8,"Device::getTitle(const struct Device*)",2,0,13,0,0,0
"device.h",6,"Device::~Device(const struct Device*)",7,0,28,0,0,0
"device.h",6,"Device::~Device(const struct Device*)",7,0,25,0,0,0
,0,"Device::~Device(const struct Device*) (always inlined)",0,0,0,0,0,0
"devices.cpp",35,"Devices::beginSession(const class Devices*, class MenuItem*)",8,0,42,0,0,0
,0,"Devices::Devices(const class Devices*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"devices.cpp",147,"Devices::drawPixelsForOled(const class Devices*)",12,0,55,0,0,0
"display.h",92,"Devices::drawValue(const class Devices*)",4,0,27,0,0,0
"devices.cpp",113,"Devices::getDevice(const class Devices*, long int)",2,0,10,0,0,0
,0,"Devices::getDevice(const class Devices*, long int) (always inlined)",0,0,0,0,0,0
"devices.cpp",143,"Devices::selectButtonPress(const class Devices*)",1,0,2,0,0,0
"stl_algo.h",3669,"Devices::selectEncoderAction(const class Devices*, long int)",19,0,69,0,0,0
"menu_item.h",54,"Devices::~Devices(const class Devices*)",1,0,1,0,0,0
"devices.h",26,"Devices::~Devices(const class Devices*)",2,0,6,0,0,0
"array",200,"DevSysexSetting::getName(const class DevSysexSetting*)",1,0,10,0,0,0
"devSysexSetting.cpp",53,"DevSysexSetting::getOptions(const class DevSysexSetting*)",6,0,54,0,0,0
"devSysexSetting.cpp",31,"DevSysexSetting::readCurrentValue(const class DevSysexSetting*)",5,0,30,0,0,0
"value.h",42,"DevSysexSetting::writeCurrentValue(const class DevSysexSetting*)",3,0,9,0,0,0
"menu_item.h",54,"DevSysexSetting::~DevSysexSetting(const class DevSysexSetting*)",1,0,1,0,0,0
"devSysexSetting.h",25,"DevSysexSetting::~DevSysexSetting(const class DevSysexSetting*)",2,0,6,0,0,0
,0,"dft_r2c(struct ne10_fft_cpx_int32_t* restrict, const long int* restrict, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"dir_alloc(struct DIR*, unsigned int) (always inlined)",0,0,0,0,0,0
"ff.c",1674,"dir_clear(struct FATFS*, long unsigned int)",7,0,42,0,0,0
,0,"dir_clear(struct FATFS*, long unsigned int) (always inlined)",0,0,0,0,0,0
"ff.c",2399,"dir_find(struct DIR*)",32,0,157,0,0,0
"ff.c",1757,"dir_next(struct DIR*, int)",25,0,78,0,0,0
"ff.c",2314,"dir_read(struct DIR*, int)",38,0,109,0,0,0
"ff.c",2486,"dir_register(struct DIR*)",61,0,292,0,0,0
"ff.c",2586,"dir_remove(struct DIR*)",12,0,38,0,0,0
"ff.c",1709,"dir_sdi(struct DIR*, long unsigned int)",19,0,68,0,0,0
"direction.h",102,"Direction::checkPermissionToBeginSession(const class Direction*, class ModControllableAudio*, long int, class MultiRange**)",4,0,26,0,0,0
,0,"Direction::Direction(const class Direction*, enum String, enum String) (always inlined)",0,0,0,0,0,0
,0,"Direction::getIndividualNoteRow(const class Direction*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
"direction.h",84,"Direction::getOptions(const class Direction*)",19,0,124,0,0,0
"direction.h",58,"Direction::readCurrentValue(const class Direction*)",15,0,70,0,0,0
"direction.h",69,"Direction::writeCurrentValue(const class Direction*)",30,0,164,0,0,0
"menu_item.h",54,"Direction::~Direction(const class Direction*)",1,0,1,0,0,0
"direction.h",29,"Direction::~Direction(const class Direction*)",2,0,6,0,0,0
"direction_selector.cpp",25,"DirectionSelector::beginSession(const class DirectionSelector*, class MenuItem*)",3,0,4,0,0,0
,0,"DirectionSelector::DirectionSelector(const class DirectionSelector*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"direction_selector.h",31,"DirectionSelector::getOptions(const class DirectionSelector*)",4,0,45,0,0,0
"direction_selector.h",40,"DirectionSelector::getTitle(const class DirectionSelector*)",2,0,12,0,0,0
,0,"DirectionSelector::getTitle(const class DirectionSelector*) (always inlined)",0,0,0,0,0,0
"value.h",35,"DirectionSelector::readCurrentValue(const class DirectionSelector*)",1,0,3,0,0,0
"direction_selector.cpp",32,"DirectionSelector::selectButtonPress(const class DirectionSelector*)",1,0,2,0,0,0
"value.h",42,"DirectionSelector::writeCurrentValue(const class DirectionSelector*)",1,0,3,0,0,0
"menu_item.h",54,"DirectionSelector::~DirectionSelector(const class DirectionSelector*)",1,0,1,0,0,0
"direction_selector.h",25,"DirectionSelector::~DirectionSelector(const class DirectionSelector*)",2,0,6,0,0,0
,0,"DISABLE_ALL_INTERRUPTS() (always inlined)",0,0,0,0,0,0
"access.S",149,"disable_mmu",7,0,8,0,0,0
"access.S",89,"disable_neon_vfp_access",5,0,8,0,0,0
,0,"disableTimer(int) (always inlined)",0,0,0,0,0,0
,0,"discardRecorder(class SampleRecorder*) (always inlined)",0,0,0,0,0,0
,0,"disk_initialize(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"disk_ioctl(unsigned char, unsigned char, void*) (always inlined)",0,0,0,0,0,0
"diskio.c",73,"disk_read(unsigned char*, long unsigned int, unsigned int, unsigned char)",6,0,20,0,0,0
,0,"disk_read(unsigned char, unsigned char*, long unsigned int, unsigned int) (always inlined)",0,0,0,0,0,0
"diskio.c",185,"disk_read_without_streaming_first(unsigned char*, long unsigned int, unsigned int, unsigned char)",153,0,560,0,0,0
,0,"disk_status(unsigned char) (always inlined)",0,0,0,0,0,0
"diskio.c",235,"disk_write(const unsigned char*, long unsigned int, unsigned int, unsigned char)",167,0,668,0,0,0
,0,"Display::Display(const class Display*, enum DisplayType) (always inlined)",0,0,0,0,0,0
"display.h",54,"Display::displayPopup(const class Display*, const char**, signed char, bool, unsigned char, long int, enum DisplayPopupType)",2,0,19,0,0,0
"display.h",46,"Display::displayPopup(const class Display*, unsigned char, signed char, bool, unsigned char, long int, enum DisplayPopupType)",3,0,25,0,0,0
,0,"Display::displayPopup(const class Display*, unsigned char, signed char, bool, unsigned char, long int, enum DisplayPopupType) (always inlined)",0,0,0,0,0,0
"display.h",82,"Display::getEncodedPosFromLeft(const class Display*, long int, const char*, bool*)",1,0,2,0,0,0
"display.h",90,"Display::getLast(const class Display*)",1,0,4,0,0,0
,0,"Display::have7SEG(const class Display*) (always inlined)",0,0,0,0,0,0
,0,"Display::haveOLED(const class Display*) (always inlined)",0,0,0,0,0,0
"display.h",60,"Display::setNextTransitionDirection(const class Display*, signed char)",1,0,1,0,0,0
"display.h",87,"Display::setScrollingText(const class Display*, const char*, long int, long int, int)",1,0,2,0,0,0
"display.h",36,"Display::setText(const class Display*, class basic_string_view<char, std::char_traits<char> >, bool, unsigned char, bool, unsigned char*, bool, bool, long int, unsigned char*, bool)",2,0,5,0,0,0
"display.h",81,"Display::setTextAsNumber(const class Display*, short int, unsigned char, bool)",1,0,1,0,0,0
"display.h",84,"Display::setTextAsSlot(const class Display*, short int, signed char, bool, bool, long int, bool)",1,0,1,0,0,0
,0,"disposeOfVoice(class Voice*) (always inlined)",0,0,0,0,0,0
"functions.cpp",1950,"dissectIterationDependence(long int, long int*, long int*)",6,0,17,0,0,0
,0,"distance<__gnu_cxx::__normal_iterator<MenuItem**, std::span<MenuItem*> > >(class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >) (always inlined)",0,0,0,0,0,0
,0,"distance<const RuntimeFeatureSettingOption*>(const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
,0,"distance<MenuItem* const*>(const class MenuItem**, const class MenuItem**) (always inlined)",0,0,0,0,0,0
"functions.cpp",1919,"divide_round_negative(long int, long int)",3,0,9,0,0,0
"dmac.c",42,"dmaChannelStart(const long unsigned int)",2,0,15,0,0,0
"sd_read.c",56,"doActualReadRohan(int, struct __sdhndl*, unsigned char*, long int, int, int)",17,0,74,0,0,0
,0,"doActualReadRohan(int, struct __sdhndl*, unsigned char*, long int, int, int) (always inlined)",0,0,0,0,0,0
"ui.cpp",318,"doAnyPendingUIRendering()",20,0,100,10,2,22
,0,"doAnyPendingUIRendering() (always inlined)",0,0,0,0,0,0
"voice.cpp",1758,"doFMNew(long unsigned int, long unsigned int)",3,0,12,0,0,0
,0,"doFMVector(unsigned int[1], unsigned int[1]) (always inlined)",0,0,0,0,0,0
,0,"doGreyoutInstantly() (always inlined)",0,0,0,0,0,0
"audio_engine.cpp",1452,"doRecorderCardRoutines()",258,0,1577,0,0,0
,0,"doSomeOutputting() (always inlined)",0,0,0,0,0,0
,0,"doTranspose(bool, long int) (always inlined)",0,0,0,0,0,0
"midi_transpose.cpp",19,"doTranspose(long int, bool)",47,0,232,0,0,0
,0,"drawByte(unsigned char, unsigned char, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"drawPointer(long unsigned int, long unsigned int, unsigned char, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"drawSquare(const class RGB&, long int, const class RGB&, unsigned char*, long int) (always inlined)",0,0,0,0,0,0
"drum.cpp",31,"Drum::Drum(const class Drum*, enum DrumType)",10,0,21,0,0,0
"drum.cpp",75,"Drum::drumWontBeRenderedForAWhile(const class Drum*)",1,0,3,0,0,0
"drum.h",89,"Drum::expressionEvent(const class Drum*, long int, long int)",1,0,1,0,0,0
"drum.cpp",95,"Drum::expressionEventPossiblyToRecord(const class Drum*, class ModelStackWithTimelineCounter*, short int, long int, long int)",13,0,61,0,0,0
,0,"Drum::getCombinedExpressionInputs(const class Drum*, short int*) (always inlined)",0,0,0,0,0,0
"drum.cpp",52,"Drum::readDrumTagFromFile(const class Drum*, class Deserializer&, const char*)",5,0,50,0,0,0
,0,"Drum::recordNoteOnEarly(const class Drum*, long int, bool) (always inlined)",0,0,0,0,0,0
"drum.cpp",46,"Drum::writeMIDICommandsToFile(const class Drum*, class Serializer&)",2,0,13,0,0,0
"drum_name.cpp",30,"DrumName::beginSession(const class DrumName*, class MenuItem*)",2,0,6,0,0,0
,0,"DrumName::DrumName(const class DrumName*, class String*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",134,"DrumName::isRelevant(const class DrumName*, class ModControllableAudio*, long int)",1,0,6,0,0,0
"menu_item.h",54,"DrumName::~DrumName(const class DrumName*)",1,0,1,0,0,0
"drum_name.cpp",27,"DrumName::~DrumName(const class DrumName*)",1,0,11,0,0,0
"drum_name.cpp",27,"DrumName::~DrumName(const class DrumName*)",2,0,8,0,0,0
"drum_name.h",24,"DrumName::~DrumName(const class DrumName*)",2,0,6,0,0,0
,0,"DrumName::~DrumName(const class DrumName*) (always inlined)",0,0,0,0,0,0
,0,"dtanh(double) (always inlined)",0,0,0,0,0,0
,0,"DualCosineOscillator::DualCosineOscillator<>(const class DualCosineOscillator*, class initializer_list<float>) (always inlined)",0,0,0,0,0,0
,0,"DualCosineOscillator::Init<(DualCosineOscillator::Mode)0>(const class DualCosineOscillator*) (always inlined)",0,0,0,0,0,0
,0,"DualCosineOscillator::InitApproximate(const class DualCosineOscillator*) (always inlined)",0,0,0,0,0,0
,0,"DualCosineOscillator::Next(const class DualCosineOscillator*) (always inlined)",0,0,0,0,0,0
,0,"DualCosineOscillator::Start(const class DualCosineOscillator*) (always inlined)",0,0,0,0,0,0
,0,"DualCosineOscillator::values(const class DualCosineOscillator*) (always inlined)",0,0,0,0,0,0
,0,"DX7Cartridge::getProgramName(const class DX7Cartridge*, long int, char*) (always inlined)",0,0,0,0,0,0
,0,"DX7Cartridge::getProgramNames(const class DX7Cartridge*, char[11]*) (always inlined)",0,0,0,0,0,0
,0,"DX7Cartridge::isCartridge(const class DX7Cartridge*) (always inlined)",0,0,0,0,0,0
,0,"DX7Cartridge::load(const class DX7Cartridge*, const unsigned char*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"DX7Cartridge::normalizePgmName(char*, const char*) (always inlined)",0,0,0,0,0,0
,0,"DX7Cartridge::numPatches(const class DX7Cartridge*) (always inlined)",0,0,0,0,0,0
,0,"DX7Cartridge::unpackProgram(const class DX7Cartridge*, unsigned char*, int) (always inlined)",0,0,0,0,0,0
"math_lut.cpp",119,"dx_init_lut_data()",26,0,160,0,0,0
"browse.cpp",28,"DxBrowseMenu::beginSession(const class DxBrowseMenu*, class MenuItem*)",3,0,11,0,0,0
"menu_item.h",54,"DxBrowseMenu::~DxBrowseMenu(const class DxBrowseMenu*)",1,0,1,0,0,0
"browse.h",25,"DxBrowseMenu::~DxBrowseMenu(const class DxBrowseMenu*)",2,0,6,0,0,0
"cartridge.cpp",84,"DxCartridge::beginSession(const class DxCartridge*, class MenuItem*)",1,0,1,0,0,0
"cartridge.cpp",111,"DxCartridge::drawPixelsForOled(const class DxCartridge*)",18,0,103,0,0,0
"cartridge.cpp",126,"DxCartridge::drawValue(const class DxCartridge*)",14,0,81,0,0,0
"cartridge.cpp",88,"DxCartridge::readValueAgain(const class DxCartridge*)",58,0,192,0,0,0
"cartridge.cpp",174,"DxCartridge::selectButtonPress(const class DxCartridge*)",2,0,6,0,0,0
"cartridge.cpp",142,"DxCartridge::selectEncoderAction(const class DxCartridge*, long int)",12,0,54,0,0,0
,0,"DxCartridge::tryLoad(const class DxCartridge*, const char*) (always inlined)",0,0,0,0,0,0
"menu_item.h",54,"DxCartridge::~DxCartridge(const class DxCartridge*)",1,0,1,0,0,0
"cartridge.h",27,"DxCartridge::~DxCartridge(const class DxCartridge*)",2,0,6,0,0,0
,0,"DXColumn::DXColumn(const class DXColumn*) (always inlined)",0,0,0,0,0,0
"dx.cpp",81,"DXColumn::handlePad(const class DXColumn*, class ModelStackWithTimelineCounter*, struct PressedPad, class KeyboardLayout*)",11,0,132,0,0,0
"dx.cpp",43,"DXColumn::renderColumn(const class DXColumn*, class RGB[18]*, long int)",11,0,95,0,0,0
,0,"DxEngine::DxEngine(const class DxEngine*) (always inlined)",0,0,0,0,0,0
"engine.cpp",74,"DxEngine::dxVoiceUnassigned(const class DxEngine*, class DxVoice*)",1,0,2,0,0,0
"engine.cpp",78,"DxEngine::newPatch(const class DxEngine*)",7,0,34,0,0,0
"engine.cpp",59,"DxEngine::solicitDxVoice(const class DxEngine*)",4,0,13,0,0,0
"engine_select.cpp",33,"DxEngineSelect::beginSession(const class DxEngineSelect*, class MenuItem*)",1,0,1,0,0,0
"engine_select.cpp",45,"DxEngineSelect::drawPixelsForOled(const class DxEngineSelect*)",5,0,32,0,0,0
"engine_select.cpp",50,"DxEngineSelect::drawValue(const class DxEngineSelect*)",4,0,23,0,0,0
"engine_select.cpp",37,"DxEngineSelect::readValueAgain(const class DxEngineSelect*)",3,0,13,0,0,0
"engine_select.cpp",82,"DxEngineSelect::selectButtonPress(const class DxEngineSelect*)",1,0,2,0,0,0
"engine_select.cpp",60,"DxEngineSelect::selectEncoderAction(const class DxEngineSelect*, long int)",10,0,45,0,0,0
"menu_item.h",54,"DxEngineSelect::~DxEngineSelect(const class DxEngineSelect*)",1,0,1,0,0,0
"engine_select.h",26,"DxEngineSelect::~DxEngineSelect(const class DxEngineSelect*)",2,0,6,0,0,0
"global_params.cpp",34,"DxGlobalParams::beginSession(const class DxGlobalParams*, class MenuItem*)",1,0,1,0,0,0
"global_params.cpp",59,"DxGlobalParams::drawPixelsForOled(const class DxGlobalParams*)",6,0,30,0,0,0
"global_params.cpp",38,"DxGlobalParams::readValueAgain(const class DxGlobalParams*)",4,0,24,0,0,0
"global_params.cpp",102,"DxGlobalParams::selectButtonPress(const class DxGlobalParams*)",8,0,27,0,0,0
"global_params.cpp",71,"DxGlobalParams::selectEncoderAction(const class DxGlobalParams*, long int)",10,0,58,0,0,0
"menu_item.h",54,"DxGlobalParams::~DxGlobalParams(const class DxGlobalParams*)",1,0,1,0,0,0
"global_params.h",25,"DxGlobalParams::~DxGlobalParams(const class DxGlobalParams*)",2,0,6,0,0,0
,0,"dxNoteToFreq(int) (always inlined)",0,0,0,0,0,0
"operator_params.cpp",34,"DxOperatorParams::beginSession(const class DxOperatorParams*, class MenuItem*)",1,0,1,0,0,0
"operator_params.cpp",63,"DxOperatorParams::drawPixelsForOled(const class DxOperatorParams*)",6,0,30,0,0,0
"basic_string.h",222,"DxOperatorParams::getTitle(const class DxOperatorParams*)",2,0,5,0,0,0
"operator_params.cpp",38,"DxOperatorParams::readValueAgain(const class DxOperatorParams*)",4,0,23,0,0,0
"operator_params.cpp",106,"DxOperatorParams::selectButtonPress(const class DxOperatorParams*)",3,0,13,0,0,0
"operator_params.cpp",75,"DxOperatorParams::selectEncoderAction(const class DxOperatorParams*, long int)",10,0,59,0,0,0
"operator_params.h",26,"DxOperatorParams::~DxOperatorParams(const class DxOperatorParams*)",4,0,17,0,0,0
"operator_params.h",26,"DxOperatorParams::~DxOperatorParams(const class DxOperatorParams*)",4,0,14,0,0,0
,0,"DxOperatorParams::~DxOperatorParams(const class DxOperatorParams*) (always inlined)",0,0,0,0,0,0
"param.cpp",37,"DxParam::beginSession(const class DxParam*, class MenuItem*)",1,0,1,0,0,0
"param.cpp",146,"DxParam::blinkSideColumn(const class DxParam*)",6,0,27,0,0,0
,0,"DxParam::blinkSideColumn(const class DxParam*) (always inlined)",0,0,0,0,0,0
"param.cpp",521,"DxParam::drawPixelsForOled(const class DxParam*)",70,0,494,0,0,0
"param.cpp",552,"DxParam::drawValue(const class DxParam*)",21,0,103,0,0,0
"param.cpp",321,"DxParam::flashParamName(const class DxParam*)",17,0,93,0,0,0
"param.cpp",278,"DxParam::getTitle(const class DxParam*)",13,0,90,0,0,0
,0,"DxParam::hasSideColumn(const class DxParam*) (always inlined)",0,0,0,0,0,0
"buttons.cpp",261,"DxParam::horizontalEncoderAction(const class DxParam*, long int)",14,0,81,0,0,0
,0,"DxParam::openForOpOrGlobal(const class DxParam*, int) (always inlined)",0,0,0,0,0,0
,0,"DxParam::potentialShortcutPadAction(const class DxParam*, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"param.cpp",67,"DxParam::readValueAgain(const class DxParam*)",32,0,147,0,0,0
"param.cpp",43,"DxParam::selectEncoderAction(const class DxParam*, long int)",12,0,37,0,0,0
"param.cpp",156,"DxParam::timerCallback(const class DxParam*)",2,0,4,0,0,0
"menu_item.h",54,"DxParam::~DxParam(const class DxParam*)",1,0,1,0,0,0
"param.h",26,"DxParam::~DxParam(const class DxParam*)",2,0,6,0,0,0
"dx7note.cpp",116,"DxPatch::computeLfo(const class DxPatch*, int)",12,0,59,0,0,0
,0,"DxPatch::DxPatch(const class DxPatch*) (always inlined)",0,0,0,0,0,0
,0,"DxPatch::opSwitch(const class DxPatch*, int) (always inlined)",0,0,0,0,0,0
"dx7note.cpp",83,"DxPatch::setEngineMode(const class DxPatch*, int, bool)",7,0,27,0,0,0
,0,"DxPatch::setEngineMode(const class DxPatch*, int, bool) (always inlined)",0,0,0,0,0,0
,0,"DxPatch::setOpSwitch(const class DxPatch*, int, bool) (always inlined)",0,0,0,0,0,0
,0,"DxPatch::updateEngineMode(const class DxPatch*) (always inlined)",0,0,0,0,0,0
"dx_browser.cpp",90,"DxSyxBrowser::enterKeyPress(const class DxSyxBrowser*)",14,0,61,0,0,0
"dx_browser.cpp",69,"DxSyxBrowser::getCurrentFilePath(const class DxSyxBrowser*, class String*)",10,0,30,0,0,0
"dx_browser.cpp",36,"DxSyxBrowser::opened(const class DxSyxBrowser*)",11,0,48,0,0,0
"dx7note.cpp",311,"DxVoice::compute(const class DxVoice*, long int*, int, int, const class DxPatch*, const struct DxVoiceCtrl*)",32,0,232,0,0,0
,0,"DxVoice::DxVoice(const class DxVoice*) (always inlined)",0,0,0,0,0,0
,0,"DxVoice::env_p(const class DxVoice*, int) (always inlined)",0,0,0,0,0,0
,0,"DxVoice::getdelay(const class DxVoice*, int) (always inlined)",0,0,0,0,0,0
"dx7note.cpp",230,"DxVoice::init(const class DxVoice*, class DxPatch&, int, int)",28,0,184,0,0,0
"dx7note.cpp",397,"DxVoice::keyup(const class DxVoice*)",5,0,26,0,0,0
"dx7note.cpp",133,"DxVoice::osc_freq(const class DxVoice*, int, int, int, int, int, int)",9,0,72,0,0,0
,0,"DxVoice::osc_freq(const class DxVoice*, int, int, int, int, int, int) (always inlined)",0,0,0,0,0,0
,0,"DxVoice::oscSync(const class DxVoice*) (always inlined)",0,0,0,0,0,0
,0,"DxVoice::oscUnSync(const class DxVoice*) (always inlined)",0,0,0,0,0,0
"dx7note.cpp",415,"DxVoice::update(const class DxVoice*, class DxPatch&, int)",14,0,122,0,0,0
"resizeable_array.cpp",54,"EarlyNoteArray::EarlyNoteArray(const class EarlyNoteArray*)",8,0,20,0,0,0
"early_note_array.cpp",24,"EarlyNoteArray::insertElementIfNonePresent(const class EarlyNoteArray*, long int, long int, bool)",14,0,50,0,0,0
,0,"EarlyNoteArray::noteNoLongerActive(const class EarlyNoteArray*, long int) (always inlined)",0,0,0,0,0,0
,0,"EarlyNoteArray::~EarlyNoteArray(const class EarlyNoteArray*) (always inlined)",0,0,0,0,0,0
,0,"EditingMode::EditingMode(const class EditingMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"editing_mode.h",77,"EditingMode::getOptions(const class EditingMode*)",4,0,51,0,0,0
"editing_mode.h",31,"EditingMode::readCurrentValue(const class EditingMode*)",3,0,9,0,0,0
"value.h",45,"EditingMode::writeCurrentValue(const class EditingMode*)",12,0,45,0,0,0
"menu_item.h",54,"EditingMode::~EditingMode(const class EditingMode*)",1,0,1,0,0,0
"editing_mode.h",26,"EditingMode::~EditingMode(const class EditingMode*)",2,0,6,0,0,0
,0,"emptySection(long unsigned int*, long unsigned int*) (always inlined)",0,0,0,0,0,0
"emulated_display.cpp",22,"EmulatedDisplay::writeCurrentValue(const class EmulatedDisplay*)",6,0,24,0,0,0
"menu_item.h",54,"EmulatedDisplay::~EmulatedDisplay(const class EmulatedDisplay*)",1,0,1,0,0,0
"emulated_display.h",24,"EmulatedDisplay::~EmulatedDisplay(const class EmulatedDisplay*)",2,0,6,0,0,0
,0,"ENABLE_INTERRUPTS() (always inlined)",0,0,0,0,0,0
"access.S",130,"enable_mmu",8,8,8,8,2,17
"access.S",73,"enable_neon_vfp_access_full",6,0,8,0,0,0
"access.S",57,"enable_neon_vfp_access_priv",6,0,8,0,0,0
,0,"enableTimer(int) (always inlined)",0,0,0,0,0,0
,0,"encodeIterationDependence(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"Encoder::getLimitedDetentPosAndReset(const class Encoder*) (always inlined)",0,0,0,0,0,0
,0,"Encoder::read(const class Encoder*) (always inlined)",0,0,0,0,0,0
"encoder.cpp",105,"Encoder::setNonDetentMode(const class Encoder*)",3,0,19,0,0,0
"encoder.cpp",95,"Encoder::setPins(const class Encoder*, unsigned char, unsigned char, unsigned char, unsigned char)",8,0,14,0,0,0
,0,"End::End(const class End*, enum String) (always inlined)",0,0,0,0,0,0
"menu_item.h",54,"End::~End(const class End*)",1,0,1,0,0,0
"end.h",21,"End::~End(const class End*)",2,0,6,0,0,0
,0,"EngineMkI::compute(const class EngineMkI*, long int*, int, const long int*, long int, long int, long int, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"EngineMkI.cpp",129,"EngineMkI::compute_fb(const class EngineMkI*, long int*, int, long int, long int, long int, long int, long int, long int*, int, bool)",17,0,75,0,0,0
"EngineMkI.cpp",150,"EngineMkI::compute_fb2(const class EngineMkI*, long int*, int, struct FmOpParams*, long int, long int, long int, long int*, int)",20,0,130,0,0,0
"EngineMkI.cpp",190,"EngineMkI::compute_fb3(const class EngineMkI*, long int*, int, struct FmOpParams*, long int, long int, long int, long int*, int)",21,0,184,0,0,0
,0,"EngineMkI::compute_pure(const class EngineMkI*, long int*, int, long int, long int, long int, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"EngineMkI.cpp",65,"EngineMkI::EngineMkI(const class EngineMkI*)",7,0,60,0,0,0
"EngineMkI.cpp",240,"EngineMkI::render(const class EngineMkI*, long int*, int, struct FmOpParams*, int, long int*, long int)",47,0,385,0,0,0
"fm_core.h",54,"EngineMkI::~EngineMkI(const class EngineMkI*)",1,0,1,0,0,0
"EngineMkI.h",24,"EngineMkI::~EngineMkI(const class EngineMkI*)",2,0,6,0,0,0
,0,"enqueueCVMessage(int, long unsigned int) (always inlined)",0,0,0,0,0,0
"oled.c",106,"enqueueSPITransfer(long int, const unsigned char*)",6,0,17,0,0,0
"ui.cpp",436,"enterUIMode(long unsigned int)",1,0,7,0,0,0
,0,"enterUIMode(long unsigned int) (always inlined)",0,0,0,0,0,0
"enumeration.cpp",5,"Enumeration::beginSession(const class Enumeration*, class MenuItem*)",5,0,17,0,0,0
,0,"Enumeration::Enumeration(const class Enumeration*) (always inlined)",0,0,0,0,0,0
"enumeration.cpp",16,"Enumeration::selectEncoderAction(const class Enumeration*, long int)",9,0,33,0,0,0
,0,"EnumStringMap<FilterRoute, 3>::operator()(const class EnumStringMap<FilterRoute, 3>*, enum FilterRoute) (always inlined)",0,0,0,0,0,0
"env.cpp",105,"Env::advance(const class Env*, const class EnvParams&, int, int)",14,0,88,0,0,0
,0,"Env::advance(const class Env*, const class EnvParams&, int, int) (always inlined)",0,0,0,0,0,0
"env.cpp",54,"Env::getsample(const class Env*, const class EnvParams&, int, int)",14,0,81,0,0,0
,0,"Env::init(const class Env*, const class EnvParams&, int, int) (always inlined)",0,0,0,0,0,0
,0,"Env::init_sr(double) (always inlined)",0,0,0,0,0,0
,0,"Env::keydown(const class Env*, const class EnvParams&, bool) (always inlined)",0,0,0,0,0,0
,0,"Env::scaleoutlevel(int) (always inlined)",0,0,0,0,0,0
,0,"Env::update(const class Env*, const class EnvParams&, int, int) (always inlined)",0,0,0,0,0,0
"envelope.h",27,"Envelope::beginSession(const class Envelope*, class MenuItem*)",6,0,17,0,0,0
,0,"Envelope::Envelope(const class Envelope*) (always inlined)",0,0,0,0,0,0
"envelope.cpp",135,"Envelope::noteOff(const class Envelope*, unsigned char, class ParamManagerForTimeline*, class Sound*)",14,0,48,0,0,0
,0,"Envelope::noteOff(const class Envelope*, unsigned char, class Sound*, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
"envelope.cpp",113,"Envelope::noteOn(const class Envelope*, bool)",4,0,22,0,0,0
,0,"Envelope::noteOn(const class Envelope*, unsigned char, class Sound*, class Voice*) (always inlined)",0,0,0,0,0,0
"envelope.cpp",33,"Envelope::render(const class Envelope*, long unsigned int, long unsigned int, long unsigned int, long unsigned int, long unsigned int, const short unsigned int*)",31,0,153,0,0,0
,0,"Envelope::resetTimeEntered(const class Envelope*) (always inlined)",0,0,0,0,0,0
,0,"Envelope::resumeAttack(const class Envelope*, long int) (always inlined)",0,0,0,0,0,0
,0,"Envelope::setState(const class Envelope*, enum EnvelopeStage) (always inlined)",0,0,0,0,0,0
,0,"Envelope::unconditionalOff(const class Envelope*) (always inlined)",0,0,0,0,0,0
"envelope.cpp",163,"Envelope::unconditionalRelease(const class Envelope*, enum EnvelopeStage, long unsigned int)",7,0,24,0,0,0
,0,"Envelope::unconditionalRelease(const class Envelope*, enum EnvelopeStage, long unsigned int) (always inlined)",0,0,0,0,0,0
"envelope.h",23,"Envelope::~Envelope(const class Envelope*)",7,0,28,0,0,0
"envelope.h",23,"Envelope::~Envelope(const class Envelope*)",7,0,25,0,0,0
,0,"Envelope::~Envelope(const class Envelope*) (always inlined)",0,0,0,0,0,0
,0,"exitScaleModeForMIDITransposeClips() (always inlined)",0,0,0,0,0,0
"ui.cpp",421,"exitUIMode(long unsigned int)",2,0,9,0,0,0
"ui.cpp",425,"exitUIMode(long unsigned int)",2,0,9,0,0,0
,0,"exitUIMode(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"exp",0,0,124,0,0,0
,0,"exp(float) (always inlined)",0,0,0,0,0,0
,0,"Exp2::lookup(long int) (always inlined)",0,0,0,0,0,0
,0,"exp2_init(long int*) (always inlined)",0,0,0,0,0,0
,0,"expected<bool, Error>::expected<std::expected<bool, FatFS::Error>::transform_error<Error (&)(FatFS::Error)>(Error (&)(FatFS::Error)) &&::<lambda()> >(const class expected<bool, Error>*, struct __unexpect_inv, struct) (always inlined)",0,0,0,0,0,0
,0,"expected<bool, FatFS::Error>::transform_error<Error (&)(FatFS::Error)>(const class expected<bool, FatFS::Error>*, enum Error(enum Error)&) (always inlined)",0,0,0,0,0,0
,0,"expected<FatFS::File, Error>::expected<Error>(const class expected<FatFS::File, Error>*, class unexpected<Error>) (always inlined)",0,0,0,0,0,0
,0,"expected<FatFS::File, Error>::expected<FatFS::File&>(const class expected<FatFS::File, Error>*, class File&) (always inlined)",0,0,0,0,0,0
,0,"expected<FatFS::File, Error>::value(const class expected<FatFS::File, Error>*) (always inlined)",0,0,0,0,0,0
,0,"expected<FatFS::File, FatFS::Error>::expected<FatFS::Error>(const class expected<FatFS::File, FatFS::Error>*, class unexpected<FatFS::Error>) (always inlined)",0,0,0,0,0,0
,0,"expected<FatFS::File, FatFS::Error>::expected<FatFS::File>(const class expected<FatFS::File, FatFS::Error>*, class File) (always inlined)",0,0,0,0,0,0
,0,"expected<FatFS::File, FatFS::Error>::~expected(const class expected<FatFS::File, FatFS::Error>*) (always inlined)",0,0,0,0,0,0
,0,"expected<SemVer, SemVer::Parser::Error>::expected<SemVer>(const class expected<SemVer, SemVer::Parser::Error>*, struct SemVer) (always inlined)",0,0,0,0,0,0
,0,"expected<unsigned char, SemVer::Parser::Error>::expected<SemVer::Parser::Error>(const class expected<unsigned char, SemVer::Parser::Error>*, class unexpected<SemVer::Parser::Error>) (always inlined)",0,0,0,0,0,0
,0,"expected<unsigned char, SemVer::Parser::Error>::expected<unsigned char>(const class expected<unsigned char, SemVer::Parser::Error>*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"expected<unsigned int, FatFS::Error>::expected<unsigned int>(const class expected<unsigned int, FatFS::Error>*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"expf",0,0,62,34,336,11743
"array",276,"ExpressionParamSet::beenCloned(const class ExpressionParamSet*, bool, long int)",4,0,9,0,0,0
,0,"ExpressionParamSet::cancelAllOverriding(const class ExpressionParamSet*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",678,"ExpressionParamSet::clearValues(const class ExpressionParamSet*, const class ModelStackWithParamCollection*)",4,0,17,0,0,0
"param_set.cpp",693,"ExpressionParamSet::deleteAllAutomation(const class ExpressionParamSet*, class Action*, class ModelStackWithParamCollection*)",2,0,8,0,0,0
,0,"ExpressionParamSet::ExpressionParamSet(const class ExpressionParamSet*, class ParamCollectionSummary*, bool) (always inlined)",0,0,0,0,0,0
"param_set.h",147,"ExpressionParamSet::getParamKind(const class ExpressionParamSet*)",1,0,2,0,0,0
"param_set.cpp",586,"ExpressionParamSet::knobPosToParamValue(const class ExpressionParamSet*, long int, class ModelStackWithAutoParam*)",5,0,13,0,0,0
"param_set.h",137,"ExpressionParamSet::mayParamInterpolate(const class ExpressionParamSet*, long int)",1,0,2,0,0,0
,0,"ExpressionParamSet::moveRegionHorizontally(const class ExpressionParamSet*, class ModelStackWithParamCollection*, long int, long int, long int, long int, class Action*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",562,"ExpressionParamSet::notifyParamModifiedInSomeWay(const class ExpressionParamSet*, const class ModelStackWithAutoParam*, long int, bool, bool, bool)",8,0,37,0,0,0
"param_set.cpp",600,"ExpressionParamSet::paramValueToKnobPos(const class ExpressionParamSet*, long int, class ModelStackWithAutoParam*)",5,0,12,0,0,0
"param_set.cpp",643,"ExpressionParamSet::readFromFile(const class ExpressionParamSet*, class Deserializer&, class ParamCollectionSummary*, long int)",6,0,66,0,0,0
"param_set.cpp",616,"ExpressionParamSet::writeToFile(const class ExpressionParamSet*, class Serializer&, bool)",10,0,61,0,0,0
"param_set.h",131,"ExpressionParamSet::~ExpressionParamSet(const class ExpressionParamSet*)",3,0,19,0,0,0
"param_set.h",131,"ExpressionParamSet::~ExpressionParamSet(const class ExpressionParamSet*)",3,0,16,0,0,0
,0,"ExpressionParamSet::~ExpressionParamSet(const class ExpressionParamSet*) (always inlined)",0,0,0,0,0,0
"ff.c",4204,"f_close(struct FIL*)",18,0,48,0,0,0
,0,"f_close(struct FIL*) (always inlined)",0,0,0,0,0,0
"ff.c",4641,"f_closedir(struct DIR*)",5,0,11,0,0,0
"ff.c",4427,"f_lseek(struct FIL*, long unsigned int)",34,0,135,0,0,0
,0,"f_mkdir(const char*) (always inlined)",0,0,0,0,0,0
"ff.c",5079,"f_mkdir_and_get(struct DIR*, const char*)",30,0,105,0,0,0
,0,"f_mount(struct FATFS*, const char*, unsigned char) (always inlined)",0,0,0,0,0,0
"ff.c",3717,"f_open(struct FIL*, const char*, unsigned char)",40,0,125,0,0,0
"ff.c",4588,"f_opendir(struct DIR*, const char*)",14,0,47,0,0,0
"ff.c",3907,"f_read(struct FIL*, void*, unsigned int, unsigned int*)",34,0,129,0,0,0
,0,"f_readdir(struct DIR*, struct FILINFO*) (always inlined)",0,0,0,0,0,0
"ff.c",4671,"f_readdir(struct FILINFO*, struct DIR*)",9,0,26,0,0,0
"ff.c",4703,"f_readdir_get_filepointer(struct FilePointer*, struct FILINFO*, struct DIR*)",15,0,39,0,0,0
"ff.c",5186,"f_rename(const char*, const char*)",33,0,131,0,0,0
"ff.c",4807,"f_stat(const char*, struct FILINFO*)",7,0,28,0,0,0
,0,"f_sync(struct FIL*) (always inlined)",0,0,0,0,0,0
,0,"f_truncate(struct FIL*) (always inlined)",0,0,0,0,0,0
"ff.c",4988,"f_unlink(const char*)",22,0,69,0,0,0
"ff.c",4006,"f_write(struct FIL*, const void*, unsigned int, unsigned int*)",46,0,183,0,0,0
,0,"fabs",0,0,5,0,0,0
"fallback_allocator.h",25,"fallback_allocator<MenuItem*>::allocate(unsigned int, const class fallback_allocator<MenuItem*>*)",7,0,22,0,0,0
"functions.cpp",1459,"fastPythag(long int, long int)",6,0,23,0,0,0
,0,"fatfsErrorToDelugeError(enum Error) (always inlined)",0,0,0,0,0,0
"fault_handler.c",248,"fault_handler_print_freeze_pointers(long unsigned int, long unsigned int, long unsigned int, long unsigned int)",30,0,632,0,0,0
,0,"Feedback::Feedback(const class Feedback*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"sound.h",199,"Feedback::isRelevant(const class Feedback*, class ModControllableAudio*, long int)",1,0,10,0,0,0
"feedback.h",29,"Feedback::isRelevant(const class Feedback*, class ModControllableAudio*, long int)",2,0,24,0,0,0
"menu_item.h",54,"Feedback::~Feedback(const class Feedback*)",1,0,1,0,0,0
"feedback.h",23,"Feedback::~Feedback(const class Feedback*)",4,0,20,0,0,0
"feedback.h",23,"Feedback::~Feedback(const class Feedback*)",4,0,17,0,0,0
"feedback.h",24,"Feedback::~Feedback(const class Feedback*)",2,0,6,0,0,0
,0,"Feedback::~Feedback(const class Feedback*) (always inlined)",0,0,0,0,0,0
,0,"ff_oem2uni(short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"ffunicode.c",15231,"ff_uni2oem(long unsigned int, short unsigned int)",7,0,21,0,0,0
,0,"ff_uni2oem(long unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"ffunicode.c",15564,"ff_wtoupper(long unsigned int)",17,0,58,0,0,0
,0,"ff_wtoupper(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"File::close(const class File*) (always inlined)",0,0,0,0,0,0
,0,"File::lseek(const class File*, unsigned int) (always inlined)",0,0,0,0,0,0
"fatfs.cpp",20,"File::open(unsigned char, class basic_string_view<char, std::char_traits<char> >)",7,0,37,0,0,0
,0,"File::truncate(const class File*) (always inlined)",0,0,0,0,0,0
,0,"File::write(const class File*, class span<std::byte, 4294967295>) (always inlined)",0,0,0,0,0,0
,0,"File::~File(const class File*) (always inlined)",0,0,0,0,0,0
,0,"FileItem::FileItem(const class FileItem*) (always inlined)",0,0,0,0,0,0
"display.h",92,"FileItem::getDisplayNameWithoutExtension(const class FileItem*, class String*)",5,0,29,0,0,0
,0,"FileItem::getDisplayNameWithoutExtension(const class FileItem*, class String*) (always inlined)",0,0,0,0,0,0
"file_item.cpp",64,"FileItem::getFilenameWithoutExtension(const class FileItem*, class String*)",6,0,20,0,0,0
,0,"FileItem::setupWithInstrument(const class FileItem*, class Instrument*, bool) (always inlined)",0,0,0,0,0,0
,0,"FileItem::~FileItem(const class FileItem*) (always inlined)",0,0,0,0,0,0
"sample_browser.cpp",1077,"filenameGreaterOrEqual(class Sample*, class Sample*)",3,0,21,0,0,0
"file_selector.cpp",33,"FileSelector::beginSession(const class FileSelector*, class MenuItem*)",5,0,24,0,0,0
"song.cpp",244,"FileSelector::checkPermissionToBeginSession(const class FileSelector*, class ModControllableAudio*, long int, class MultiRange**)",3,0,23,0,0,0
,0,"FileSelector::FileSelector(const class FileSelector*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"song.cpp",244,"FileSelector::isRelevant(const class FileSelector*, class ModControllableAudio*, long int)",4,0,24,0,0,0
"menu_item.h",54,"FileSelector::~FileSelector(const class FileSelector*)",1,0,1,0,0,0
"file_selector.h",24,"FileSelector::~FileSelector(const class FileSelector*)",2,0,6,0,0,0
,0,"fileStringToParam(enum Kind, const char*, bool) (always inlined)",0,0,0,0,0,0
"param.cpp",558,"fileStringToParamConst(enum Kind, const char*, bool)",18,0,132,0,0,0
,0,"fileStringToParamConst(enum Kind, const char*, bool) (always inlined)",0,0,0,0,0,0
,0,"Filesystem::mount(const class Filesystem*, unsigned char, const char*) (always inlined)",0,0,0,0,0,0
,0,"fill<__gnu_cxx::__normal_iterator<long int*, std::span<long int> >, int>(class __normal_iterator<long int*, std::span<long int, 4294967295> >, class __normal_iterator<long int*, std::span<long int, 4294967295> >, const int&) (always inlined)",0,0,0,0,0,0
,0,"fill<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, StereoSample>(class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, class __normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, const struct StereoSample&) (always inlined)",0,0,0,0,0,0
,0,"fill<RGB*, RGB>(class RGB*, class RGB*, const class RGB&) (always inlined)",0,0,0,0,0,0
,0,"fill_n<long int*, unsigned int, long int>(long int*, unsigned int, const long int&) (always inlined)",0,0,0,0,0,0
,0,"fill_n<signed char*, unsigned int, signed char>(signed char*, unsigned int, const signed char&) (always inlined)",0,0,0,0,0,0
,0,"Filter::Filter(const class Filter*, enum String, class span<MenuItem*, 4294967295>) (always inlined)",0,0,0,0,0,0
"filter.h",22,"Filter::~Filter(const class Filter*)",7,0,28,0,0,0
"filter.h",22,"Filter::~Filter(const class Filter*)",7,0,25,0,0,0
,0,"Filter::~Filter(const class Filter*) (always inlined)",0,0,0,0,0,0
,0,"Filter<deluge::dsp::filter::HpLadderFilter>::curveFrequency(const class Filter<deluge::dsp::filter::HpLadderFilter>*, long int) (always inlined)",0,0,0,0,0,0
,0,"Filter<deluge::dsp::filter::HpLadderFilter>::filterMono(const class Filter<deluge::dsp::filter::HpLadderFilter>*, long int*, long int*, long int) (always inlined)",0,0,0,0,0,0
,0,"Filter<deluge::dsp::filter::HpLadderFilter>::filterStereo(const class Filter<deluge::dsp::filter::HpLadderFilter>*, long int*, long int*) (always inlined)",0,0,0,0,0,0
,0,"Filter<deluge::dsp::filter::HpLadderFilter>::updateBlend(const class Filter<deluge::dsp::filter::HpLadderFilter>*) (always inlined)",0,0,0,0,0,0
,0,"Filter<deluge::dsp::filter::SVFilter>::configure(const class Filter<deluge::dsp::filter::SVFilter>*, long int, long int, enum FilterMode, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"FilterMorph::FilterMorph(const class FilterMorph*, enum String, long int, bool) (always inlined)",0,0,0,0,0,0
"morph.h",30,"FilterMorph::getName(const class FilterMorph*)",3,0,37,0,0,0
"morph.h",34,"FilterMorph::getTitle(const class FilterMorph*)",4,0,37,0,0,0
"morph.h",24,"FilterMorph::~FilterMorph(const class FilterMorph*)",2,0,6,0,0,0
"menu_item.h",54,"FilterMorph::~FilterMorph(const class FilterMorph*)",1,0,1,0,0,0
,0,"filterRouteToString(enum FilterRoute) (always inlined)",0,0,0,0,0,0
,0,"FilterRouting::FilterRouting(const class FilterRouting*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"filter_route.h",33,"FilterRouting::getOptions(const class FilterRouting*)",5,0,53,0,0,0
"filter_route.h",28,"FilterRouting::readCurrentValue(const class FilterRouting*)",2,0,6,0,0,0
"filter_route.h",30,"FilterRouting::writeCurrentValue(const class FilterRouting*)",2,0,6,0,0,0
"menu_item.h",54,"FilterRouting::~FilterRouting(const class FilterRouting*)",1,0,1,0,0,0
"filter_route.h",25,"FilterRouting::~FilterRouting(const class FilterRouting*)",2,0,6,0,0,0
,0,"FilterSet::isOn(const class FilterSet*) (always inlined)",0,0,0,0,0,0
"filter_set.cpp",25,"FilterSet::renderHPFLong(const class FilterSet*, long int*, long int*, long int)",11,0,104,0,0,0
,0,"FilterSet::renderHPFLong(const class FilterSet*, long int*, long int*, long int) (always inlined)",0,0,0,0,0,0
"filter_set.cpp",37,"FilterSet::renderHPFLongStereo(const class FilterSet*, long int*, long int*)",11,0,100,0,0,0
,0,"FilterSet::renderHPFLongStereo(const class FilterSet*, long int*, long int*) (always inlined)",0,0,0,0,0,0
"filter_set.cpp",71,"FilterSet::renderLong(const class FilterSet*, long int*, long int*, long int, long int)",7,0,80,0,0,0
"filter_set.cpp",103,"FilterSet::renderLongStereo(const class FilterSet*, long int*, long int*)",7,0,73,12,17,254
"filter_set.cpp",46,"FilterSet::renderLPFLong(const class FilterSet*, long int*, long int*, long int)",10,0,98,0,0,0
,0,"FilterSet::renderLPFLong(const class FilterSet*, long int*, long int*, long int) (always inlined)",0,0,0,0,0,0
"filter_set.cpp",59,"FilterSet::renderLPFLongStereo(const class FilterSet*, long int*, long int*)",10,0,94,0,0,0
,0,"FilterSet::renderLPFLongStereo(const class FilterSet*, long int*, long int*) (always inlined)",0,0,0,0,0,0
"filter_set.cpp",195,"FilterSet::reset(const class FilterSet*)",2,0,11,0,0,0
"filter_set.cpp",138,"FilterSet::setConfig(const class FilterSet*, long int, long int, enum FilterMode, long int, long int, long int, enum FilterMode, long int, long int, enum FilterRoute, bool, long int*)",19,3,140,22,21,595
,0,"filterTypeToString(enum FilterType) (always inlined)",0,0,0,0,0,0
,0,"find_volume(struct FATFS*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"finite",0,0,8,0,0,0
"intc_handler.c",148,"fiq_handler_interrupt()",1,0,1,0,0,0
,0,"FirmwareVersion::FirmwareVersion(const struct FirmwareVersion*, enum Type, struct SemVer) (always inlined)",0,0,0,0,0,0
"firmware_version.h",45,"FirmwareVersion::operator<=>(const struct FirmwareVersion*, const struct FirmwareVersion&)",11,0,46,0,0,0
"firmware_version.cpp",6,"FirmwareVersion::parse(class basic_string_view<char, std::char_traits<char> >)",8,0,120,0,0,0
"fixed.cpp",29,"Fixed::checkPermissionToBeginSession(const class Fixed*, class ModControllableAudio*, long int, class MultiRange**)",3,0,11,0,0,0
,0,"Fixed::Fixed(const class Fixed*, enum String, long int, enum PatchSource) (always inlined)",0,0,0,0,0,0
"fixed.cpp",45,"Fixed::patchingSourceShortcutPress(const class Fixed*, enum PatchSource, bool)",2,0,5,0,0,0
"fixed.cpp",35,"Fixed::shouldBlinkPatchingSourceShortcut(const class Fixed*, enum PatchSource, unsigned char*)",3,0,32,0,0,0
"menu_item.h",54,"Fixed::~Fixed(const class Fixed*)",1,0,1,0,0,0
"fixed.h",23,"Fixed::~Fixed(const class Fixed*)",2,0,6,0,0,0
,0,"flagCable(long unsigned int*, long int) (always inlined)",0,0,0,0,0,0
,0,"flashMainPad(long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"floatBitPatternToInt(long unsigned int) (always inlined)",0,0,0,0,0,0
"cfunctions.c",71,"floatToString(float, char* restrict, long int, long int)",35,0,140,0,0,0
,0,"floor",0,0,93,0,0,0
"midi_engine.cpp",264,"flushUSBMIDIToHostedDevice(long int, bool, long int)",28,0,74,0,0,0
,0,"FM::FM(const class FM*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"fm.h",23,"FM::~FM(const class FM*)",4,0,20,0,0,0
"fm.h",23,"FM::~FM(const class FM*)",4,0,17,0,0,0
,0,"FM::~FM(const class FM*) (always inlined)",0,0,0,0,0,0
,0,"FmCore::FmCore(const class FmCore*) (always inlined)",0,0,0,0,0,0
"fm_core.cpp",67,"FmCore::render(const class FmCore*, long int*, int, struct FmOpParams*, int, long int*, long int)",22,0,167,0,0,0
"fm_core.h",54,"FmCore::~FmCore(const class FmCore*)",1,0,6,0,0,0
"fm_core.h",54,"FmCore::~FmCore(const class FmCore*)",1,0,1,0,0,0
,0,"fmod",0,0,25,0,0,0
,0,"fmod<float, int>(float, int) (always inlined)",0,0,0,0,0,0
"fm_op_kernel.cpp",40,"FmOpKernel::compute(long int*, int, const long int*, long int, long int, long int, long int, long int, bool, bool)",13,0,82,0,0,0
"fm_op_kernel.cpp",105,"FmOpKernel::compute_fb(long int*, int, long int, long int, long int, long int, long int, long int*, int, bool)",13,0,88,0,0,0
"fm_op_kernel.cpp",71,"FmOpKernel::compute_pure(long int*, int, long int, long int, long int, long int, long int, bool, bool)",11,0,77,0,0,0
,0,"fold(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"foldBuffer(long int*, long int*, long int) (always inlined)",0,0,0,0,0,0
,0,"foldBufferPolyApproximation(long int*, long int*, long int) (always inlined)",0,0,0,0,0,0
"ff.c",3054,"follow_path(struct DIR*, const char*)",16,0,72,0,0,0
"follow_channel.h",43,"FollowChannel::drawInteger(const class FollowChannel*, long int, long int, long int)",16,0,133,0,0,0
"value.h",42,"FollowChannel::drawValue(const class FollowChannel*)",8,0,61,0,0,0
,0,"FollowChannel::FollowChannel(const class FollowChannel*, enum String, enum String, enum MIDIFollowChannelType) (always inlined)",0,0,0,0,0,0
"follow_channel.h",36,"FollowChannel::getMaxValue(const class FollowChannel*)",1,0,2,0,0,0
"value.h",35,"FollowChannel::learnCC(const class FollowChannel*, class MIDIDevice*, long int, long int, long int)",7,0,39,0,0,0
"value.h",35,"FollowChannel::learnNoteOn(const class FollowChannel*, class MIDIDevice*, long int, long int)",8,0,42,0,0,0
"value.h",35,"FollowChannel::readCurrentValue(const class FollowChannel*)",1,0,4,0,0,0
"follow_channel.h",104,"FollowChannel::selectEncoderAction(const class FollowChannel*, long int)",12,0,38,0,0,0
"value.h",35,"FollowChannel::unlearnAction(const class FollowChannel*)",7,0,41,0,0,0
"value.h",42,"FollowChannel::writeCurrentValue(const class FollowChannel*)",1,0,4,0,0,0
"menu_item.h",54,"FollowChannel::~FollowChannel(const class FollowChannel*)",1,0,1,0,0,0
"follow_channel.h",26,"FollowChannel::~FollowChannel(const class FollowChannel*)",2,0,6,0,0,0
,0,"FollowFeedbackAutomation::FollowFeedbackAutomation(const class FollowFeedbackAutomation*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"follow_feedback_automation.h",35,"FollowFeedbackAutomation::getOptions(const class FollowFeedbackAutomation*)",4,0,56,0,0,0
"follow_feedback_automation.h",29,"FollowFeedbackAutomation::readCurrentValue(const class FollowFeedbackAutomation*)",2,0,5,0,0,0
"value.h",45,"FollowFeedbackAutomation::writeCurrentValue(const class FollowFeedbackAutomation*)",1,0,5,0,0,0
"menu_item.h",54,"FollowFeedbackAutomation::~FollowFeedbackAutomation(const class FollowFeedbackAutomation*)",1,0,1,0,0,0
"follow_feedback_automation.h",26,"FollowFeedbackAutomation::~FollowFeedbackAutomation(const class FollowFeedbackAutomation*)",2,0,6,0,0,0
,0,"FollowFeedbackChannelType::FollowFeedbackChannelType(const class FollowFeedbackChannelType*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"follow_feedback_channel_type.h",35,"FollowFeedbackChannelType::getOptions(const class FollowFeedbackChannelType*)",4,0,56,0,0,0
"follow_feedback_channel_type.h",29,"FollowFeedbackChannelType::readCurrentValue(const class FollowFeedbackChannelType*)",2,0,5,0,0,0
"value.h",45,"FollowFeedbackChannelType::writeCurrentValue(const class FollowFeedbackChannelType*)",1,0,5,0,0,0
"menu_item.h",54,"FollowFeedbackChannelType::~FollowFeedbackChannelType(const class FollowFeedbackChannelType*)",1,0,1,0,0,0
"follow_feedback_channel_type.h",26,"FollowFeedbackChannelType::~FollowFeedbackChannelType(const class FollowFeedbackChannelType*)",2,0,6,0,0,0
,0,"FollowKitRootNote::FollowKitRootNote(const class FollowKitRootNote*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"follow_kit_root_note.h",33,"FollowKitRootNote::learnNoteOn(const class FollowKitRootNote*, class MIDIDevice*, long int, long int)",9,0,42,0,0,0
,0,"FollowKitRootNote::learnNoteOn(const class FollowKitRootNote*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
"follow_kit_root_note.h",27,"FollowKitRootNote::readCurrentValue(const class FollowKitRootNote*)",2,0,5,0,0,0
"value.h",42,"FollowKitRootNote::writeCurrentValue(const class FollowKitRootNote*)",1,0,5,0,0,0
"menu_item.h",54,"FollowKitRootNote::~FollowKitRootNote(const class FollowKitRootNote*)",1,0,1,0,0,0
"follow_kit_root_note.h",24,"FollowKitRootNote::~FollowKitRootNote(const class FollowKitRootNote*)",2,0,6,0,0,0
"formatted_title.h",13,"FormattedTitle::format(const class FormattedTitle*, long int)",9,0,105,0,0,0
,0,"FormattedTitle::FormattedTitle(const class FormattedTitle*, enum String) (always inlined)",0,0,0,0,0,0
,0,"FormattedTitle::title(const class FormattedTitle*) (always inlined)",0,0,0,0,0,0
,0,"FormattedTitle::~FormattedTitle(const class FormattedTitle*) (always inlined)",0,0,0,0,0,0
"freeverb.cpp",29,"Freeverb::Freeverb(const class Freeverb*)",18,0,191,0,0,0
"freeverb.hpp",53,"Freeverb::getDamping(const class Freeverb*)",1,0,5,0,0,0
"freeverb.hpp",46,"Freeverb::getRoomSize(const class Freeverb*)",1,0,7,0,0,0
"freeverb.hpp",71,"Freeverb::getWidth(const class Freeverb*)",1,0,2,0,0,0
"freeverb.cpp",76,"Freeverb::mute(const class Freeverb*)",4,0,36,0,0,0
"freeverb.hpp",100,"Freeverb::process(const class Freeverb*, class span<long int, 4294967295>, class span<StereoSample, 4294967295>)",19,0,144,0,0,0
,0,"Freeverb::ProcessOne(const class Freeverb*, long int, struct StereoSample&) (always inlined)",0,0,0,0,0,0
"freeverb.hpp",49,"Freeverb::setDamping(const class Freeverb*, float)",2,0,4,0,0,0
,0,"Freeverb::setDamping(const class Freeverb*, float) (always inlined)",0,0,0,0,0,0
,0,"Freeverb::setDry(const class Freeverb*, float) (always inlined)",0,0,0,0,0,0
"freeverb.hpp",42,"Freeverb::setRoomSize(const class Freeverb*, float)",2,0,5,0,0,0
,0,"Freeverb::setRoomSize(const class Freeverb*, float) (always inlined)",0,0,0,0,0,0
,0,"Freeverb::setWet(const class Freeverb*, float) (always inlined)",0,0,0,0,0,0
"freeverb.hpp",67,"Freeverb::setWidth(const class Freeverb*, float)",2,0,2,0,0,0
,0,"Freeverb::setWidth(const class Freeverb*, float) (always inlined)",0,0,0,0,0,0
"freeverb.cpp",89,"Freeverb::update(const class Freeverb*)",7,0,43,0,0,0
"freeverb.hpp",37,"Freeverb::~Freeverb(const class Freeverb*)",2,0,7,0,0,0
"base.hpp",9,"Freeverb::~Freeverb(const class Freeverb*)",1,0,1,0,0,0
"display.cpp",104,"freezeWithError(const char*)",1,1,7,7,5,35
,0,"freq_lut_init(long int*, double) (always inlined)",0,0,0,0,0,0
"math_lut.cpp",108,"Freqlut::lookup(long int)",2,0,17,0,0,0
,0,"fresultToDelugeErrorCode(enum FRESULT) (always inlined)",0,0,0,0,0,0
,0,"from_chars<unsigned char>(const char*, const char*, unsigned char&, int) (always inlined)",0,0,0,0,0,0
,0,"fromXY(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"function<long int(PIC::Response)>::function<deluge_main()::<lambda(auto:62)> >(const class function<long int(PIC::Response)>*, struct) (always inlined)",0,0,0,0,0,0
,0,"function<long int(PIC::Response)>::~function(const class function<long int(PIC::Response)>*) (always inlined)",0,0,0,0,0,0
,0,"functionsInit() (always inlined)",0,0,0,0,0,0
,0,"FxEngine::Advance(const class FxEngine*) (always inlined)",0,0,0,0,0,0
,0,"FxEngine::at(const class FxEngine*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"FxEngine::ConstructTopology(class FxEngine&, class initializer_list<deluge::dsp::reverb::FxEngine::DelayLine*>) (always inlined)",0,0,0,0,0,0
,0,"FxEngine::FxEngine(const class FxEngine*, class span<float, 4294967295>, class initializer_list<float>) (always inlined)",0,0,0,0,0,0
,0,"FxEngine::LFO(const class FxEngine*, enum LFOIndex) (always inlined)",0,0,0,0,0,0
,0,"FxEngine::StepLFO(const class FxEngine*) (always inlined)",0,0,0,0,0,0
,0,"fxTypeToString(enum ModFXType) (always inlined)",0,0,0,0,0,0
,0,"Gate::Gate(const class Gate*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"gate.h",37,"Gate::isRelevant(const class Gate*, class ModControllableAudio*, long int)",1,0,3,0,0,0
"gate.h",28,"Gate::readCurrentValue(const class Gate*)",2,0,10,0,0,0
"gate.h",33,"Gate::writeCurrentValue(const class Gate*)",2,0,10,0,0,0
"menu_item.h",54,"Gate::~Gate(const class Gate*)",1,0,1,0,0,0
"gate.h",24,"Gate::~Gate(const class Gate*)",2,0,6,0,0,0
,0,"GateDrum::GateDrum(const class GateDrum*) (always inlined)",0,0,0,0,0,0
"gate_drum.cpp",67,"GateDrum::getName(const class GateDrum*, char*)",2,0,9,0,0,0
"gate_drum.cpp",72,"GateDrum::getNumChannels(const class GateDrum*)",1,0,2,0,0,0
"gate_drum.cpp",34,"GateDrum::noteOff(const class GateDrum*, class ModelStackWithThreeMainThings*, long int)",2,0,10,0,0,0
"gate_drum.cpp",29,"GateDrum::noteOn(const class GateDrum*, class ModelStackWithThreeMainThings*, unsigned char, class Kit*, const short int*, long int, long unsigned int, long int, long unsigned int)",2,0,10,0,0,0
"gate_drum.cpp",56,"GateDrum::readFromFile(const class GateDrum*, class Deserializer&, class Song*, class Clip*, long int)",4,0,31,0,0,0
"gate_drum.cpp",39,"GateDrum::writeToFile(const class GateDrum*, class Serializer&, bool, class ParamManager*)",8,0,47,0,0,0
"gate_drum.h",28,"GateDrum::~GateDrum(const class GateDrum*)",2,0,6,0,0,0
"drum.h",46,"GateDrum::~GateDrum(const class GateDrum*)",1,0,1,0,0,0
,0,"gen_numname(unsigned char*, const unsigned char*, const short unsigned int*, unsigned int) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.cpp",109,"GeneralMemoryAllocator::alloc(long unsigned int, bool, bool, void*, const class GeneralMemoryAllocator*)",18,0,59,0,0,0
"general_memory_allocator.cpp",86,"GeneralMemoryAllocator::allocExternal(long unsigned int, const class GeneralMemoryAllocator*)",7,0,16,0,0,0
,0,"GeneralMemoryAllocator::allocLowSpeed(const class GeneralMemoryAllocator*, long unsigned int, void*) (always inlined)",0,0,0,0,0,0
,0,"GeneralMemoryAllocator::allocMaxSpeed(const class GeneralMemoryAllocator*, long unsigned int, void*) (always inlined)",0,0,0,0,0,0
,0,"GeneralMemoryAllocator::allocStealable(const class GeneralMemoryAllocator*, long unsigned int, void*) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.cpp",58,"GeneralMemoryAllocator::checkStack(const class GeneralMemoryAllocator*, const char*)",7,1,49,12,182,2186
,0,"GeneralMemoryAllocator::checkStack(const class GeneralMemoryAllocator*, const char*) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.cpp",214,"GeneralMemoryAllocator::dealloc(void*, const class GeneralMemoryAllocator*)",3,0,10,0,0,0
,0,"GeneralMemoryAllocator::deallocExternal(const class GeneralMemoryAllocator*, void*) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.cpp",193,"GeneralMemoryAllocator::extend(void*, long unsigned int, long unsigned int, long unsigned int* restrict, long unsigned int* restrict, void*, const class GeneralMemoryAllocator*)",44,0,242,0,0,0
"general_memory_allocator.cpp",34,"GeneralMemoryAllocator::GeneralMemoryAllocator(const class GeneralMemoryAllocator*)",10,0,68,0,0,0
"general_memory_allocator.h",99,"GeneralMemoryAllocator::get()",3,0,12,0,0,0
,0,"GeneralMemoryAllocator::get() (always inlined)",0,0,0,0,0,0
,0,"GeneralMemoryAllocator::getAllocatedSize(const class GeneralMemoryAllocator*, void*) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.cpp",166,"GeneralMemoryAllocator::getRegion(void*, const class GeneralMemoryAllocator*)",9,0,35,0,0,0
,0,"GeneralMemoryAllocator::putStealableInAppropriateQueue(const class GeneralMemoryAllocator*, class Stealable*) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.cpp",218,"GeneralMemoryAllocator::putStealableInQueue(class Stealable*, enum StealableQueue, const class GeneralMemoryAllocator*)",11,0,22,0,0,0
"general_memory_allocator.cpp",188,"GeneralMemoryAllocator::shortenLeft(void*, long unsigned int, long unsigned int, const class GeneralMemoryAllocator*)",19,0,55,0,0,0
"general_memory_allocator.cpp",183,"GeneralMemoryAllocator::shortenRight(void*, long unsigned int, const class GeneralMemoryAllocator*)",16,0,42,0,0,0
,0,"GeneralMemoryAllocator::~GeneralMemoryAllocator(const class GeneralMemoryAllocator*, const int) (always inlined)",0,0,0,0,0,0
"l10n.cpp",30,"get(enum String)",3,0,11,0,0,0
,0,"get<0, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>(class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"get<1, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>(class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"get<1>(float[2]) (always inlined)",0,0,0,0,0,0
,0,"get<__vector(2) float>(float[2], const int) (always inlined)",0,0,0,0,0,0
,0,"get<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>(class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"get<deluge::dsp::reverb::Mutable, deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>(class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>&) (always inlined)",0,0,0,0,0,0
,0,"get_eit_entry",0,0,63,0,0,0
,0,"get_fat(struct FFOBJID*, long unsigned int) (always inlined)",0,0,0,0,0,0
"ff.c",1153,"get_fat_from_fs(struct FATFS*, long unsigned int)",15,0,66,0,0,0
,0,"get_fat_from_fs(struct FATFS*, long unsigned int) (always inlined)",0,0,0,0,0,0
"ff.c",2636,"get_fileinfo(struct DIR*, struct FILINFO*)",34,0,143,0,0,0
"ff.c",3147,"get_ldnumber(const char**)",6,0,26,0,0,0
,0,"getBipolarBrightnessOutputValue(long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"getBrightnessOutputValue(long int, long int, long int) (always inlined)",0,0,0,0,0,0
"functions.cpp",1571,"getComparativeNoteNumberFromChars(const char*, char, bool)",20,0,63,0,0,0
"fft_config_manager.cpp",27,"getConfig(long int)",4,0,16,0,0,0
"song.cpp",244,"getCurrentAudioClip()",2,0,9,0,0,0
,0,"getCurrentClip() (always inlined)",0,0,0,0,0,0
"dx.cpp",31,"getCurrentDxPatch()",4,0,15,0,0,0
"song.cpp",244,"getCurrentInstrument()",4,0,13,0,0,0
"song.cpp",244,"getCurrentInstrumentClip()",2,0,9,0,0,0
"song.cpp",95,"getCurrentKit()",1,0,10,0,0,0
,0,"getCurrentMultisampleRange() (always inlined)",0,0,0,0,0,0
"song.cpp",244,"getCurrentOutput()",1,0,6,0,0,0
"song.cpp",244,"getCurrentOutputType()",1,0,7,0,0,0
"song.cpp",244,"getCurrentSampleControls()",3,0,15,0,0,0
,0,"getCurrentSampleHolder() (always inlined)",0,0,0,0,0,0
"ui.cpp",129,"getCurrentUI()",3,3,13,13,23,184
,0,"getCurrentUI() (always inlined)",0,0,0,0,0,0
,0,"getDecay4(long unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"getDecay8(long unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
"engine.cpp",84,"getDxEngine()",8,0,30,0,0,0
"display.cpp",12,"getErrorMessage(enum Error)",23,0,73,0,0,0
"functions.cpp",520,"getExp(long int, long int)",7,5,61,25,25,449
"functions.cpp",2075,"getFileNameFromEndOfPath(const char*)",2,0,9,0,0,0
,0,"getFinalParameterValueExp(long int, long int) (always inlined)",0,0,0,0,0,0
"functions.cpp",234,"getFinalParameterValueExpWithDumbEnvelopeHack(long int, long int, long int)",7,0,15,0,0,0
,0,"getFinalParameterValueHybrid(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"getFinalParameterValueLinear(long int, long int) (always inlined)",0,0,0,0,0,0
"functions.cpp",182,"getFinalParameterValueVolume(long int, long int)",4,4,8,8,25,200
"functions.cpp",1271,"getInstrumentFolder(enum OutputType)",3,0,18,0,0,0
,0,"getInstrumentFolder(enum OutputType) (always inlined)",0,0,0,0,0,0
"wave_table.cpp",1036,"getKernel(long int, long int)",3,0,35,0,0,0
"indicator_leds.cpp",161,"getLedBlinkerIndex(enum LED)",1,0,16,0,0,0
,0,"getLFOInitialPhaseForNegativeExtreme(enum LFOType) (always inlined)",0,0,0,0,0,0
,0,"getLFOInitialPhaseForZero(enum LFOType) (always inlined)",0,0,0,0,0,0
,0,"getLookupIndexFromValue(long int, const long int*, long int) (always inlined)",0,0,0,0,0,0
,0,"getMagnitude(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getMagnitudeOld(long unsigned int) (always inlined)",0,0,0,0,0,0
"audio_engine.cpp",1529,"getNewRecorder(long int, enum AudioRecordingFolder, enum AudioInputChannel, bool, long int, bool)",94,0,313,0,0,0
"storage_manager.cpp",1478,"getNibble(char, int*)",5,0,24,0,0,0
,0,"getNoise() (always inlined)",0,0,0,0,0,0
"functions.cpp",2010,"getNoteLengthNameFromMagnitude(class StringBuf&, long int, const char*, bool)",18,0,168,0,0,0
"audio_engine.cpp",366,"getNumAudio()",1,0,6,0,0,0
,0,"getNumDecimalDigits(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getNumSamplesLeftToOutputFromPreviousRender() (always inlined)",0,0,0,0,0,0
,0,"getNumTimesIncorrectSampleOrderSeen(long int, class Sample**) (always inlined)",0,0,0,0,0,0
,0,"getNumVoices() (always inlined)",0,0,0,0,0,0
"midi_device_manager.cpp",106,"getOrCreateHostedMIDIDeviceFromDetails(class String*, short unsigned int, short unsigned int)",33,0,211,0,0,0
,0,"getOrCreateLiveInputBuffer(enum OscType, bool) (always inlined)",0,0,0,0,0,0
,0,"getOscInitialPhaseForZero(enum OscType) (always inlined)",0,0,0,0,0,0
"param.cpp",188,"getParamDisplayName(enum Kind, long int)",9,0,34,0,0,0
,0,"getParamDisplayName(enum Kind, long int) (always inlined)",0,0,0,0,0,0
,0,"getParamRange(long int) (always inlined)",0,0,0,0,0,0
"param.cpp",177,"getPatchedParamDisplayName(long int)",3,0,9,0,0,0
,0,"getPatchedParamDisplayName(long int) (always inlined)",0,0,0,0,0,0
,0,"getPatchedParamShortName(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"getPeakIndexFloat(long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"getPreviousKnobPos(long int, class MIDIKnob*, bool, long int) (always inlined)",0,0,0,0,0,0
,0,"getRandom255() (always inlined)",0,0,0,0,0,0
"audio_engine.cpp",1276,"getReverbParamsFromSong(class Song*)",14,0,45,0,0,0
"ui.cpp",138,"getRootUI()",2,0,8,4,32,158
,0,"getRootUI() (always inlined)",0,0,0,0,0,0
,0,"getRxBufferCurrentPlace() (always inlined)",0,0,0,0,0,0
,0,"getRxBufferEnd() (always inlined)",0,0,0,0,0,0
,0,"getRxBufferStart() (always inlined)",0,0,0,0,0,0
,0,"getSample() (always inlined)",0,0,0,0,0,0
,0,"getSine(long unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"getSineVector(long unsigned int*, long unsigned int) (always inlined)",0,0,0,0,0,0
"menus.cpp",1182,"getSongMidiLoopback()",1,0,5,0,0,0
"functions.cpp",310,"getSourceDisplayNameForOLED(enum PatchSource)",12,0,28,0,0,0
,0,"getSpecificMidiDeviceType(short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getSquare(long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getSquareSmall(long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getTableNumber(long unsigned int, long int*, long int*) (always inlined)",0,0,0,0,0,0
,0,"getTagNameFromMIDIMessageType(long int) (always inlined)",0,0,0,0,0,0
,0,"getTanH<23>(long int) (always inlined)",0,0,0,0,0,0
,0,"getTanHAntialiased(long int, long unsigned int*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getTanHUnknown(long int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getThingName(enum OutputType) (always inlined)",0,0,0,0,0,0
,0,"getTimerValue(int) (always inlined)",0,0,0,0,0,0
,0,"getTimerValueSeconds(int) (always inlined)",0,0,0,0,0,0
,0,"getTotalChange(long int*, long int*) (always inlined)",0,0,0,0,0,0
,0,"getTotalDifferenceAbs(long int*, long int*) (always inlined)",0,0,0,0,0,0
,0,"getTransitionProgress() (always inlined)",0,0,0,0,0,0
,0,"getTriangle(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getTriangleSmall(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"getTxBufferCurrentPlace() (always inlined)",0,0,0,0,0,0
,0,"getTxBufferEnd() (always inlined)",0,0,0,0,0,0
,0,"getTxBufferStart() (always inlined)",0,0,0,0,0,0
,0,"getUIGreyoutColsAndRows() (always inlined)",0,0,0,0,0,0
,0,"getUIUpOneLevel() (always inlined)",0,0,0,0,0,0
"ui.cpp",164,"getUIUpOneLevel(long int)",2,0,13,0,0,0
"l10n.cpp",8,"getView(const class Language&, enum String)",6,0,46,0,0,0
"l10n.cpp",22,"getView(enum String)",1,0,9,0,0,0
,0,"getView(enum String) (always inlined)",0,0,0,0,0,0
"functions.cpp",1928,"getWhichKernel(long int)",6,0,27,0,0,0
,0,"getWhichKernel(long int) (always inlined)",0,0,0,0,0,0
,0,"giveDetailsOfDeviceBeingSetUp(long int, const char*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"global_effectable.cpp",54,"GlobalEffectable::cloneFrom(const class GlobalEffectable*, class ModControllableAudio*)",3,0,9,0,0,0
"param_manager.h",99,"GlobalEffectable::compensateVolumeForResonance(class ParamManagerForTimeline*, const class GlobalEffectable*)",13,0,73,0,0,0
"global_effectable.cpp",1112,"GlobalEffectable::createDelayWorkingState(const class GlobalEffectable*, class ParamManager&, bool, bool)",13,8,49,34,5,164
"global_effectable.cpp",128,"GlobalEffectable::displayCompressorAndReverbSettings(const class GlobalEffectable*, bool)",16,0,146,0,0,0
"global_effectable.cpp",176,"GlobalEffectable::displayModFXSettings(const class GlobalEffectable*, bool)",13,0,92,0,0,0
"global_effectable.cpp",732,"GlobalEffectable::ensureModFXParamIsValid(const class GlobalEffectable*)",7,0,52,0,0,0
"global_effectable.cpp",1095,"GlobalEffectable::getActiveModFXType(const class GlobalEffectable*, class ParamManager*)",7,2,42,13,6,74
,0,"GlobalEffectable::getCompressorModeDisplayName(const class GlobalEffectable*) (always inlined)",0,0,0,0,0,0
"global_effectable.cpp",170,"GlobalEffectable::getCompressorParamDisplayName(const class GlobalEffectable*)",3,0,17,0,0,0
"global_effectable.cpp",497,"GlobalEffectable::getKnobPosForNonExistentParam(const class GlobalEffectable*, long int, class ModelStackWithAutoParam*)",10,0,34,0,0,0
"global_effectable.cpp",229,"GlobalEffectable::getModFXParamDisplayName(const class GlobalEffectable*)",6,0,21,0,0,0
,0,"GlobalEffectable::getModFXParamDisplayName(const class GlobalEffectable*) (always inlined)",0,0,0,0,0,0
"global_effectable.cpp",729,"GlobalEffectable::getModFXType(const class GlobalEffectable*)",1,0,2,0,0,0
"array",200,"GlobalEffectable::getModFXTypeDisplayName(const class GlobalEffectable*)",9,0,35,0,0,0
"global_effectable.cpp",628,"GlobalEffectable::getParameterFromKnob(const class GlobalEffectable*, long int)",14,0,70,0,0,0
"global_effectable.cpp",712,"GlobalEffectable::getParamFromModEncoder(const class GlobalEffectable*, long int, class ModelStackWithThreeMainThings*, bool)",10,0,39,0,0,0
"global_effectable.cpp",38,"GlobalEffectable::GlobalEffectable(const class GlobalEffectable*)",11,0,26,0,0,0
"global_effectable.cpp",61,"GlobalEffectable::initParams(class ParamManager*)",5,0,40,0,0,0
,0,"GlobalEffectable::initParamsForAudioClip(class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
"global_effectable.h",57,"GlobalEffectable::isEditingComp(const class GlobalEffectable*)",1,0,2,0,0,0
"global_effectable.cpp",97,"GlobalEffectable::modButtonAction(const class GlobalEffectable*, unsigned char, bool, class ParamManagerForTimeline*)",8,0,40,0,0,0
"global_effectable.cpp",532,"GlobalEffectable::modEncoderActionForNonExistentParam(const class GlobalEffectable*, long int, long int, class ModelStackWithAutoParam*)",41,0,300,0,0,0
"global_effectable.cpp",248,"GlobalEffectable::modEncoderButtonAction(const class GlobalEffectable*, unsigned char, bool, class ModelStackWithThreeMainThings*)",75,0,434,0,0,0
,0,"GlobalEffectable::processFilters(const class GlobalEffectable*, struct StereoSample*, long int) (always inlined)",0,0,0,0,0,0
"global_effectable.cpp",1137,"GlobalEffectable::processFXForGlobalEffectable(const class GlobalEffectable*, struct StereoSample*, long int, long int*, class ParamManager*, const struct State&, bool)",39,6,178,50,5,251
"global_effectable.cpp",888,"GlobalEffectable::readParamsFromFile(class Deserializer&, class ParamManagerForTimeline*, long int)",69,0,541,0,0,0
"global_effectable.cpp",1037,"GlobalEffectable::readTagFromFile(const class GlobalEffectable*, class Deserializer&, const char*, class ParamManagerForTimeline*, long int, class Song*)",21,0,140,0,0,0
"global_effectable.cpp",757,"GlobalEffectable::setupFilterSetConfig(const class GlobalEffectable*, long int*, class ParamManager*)",11,4,105,81,5,933
"global_effectable.cpp",797,"GlobalEffectable::writeAttributesToFile(const class GlobalEffectable*, class Serializer&, bool)",5,0,46,0,0,0
"global_effectable.cpp",819,"GlobalEffectable::writeParamAttributesToFile(class Serializer&, class ParamManager*, bool, long int*)",17,0,132,0,0,0
"global_effectable.cpp",858,"GlobalEffectable::writeParamTagsToFile(class Serializer&, class ParamManager*, bool, long int*)",16,0,107,0,0,0
"global_effectable.cpp",805,"GlobalEffectable::writeTagsToFile(const class GlobalEffectable*, class Serializer&, class ParamManager*, bool)",8,0,45,0,0,0
,0,"GlobalEffectable::writeTagsToFile(const class GlobalEffectable*, class Serializer&, class ParamManager*, bool) (always inlined)",0,0,0,0,0,0
"global_effectable.h",25,"GlobalEffectable::~GlobalEffectable(const class GlobalEffectable*)",1,0,11,0,0,0
"global_effectable.h",25,"GlobalEffectable::~GlobalEffectable(const class GlobalEffectable*)",1,0,7,0,0,0
,0,"GlobalEffectable::~GlobalEffectable(const class GlobalEffectable*) (always inlined)",0,0,0,0,0,0
"global_effectable_for_clip.cpp",218,"GlobalEffectableForClip::getParameterFromKnob(const class GlobalEffectableForClip*, long int)",4,0,26,0,0,0
,0,"GlobalEffectableForClip::getSidechainVolumeAmountAsPatchCableDepth(const class GlobalEffectableForClip*, class ParamManager*) (always inlined)",0,0,0,0,0,0
"global_effectable_for_clip.cpp",299,"GlobalEffectableForClip::getThingWithMostReverb(const class GlobalEffectableForClip*, class Clip*, class Sound**, class ParamManager**, class GlobalEffectableForClip**, long int*)",11,0,35,0,0,0
,0,"GlobalEffectableForClip::GlobalEffectableForClip(const class GlobalEffectableForClip*) (always inlined)",0,0,0,0,0,0
"global_effectable_for_clip.cpp",231,"GlobalEffectableForClip::modButtonAction(const class GlobalEffectableForClip*, unsigned char, bool, class ParamManagerForTimeline*)",3,0,5,0,0,0
"global_effectable_for_clip.cpp",242,"GlobalEffectableForClip::modEncoderButtonAction(const class GlobalEffectableForClip*, unsigned char, bool, class ModelStackWithThreeMainThings*)",19,0,91,0,0,0
"global_effectable_for_clip.cpp",56,"GlobalEffectableForClip::renderOutput(const class GlobalEffectableForClip*, class ModelStackWithTimelineCounter*, class ParamManager*, struct StereoSample*, long int, long int*, long int, long int, bool, bool, enum OutputType)",60,0,437,0,0,0
"global_effectable_for_clip.h",46,"GlobalEffectableForClip::saturate(long int*, long unsigned int*, const class GlobalEffectableForClip*)",42,0,91,0,0,0
,0,"GlobalEffectableForClip::~GlobalEffectableForClip(const class GlobalEffectableForClip*) (always inlined)",0,0,0,0,0,0
"global_effectable_for_song.h",26,"GlobalEffectableForSong::getModKnobMode(const class GlobalEffectableForSong*)",1,0,2,0,0,0
,0,"GlobalEffectableForSong::GlobalEffectableForSong(const class GlobalEffectableForSong*) (always inlined)",0,0,0,0,0,0
"global_effectable_for_song.h",22,"GlobalEffectableForSong::~GlobalEffectableForSong(const class GlobalEffectableForSong*)",2,0,7,0,0,0
"global_effectable_for_song.h",22,"GlobalEffectableForSong::~GlobalEffectableForSong(const class GlobalEffectableForSong*)",2,0,11,0,0,0
,0,"GlobalEffectableForSong::~GlobalEffectableForSong(const class GlobalEffectableForSong*) (always inlined)",0,0,0,0,0,0
,0,"halfByteToHexChar(unsigned char) (always inlined)",0,0,0,0,0,0
"fault_handler.c",254,"handle_cpu_fault(long unsigned int, long unsigned int, long unsigned int, long unsigned int)",31,0,613,0,0,0
,0,"hash(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hexCharToHalfByte(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"hexToByte(const char*) (always inlined)",0,0,0,0,0,0
,0,"hexToInt(const char*) (always inlined)",0,0,0,0,0,0
"d_string.cpp",366,"hexToIntFixedLength(const char* restrict, long int)",5,0,17,0,0,0
"r_usb_hmidi_driver.c",787,"hmidi_configured(struct usb_utr*, short unsigned int, short unsigned int)",21,0,179,0,0,0
"r_usb_hmidi_driver.c",823,"hmidi_detach(struct usb_utr*, short unsigned int, short unsigned int)",4,0,63,0,0,0
"r_usb_hmidi_driver.c",846,"hmidi_resume_complete",1,0,1,0,0,0
"hold_time.h",34,"HoldTime::getDisplayValue(const class HoldTime*)",2,0,10,0,0,0
"hold_time.h",27,"HoldTime::getMaxValue(const class HoldTime*)",1,0,2,0,0,0
"hold_time.h",43,"HoldTime::getUnit(const class HoldTime*)",1,0,11,0,0,0
,0,"HoldTime::HoldTime(const class HoldTime*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"hold_time.h",28,"HoldTime::readCurrentValue(const class HoldTime*)",2,0,5,0,0,0
"value.h",42,"HoldTime::writeCurrentValue(const class HoldTime*)",2,0,11,0,0,0
"menu_item.h",54,"HoldTime::~HoldTime(const class HoldTime*)",1,0,1,0,0,0
"hold_time.h",23,"HoldTime::~HoldTime(const class HoldTime*)",2,0,6,0,0,0
,0,"hostedDeviceConfigured(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"hostedDeviceDetached(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"howMuchMoreMagnitude(long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"HPF::HPF(const class HPF*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"reverb.hpp",41,"HPF::isRelevant(const class HPF*, class ModControllableAudio*, long int)",1,0,7,0,0,0
"hpf.h",30,"HPF::readCurrentValue(const class HPF*)",3,0,13,0,0,0
"value.h",42,"HPF::writeCurrentValue(const class HPF*)",3,0,10,0,0,0
"menu_item.h",54,"HPF::~HPF(const class HPF*)",1,0,1,0,0,0
"hpf.h",27,"HPF::~HPF(const class HPF*)",2,0,6,0,0,0
"hpf_freq.h",30,"HPFFreq::drawValue(const class HPFFreq*)",9,0,64,0,0,0
,0,"HPFFreq::HPFFreq(const class HPFFreq*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"menu_item.h",54,"HPFFreq::~HPFFreq(const class HPFFreq*)",1,0,1,0,0,0
"hpf_freq.h",24,"HPFFreq::~HPFFreq(const class HPFFreq*)",2,0,6,0,0,0
"hpf_mode.h",38,"HPFMode::getOptions(const class HPFMode*)",4,0,51,0,0,0
,0,"HPFMode::HPFMode(const class HPFMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"hpf_mode.h",46,"HPFMode::isRelevant(const class HPFMode*, class ModControllableAudio*, long int)",1,0,8,0,0,0
"hpf_mode.h",31,"HPFMode::readCurrentValue(const class HPFMode*)",2,0,7,0,0,0
"value.h",42,"HPFMode::writeCurrentValue(const class HPFMode*)",1,0,7,0,0,0
"menu_item.h",54,"HPFMode::~HPFMode(const class HPFMode*)",1,0,1,0,0,0
"hpf_mode.h",27,"HPFMode::~HPFMode(const class HPFMode*)",2,0,6,0,0,0
"hpladder.cpp",70,"HpLadderFilter::doFilter(const class HpLadderFilter*, long int*, long int*, long int)",18,0,125,0,0,0
"hpladder.cpp",78,"HpLadderFilter::doFilterStereo(const class HpLadderFilter*, long int*, long int*)",19,0,230,0,0,0
,0,"HpLadderFilter::doHPF(const class HpLadderFilter*, long int, struct HPLadderState&) (always inlined)",0,0,0,0,0,0
,0,"HpLadderFilter::resetFilter(const class HpLadderFilter*) (always inlined)",0,0,0,0,0,0
"hpladder.cpp",24,"HpLadderFilter::setConfig(const class HpLadderFilter*, long int, long int, enum FilterMode, long int, long int)",6,0,80,0,0,0
,0,"hw_usb_clear_aclrm(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_bempenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_brdyenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_dcfm(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_dvstctr(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_enb_sofe(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_enb_vbse(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_hse(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_nrdyenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",2375,"hw_usb_clear_pid(struct usb_utr*, short unsigned int, short unsigned int)",12,0,37,0,0,0
,0,"hw_usb_clear_pid(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_status_bemp(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_status_nrdy(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_sts_brdy(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_suspm() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_clear_trenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",1162,"hw_usb_get_fifoctr_adr(struct usb_utr*, short unsigned int)",9,0,15,0,0,0
,0,"hw_usb_get_fifoctr_adr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_get_fifosel_adr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_enb_attche(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_enb_bchge(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_enb_dtche(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_sts_attch(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_sts_bchg(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_sts_dtch(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_sts_sack(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_sts_sign(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hclear_uact(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hmodule_init(struct usb_ctrl*) (always inlined)",0,0,0,0,0,0
"r_usb_hreg_access.c",523,"hw_usb_hread_devadd(struct usb_utr*, short unsigned int)",4,0,11,0,0,0
"r_usb_hreg_access.c",554,"hw_usb_hrmw_devadd(short unsigned int, short unsigned int, short unsigned int, struct usb_utr*)",6,0,10,0,0,0
,0,"hw_usb_hset_enb_attche(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_enb_bchge(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_enb_dtche(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_enb_sacke(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_enb_signe(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_rwupe(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_sureq(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_trnensel(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_usbindx(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_usbleng(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_usbspd(struct usb_utr*, short unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hset_usbval(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hwrite_dcpctr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_hwrite_usbreq(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_pclear_dprpu() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_pclear_enb_rsme() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_pclear_sts_resm() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_pclear_sts_valid() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_pmodule_init() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_pset_ccpl() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_pset_dprpu() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_pset_enb_rsme() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_dcpcfg(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_dcpctr() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_dcpmaxp(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_dvstctr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_fifo32(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_fifoctr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_fifosel(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_frmnum(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_intsts() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_pipecfg(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",2016,"hw_usb_read_pipectr(struct usb_utr*, short unsigned int)",7,0,22,0,0,0
,0,"hw_usb_read_pipectr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_pipemaxp(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_syscfg(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_syssts(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_usbindx() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_usbleng() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_usbreq() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_read_usbval() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_rmw_dvstctr(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_rmw_fifosel(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_aclrm(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_bclr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_bempenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_brdyenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_bval(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",2093,"hw_usb_set_csclr(struct usb_utr*, short unsigned int)",4,0,13,0,0,0
,0,"hw_usb_set_dcfm() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_hse(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_intenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",933,"hw_usb_set_mbw(struct usb_utr*, short unsigned int, short unsigned int)",11,0,33,0,0,0
,0,"hw_usb_set_mbw(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_nrdyenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",2311,"hw_usb_set_pid(struct usb_utr*, short unsigned int, short unsigned int)",13,0,49,0,0,0
,0,"hw_usb_set_pid_nonzero_pipe_rohan(short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",2195,"hw_usb_set_sqclr(short unsigned int, struct usb_utr*)",6,0,18,0,0,0
,0,"hw_usb_set_sqclr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",2191,"hw_usb_set_sqclr(struct usb_utr*, struct usb_utr*, short unsigned int)",7,0,22,0,0,0
"r_usb_creg_access.c",2255,"hw_usb_set_sqset(struct usb_utr*, short unsigned int)",11,0,38,0,0,0
,0,"hw_usb_set_sqset(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_suspendm() (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_trclr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_trenb(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_set_utst(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_dcpcfg(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_dcpmxps(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_fifo16(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_fifo32(struct usb_utr*, short unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_fifo8(struct usb_utr*, short unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_pipebuf(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_pipecfg(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_pipemaxp(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_pipeperi(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_pipesel(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"hw_usb_write_pipetrn(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"ImpulseResponseProcessor::ImpulseResponseProcessor(const class ImpulseResponseProcessor*) (always inlined)",0,0,0,0,0,0
,0,"ImpulseResponseProcessor::process(const class ImpulseResponseProcessor*, const struct StereoSample, struct StereoSample&) (always inlined)",0,0,0,0,0,0
,0,"increaseMagnitude(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"increaseMagnitudeAndSaturate(long int, long int) (always inlined)",0,0,0,0,0,0
"indicator_leds.cpp",170,"indicateAlertOnLed(enum LED)",1,0,4,0,0,0
,0,"infinite_a_lt_b(long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"init_engine() (always inlined)",0,0,0,0,0,0
"ttb_init.S",79,"init_TTB",82,81,82,81,1,20643
"dmac.c",35,"initDMAWithLinkDescriptor(long int, const long unsigned int*, long unsigned int)",4,0,23,0,0,0
,0,"initiateSelectingOled() (always inlined)",0,0,0,0,0,0
"initsct.S",56,"initsct",93,80,93,80,1,309552
,0,"initSPIBSC() (always inlined)",0,0,0,0,0,0
,0,"initUartDMA() (always inlined)",0,0,0,0,0,0
,0,"inputChannelToString(enum AudioInputChannel) (always inlined)",0,0,0,0,0,0
"rza_io_regrw.c",173,"inputRoutine()",43,13,194,91,1,109
"functions.cpp",1377,"instantTan(long int)",4,0,15,0,0,0
"instrument.cpp",47,"Instrument::beenEdited(const class Instrument*, bool)",1,0,3,0,0,0
,0,"Instrument::beenEdited(const class Instrument*, bool) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.h",99,"Instrument::createNewClipForArrangementRecording(const class Instrument*, class ModelStack*)",18,0,79,0,0,0
"instrument.h",55,"Instrument::doAnySoundsUseCC(const class Instrument*, unsigned char, unsigned char, unsigned char)",1,0,2,0,0,0
"instrument.h",72,"Instrument::getNameXMLTag(const class Instrument*)",1,0,3,0,0,0
"instrument.h",73,"Instrument::getSlotXMLTag(const class Instrument*)",1,0,3,0,0,0
"instrument.h",74,"Instrument::getSubSlotXMLTag(const class Instrument*)",1,0,3,0,0,0
"output.cpp",31,"Instrument::Instrument(const class Instrument*, enum OutputType)",15,0,33,0,0,0
"instrument.cpp",110,"Instrument::readTagFromFile(const class Instrument*, class Deserializer&, const char*)",22,0,107,0,0,0
"instrument.cpp",192,"Instrument::setupDefaultAudioFileDir(const class Instrument*)",4,0,21,0,0,0
,0,"Instrument::setupDefaultAudioFileDir(const class Instrument*) (always inlined)",0,0,0,0,0,0
"instrument.cpp",66,"Instrument::writeDataToFile(const class Instrument*, class Serializer&, class Clip*, class Song*)",22,0,113,0,0,0
,0,"Instrument::~Instrument(const class Instrument*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",4362,"InstrumentClip::abortRecording(const class InstrumentClip*)",1,0,3,0,0,0
"instrument_clip.cpp",3348,"InstrumentClip::allowNoteTails(const class InstrumentClip*, class ModelStackWithNoteRow*)",8,0,42,0,0,0
"instrument_clip.cpp",596,"InstrumentClip::appendClip(const class InstrumentClip*, class ModelStackWithTimelineCounter*, class ModelStackWithTimelineCounter*)",23,0,103,0,0,0
"instrument_clip.cpp",1950,"InstrumentClip::assignDrumsToNoteRows(const class InstrumentClip*, class ModelStackWithTimelineCounter*, bool, long int)",33,0,182,0,0,0
"instrument_clip.cpp",3606,"InstrumentClip::backupPresetSlot(const class InstrumentClip*)",7,0,28,0,0,0
"instrument_clip.cpp",439,"InstrumentClip::beginLinearRecording(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int)",30,0,144,0,0,0
"instrument_clip.cpp",1650,"InstrumentClip::changeInstrument(const class InstrumentClip*, class ModelStackWithTimelineCounter*, class Instrument*, class ParamManagerForTimeline*, enum InstrumentRemoval, class InstrumentClip*, bool, bool)",91,0,520,0,0,0
"instrument_clip.cpp",3743,"InstrumentClip::changeOutputType(const class InstrumentClip*, class ModelStackWithTimelineCounter*, enum OutputType)",47,0,367,0,0,0
"instrument_clip.cpp",3903,"InstrumentClip::claimOutput(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",106,0,571,0,0,0
"instrument_clip.cpp",3552,"InstrumentClip::clear(const class InstrumentClip*, class Action*, class ModelStackWithTimelineCounter*, bool)",22,0,110,0,0,0
"general_memory_allocator.h",99,"InstrumentClip::clone(const class InstrumentClip*, class ModelStackWithTimelineCounter*, bool)",67,0,352,0,0,0
"general_memory_allocator.h",99,"InstrumentClip::cloneAsNewOverdub(const class InstrumentClip*, class ModelStackWithTimelineCounter*, enum OverDubType)",22,0,107,0,0,0
"instrument_clip.cpp",4309,"InstrumentClip::cloneOutput(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",1,0,2,0,0,0
"resizeable_array.h",56,"InstrumentClip::containsAnyNotes(const class InstrumentClip*)",2,0,20,0,0,0
"instrument_clip.cpp",117,"InstrumentClip::copyBasicsFrom(const class InstrumentClip*, const class Clip*)",25,0,61,0,0,0
,0,"InstrumentClip::createNewNoteRowForKit(const class InstrumentClip*, class ModelStackWithTimelineCounter*, bool, long int*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::createNewNoteRowForYVisual(const class InstrumentClip*, long int, class Song*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",4344,"InstrumentClip::currentlyScrollableAndZoomable(const class InstrumentClip*)",1,0,16,0,0,0
,0,"InstrumentClip::deleteBackedUpParamManagerMIDI(const class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",1850,"InstrumentClip::deleteEmptyNoteRowsAtEitherEnd(const class InstrumentClip*, bool, class ModelStackWithTimelineCounter*, bool, bool)",23,0,172,0,0,0
"instrument_clip.cpp",3289,"InstrumentClip::deleteNoteRow(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int)",6,0,33,0,0,0
"resizeable_array.h",56,"InstrumentClip::deleteOldDrumNames(const class InstrumentClip*)",7,0,30,0,0,0
"instrument_clip.cpp",3227,"InstrumentClip::deleteSoundsWhichWontSound(const class InstrumentClip*, class Song*)",20,0,116,0,0,0
"instrument_clip.cpp",2175,"InstrumentClip::detachFromOutput(const class InstrumentClip*, class ModelStackWithTimelineCounter*, bool, bool, bool, bool, bool, bool)",45,0,221,0,0,0
"resizeable_array.h",56,"InstrumentClip::doesProbabilityExist(const class InstrumentClip*, long int, long int, long int)",5,0,47,0,0,0
,0,"InstrumentClip::duplicateModelStackForClipBeingRecordedFrom(const class InstrumentClip*, class ModelStackWithNoteRow*, char*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::ensureScrollWithinKitBounds(const class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",4396,"InstrumentClip::expectEvent(const class InstrumentClip*)",3,0,3,0,0,0
"instrument_clip.cpp",1145,"InstrumentClip::expectNoFurtherTicks(const class InstrumentClip*, class Song*, bool)",23,0,93,0,0,0
"instrument_clip.cpp",4162,"InstrumentClip::finishLinearRecording(const class InstrumentClip*, class ModelStackWithTimelineCounter*, class Clip*, long int)",32,0,168,0,0,0
"instrument_clip.cpp",4368,"InstrumentClip::getActiveModControllable(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",10,0,48,0,0,0
,0,"InstrumentClip::getBottomYNote(const class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",4358,"InstrumentClip::getCurrentlyRecordingLinearly(const class InstrumentClip*)",1,0,2,0,0,0
"instrument_clip.cpp",3881,"InstrumentClip::getCurrentParamManager(const class InstrumentClip*)",9,0,21,0,0,0
"instrument_clip.cpp",3406,"InstrumentClip::getDistanceToNextNote(const class InstrumentClip*, class Note*, class ModelStackWithNoteRow*)",9,0,59,0,0,0
"instrument_clip.cpp",1240,"InstrumentClip::getMainColourFromY(const class InstrumentClip*, long int, signed char)",1,0,12,0,0,0
,0,"InstrumentClip::getMainColourFromY(const class InstrumentClip*, long int, signed char) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",4695,"InstrumentClip::getMaxLength(const class InstrumentClip*)",4,0,19,0,0,0
"resizeable_array.h",56,"InstrumentClip::getNoteRowForDrum(const class InstrumentClip*, class Drum*, long int*)",5,0,24,0,0,0
"instrument_clip.cpp",1029,"InstrumentClip::getNoteRowForDrum(const class InstrumentClip*, class ModelStackWithTimelineCounter*, class Drum*)",3,0,13,0,0,0
,0,"InstrumentClip::getNoteRowForDrum(const class InstrumentClip*, class ModelStackWithTimelineCounter*, class Drum*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::getNoteRowForDrumName(const class InstrumentClip*, class ModelStackWithTimelineCounter*, const char*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",1018,"InstrumentClip::getNoteRowForSelectedDrum(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",5,0,22,0,0,0
"instrument_clip.cpp",989,"InstrumentClip::getNoteRowForYNote(const class InstrumentClip*, long int, class ModelStackWithTimelineCounter*)",5,0,17,0,0,0
"instrument_clip.cpp",999,"InstrumentClip::getNoteRowForYNote(const class InstrumentClip*, long int, long int*)",7,0,28,0,0,0
"instrument_clip.cpp",3440,"InstrumentClip::getNoteRowFromId(const class InstrumentClip*, long int)",8,0,33,0,0,0
,0,"InstrumentClip::getNoteRowFromId(const class InstrumentClip*, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",3427,"InstrumentClip::getNoteRowId(const class InstrumentClip*, class NoteRow*, long int)",4,0,20,0,0,0
"instrument_clip.cpp",958,"InstrumentClip::getNoteRowOnScreen(const class InstrumentClip*, long int, class ModelStackWithTimelineCounter*)",5,0,18,0,0,0
"instrument_clip.cpp",966,"InstrumentClip::getNoteRowOnScreen(const class InstrumentClip*, long int, class Song*, long int*)",9,0,30,0,0,0
,0,"InstrumentClip::getNoteRowOnScreen(const class InstrumentClip*, long int, class Song*, long int*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",1078,"InstrumentClip::getOrCreateNoteRowForYNote(const class InstrumentClip*, long int, class ModelStackWithTimelineCounter*, class Action*, bool*)",27,0,125,0,0,0
,0,"InstrumentClip::getScaleType(const class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",3862,"InstrumentClip::getSuggestedParamManager(const class InstrumentClip*, class Clip*, class ParamManagerForTimeline**, class Sound*)",8,0,33,0,0,0
,0,"InstrumentClip::getSuggestedParamManager(const class InstrumentClip*, class Clip*, class ParamManagerForTimeline**, class Sound*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"InstrumentClip::getTopYNote(const class InstrumentClip*)",2,0,10,0,0,0
,0,"InstrumentClip::getWrapEditLevel(const class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"instrument_clip.h",227,"InstrumentClip::getXMLTag(const class InstrumentClip*)",1,0,3,0,0,0
"instrument_clip.cpp",3735,"InstrumentClip::getYNoteFromYDisplay(const class InstrumentClip*, long int, class Song*)",1,0,7,0,0,0
,0,"InstrumentClip::getYNoteFromYDisplay(const class InstrumentClip*, long int, class Song*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",1465,"InstrumentClip::getYNoteFromYVisual(long int, class Song*, const class InstrumentClip*)",4,0,10,0,0,0
,0,"InstrumentClip::guessRootNote(const class InstrumentClip*, class Song*, long int) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::halveNoteRowsWithIndependentLength(const class InstrumentClip*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"InstrumentClip::hasAnyPitchExpressionAutomationOnNoteRows(const class InstrumentClip*)",3,0,24,0,0,0
"instrument_clip.cpp",216,"InstrumentClip::increaseLengthWithRepeats(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int, enum IndependentNoteRowLengthIncrease, bool, class Action*)",25,0,107,0,0,0
"instrument_clip.cpp",4719,"InstrumentClip::incrementPos(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int)",13,0,43,0,0,0
,0,"InstrumentClip::incrementPos(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",4402,"InstrumentClip::instrumentBeenEdited(const class InstrumentClip*)",1,0,5,0,0,0
"instrument_clip.cpp",54,"InstrumentClip::InstrumentClip(const class InstrumentClip*, class Song*)",19,0,127,0,0,0
"instrument_clip.cpp",4313,"InstrumentClip::isAbandonedOverdub(const class InstrumentClip*)",1,0,10,0,0,0
"instrument_clip.cpp",3717,"InstrumentClip::isEmpty(const class InstrumentClip*)",3,0,26,0,0,0
,0,"InstrumentClip::isEmpty(const class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",3342,"InstrumentClip::isScaleModeClip(const class InstrumentClip*)",1,0,9,0,0,0
,0,"InstrumentClip::isScaleModeClip(const class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",3669,"InstrumentClip::isScrollWithinRange(const class InstrumentClip*, long int, long int)",23,0,189,0,0,0
"instrument_clip.cpp",285,"InstrumentClip::lengthChanged(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int, class Action*)",10,0,51,0,0,0
,0,"InstrumentClip::noteRemovedFromMode(const class InstrumentClip*, long int, class Song*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",1328,"InstrumentClip::nudgeNotesVertically(const class InstrumentClip*, long int, class ModelStackWithTimelineCounter*)",21,0,146,0,0,0
"resizeable_array.h",56,"InstrumentClip::pingpongOccurred(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",6,0,34,0,0,0
"instrument_clip.cpp",653,"InstrumentClip::posReachedEnd(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",5,0,23,0,0,0
,0,"InstrumentClip::posReachedEnd(const class InstrumentClip*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::possiblyDeleteEmptyNoteRow(const class InstrumentClip*, class NoteRow*, bool, class Song*, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::prepareToEnterKitMode(const class InstrumentClip*, class Song*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::prepNoteRowsForExitingKitMode(const class InstrumentClip*, class Song*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",694,"InstrumentClip::processCurrentPos(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long unsigned int)",66,0,936,0,0,0
"instrument_clip.cpp",4320,"InstrumentClip::quantizeLengthForArrangementRecording(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int, long unsigned int, long int, long int)",10,0,36,0,0,0
"instrument_clip.cpp",2440,"InstrumentClip::readFromFile(const class InstrumentClip*, class Deserializer&, class Song*)",397,0,2290,0,0,0
,0,"InstrumentClip::readMIDIParamsFromFile(const class InstrumentClip*, class Deserializer&, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",4663,"InstrumentClip::recordNoteOff(const class InstrumentClip*, class ModelStackWithNoteRow*, long int)",36,0,184,0,0,0
"instrument_clip.cpp",4417,"InstrumentClip::recordNoteOn(const class InstrumentClip*, class ModelStackWithNoteRow*, long int, const short int*, long int, bool)",119,0,423,0,0,0
"clip.cpp",208,"InstrumentClip::reGetParameterAutomation(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",9,0,43,0,0,0
"instrument_clip.cpp",1405,"InstrumentClip::renderAsSingleRow(const class InstrumentClip*, class ModelStackWithTimelineCounter*, class TimelineView*, long int, long unsigned int, class RGB*, unsigned char*, bool, long int, long int, long int, long int, bool, bool)",24,0,250,0,0,0
"instrument_clip.h",252,"InstrumentClip::renderSidebar(const class InstrumentClip*, long unsigned int, class RGB[18]*, unsigned char[18]*)",1,0,3,0,0,0
,0,"InstrumentClip::repeatOrChopToExactLength(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::replaceMusicalMode(const class InstrumentClip*, unsigned char, signed char*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",2158,"InstrumentClip::restoreBackedUpParamManagerMIDI(const class InstrumentClip*, class ModelStackWithModControllable*)",3,0,18,0,0,0
,0,"InstrumentClip::restoreBackedUpParamManagerMIDI(const class InstrumentClip*, class ModelStackWithModControllable*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"InstrumentClip::resumePlayback(const class InstrumentClip*, class ModelStackWithTimelineCounter*, bool)",9,0,38,0,0,0
"instrument_clip.cpp",1282,"InstrumentClip::seeWhatNotesWithinOctaveArePresent(const class InstrumentClip*, class NoteSet&, long int, class Song*, bool)",11,0,47,0,0,0
"instrument_clip.cpp",3533,"InstrumentClip::sendMIDIPGM(const class InstrumentClip*)",9,0,56,0,0,0
,0,"InstrumentClip::sendPendingNoteOn(const class InstrumentClip*, class ModelStackWithTimelineCounter*, struct PendingNoteOn*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",2247,"InstrumentClip::setAudioInstrument(const class InstrumentClip*, class Instrument*, class Song*, bool, class ParamManager*, class InstrumentClip*)",13,0,40,0,0,0
,0,"InstrumentClip::setAudioInstrument(const class InstrumentClip*, class Instrument*, class Song*, bool, class ParamManager*, class InstrumentClip*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClip::setBackedUpParamManagerMIDI(const class InstrumentClip*, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",1593,"InstrumentClip::setInstrument(const class InstrumentClip*, class Instrument*, class Song*, class ParamManager*, class InstrumentClip*)",3,0,17,0,0,0
,0,"InstrumentClip::setInstrument(const class InstrumentClip*, class Instrument*, class Song*, class ParamManager*, class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",1563,"InstrumentClip::setNonAudioInstrument(const class InstrumentClip*, class Instrument*, class Song*, class ParamManager*)",14,0,54,0,0,0
"instrument_clip.cpp",380,"InstrumentClip::setPos(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int, bool)",21,0,108,0,0,0
"instrument_clip.cpp",516,"InstrumentClip::setPosForParamManagers(const class InstrumentClip*, class ModelStackWithTimelineCounter*, bool)",8,0,49,0,0,0
"instrument_clip.cpp",4350,"InstrumentClip::setupAsNewKitClipIfNecessary(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",4,0,18,0,0,0
"instrument_clip.cpp",3467,"InstrumentClip::shiftHorizontally(const class InstrumentClip*, class ModelStackWithTimelineCounter*, long int)",20,0,93,0,0,0
"instrument_clip.cpp",3516,"InstrumentClip::shiftOnlyOneNoteRowHorizontally(const class InstrumentClip*, class ModelStackWithNoteRow*, long int)",10,0,53,0,0,0
"instrument_clip.cpp",3303,"InstrumentClip::stopAllNotesForMIDIOrCV(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",10,0,64,0,0,0
"resizeable_array.h",56,"InstrumentClip::stopAllNotesPlaying(const class InstrumentClip*, class ModelStackWithTimelineCounter*, bool)",5,0,28,0,0,0
"instrument_clip.cpp",940,"InstrumentClip::toggleNoteRowMute(const class InstrumentClip*, class ModelStackWithNoteRow*)",13,0,67,0,0,0
"instrument_clip.cpp",554,"InstrumentClip::transferVoicesToOriginalClipFromThisClone(const class InstrumentClip*, class ModelStackWithTimelineCounter*, class ModelStackWithTimelineCounter*)",13,0,78,0,0,0
"instrument_clip.cpp",1305,"InstrumentClip::transpose(const class InstrumentClip*, long int, class ModelStackWithTimelineCounter*)",8,0,41,0,0,0
,0,"InstrumentClip::unassignAllNoteRowsFromDrums(const class InstrumentClip*, class ModelStackWithTimelineCounter*, bool, bool, bool, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",2216,"InstrumentClip::undoDetachmentFromOutput(const class InstrumentClip*, class ModelStackWithTimelineCounter*)",18,0,82,0,0,0
,0,"InstrumentClip::undoUnassignmentOfAllNoteRowsFromDrums(const class InstrumentClip*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",666,"InstrumentClip::wantsToBeginLinearRecording(const class InstrumentClip*, class Song*)",4,0,12,0,0,0
,0,"InstrumentClip::wantsToBeginLinearRecording(const class InstrumentClip*, class Song*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",2271,"InstrumentClip::writeDataToFile(const class InstrumentClip*, class Serializer&, class Song*)",149,0,961,0,0,0
,0,"InstrumentClip::yDisplayNoLongerAuditioning(const class InstrumentClip*, long int, class Song*) (always inlined)",0,0,0,0,0,0
"instrument_clip.cpp",102,"InstrumentClip::~InstrumentClip(const class InstrumentClip*)",2,0,8,0,0,0
"instrument_clip.cpp",102,"InstrumentClip::~InstrumentClip(const class InstrumentClip*)",5,0,46,0,0,0
"instrument_clip_minder.cpp",334,"InstrumentClipMinder::buttonAction(const class InstrumentClipMinder*, unsigned char, bool, bool)",58,0,319,0,0,0
,0,"InstrumentClipMinder::calculateDefaultRootNote(const class InstrumentClipMinder*) (always inlined)",0,0,0,0,0,0
"instrument_clip_minder.cpp",475,"InstrumentClipMinder::changeOutputType(const class InstrumentClipMinder*, enum OutputType)",7,0,20,0,0,0
"instrument_clip_minder.cpp",159,"InstrumentClipMinder::createNewInstrument(const class InstrumentClipMinder*, enum OutputType, bool)",78,0,394,0,0,0
"instrument_clip_minder.cpp",513,"InstrumentClipMinder::cycleThroughScales(const class InstrumentClipMinder*)",8,0,41,0,0,0
"instrument_clip_minder.cpp",557,"InstrumentClipMinder::displayCurrentScaleName(const class InstrumentClipMinder*)",1,0,7,0,0,0
,0,"InstrumentClipMinder::displayOrLanguageChanged(const class InstrumentClipMinder*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipMinder::displayScaleName(const class InstrumentClipMinder*, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip_minder.cpp",548,"InstrumentClipMinder::displayScaleName(long int, const class InstrumentClipMinder*)",5,0,35,0,0,0
"instrument_clip_minder.cpp",498,"InstrumentClipMinder::drawActualNoteCode(short int, const class InstrumentClipMinder*)",11,0,44,0,0,0
"instrument_clip_minder.cpp",117,"InstrumentClipMinder::drawMIDIControlNumber(long int, bool)",16,0,112,0,0,0
"instrument_clip_minder.cpp",323,"InstrumentClipMinder::focusRegained(const class InstrumentClipMinder*)",10,0,43,0,0,0
"instrument_clip_minder.cpp",562,"InstrumentClipMinder::makeCurrentClipActiveOnInstrumentIfPossible(class ModelStack*)",8,0,32,0,0,0
"display.h",93,"InstrumentClipMinder::redrawNumericDisplay()",2,0,16,0,0,0
"instrument_clip_minder.cpp",65,"InstrumentClipMinder::selectEncoderAction(const class InstrumentClipMinder*, long int)",58,0,323,0,0,0
"instrument_clip_minder.cpp",298,"InstrumentClipMinder::setLedStates(const class InstrumentClipMinder*)",12,0,51,0,0,0
,0,"InstrumentClipMinder::setScale(const class InstrumentClipMinder*, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip_minder.cpp",525,"InstrumentClipMinder::setScale(long int, const class InstrumentClipMinder*)",14,0,80,0,0,0
,0,"InstrumentClipView::adjustProbability(const class InstrumentClipView*, long int) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::adjustVelocity(const class InstrumentClipView*, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",3373,"InstrumentClipView::auditionPadAction(const class InstrumentClipView*, long int, long int, bool)",101,0,487,0,0,0
"instrument_clip_view.cpp",179,"InstrumentClipView::buttonAction(const class InstrumentClipView*, unsigned char, bool, bool)",305,0,1391,0,0,0
"ui.cpp",379,"InstrumentClipView::cancelAllAuditioning(const class InstrumentClipView*)",5,0,19,0,0,0
,0,"InstrumentClipView::cancelAllAuditioning(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",1265,"InstrumentClipView::changeOutputType(const class InstrumentClipView*, enum OutputType)",5,0,18,0,0,0
,0,"InstrumentClipView::changeOutputType(const class InstrumentClipView*, enum OutputType) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::changeRootNote(const class InstrumentClipView*, unsigned char) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",2043,"InstrumentClipView::checkIfAllEditPadPressesEnded(const class InstrumentClipView*, bool)",4,0,13,0,0,0
,0,"InstrumentClipView::checkIfAllEditPadPressesEnded(const class InstrumentClipView*, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",5356,"InstrumentClipView::clipNeedsReRendering(const class InstrumentClipView*, class Clip*)",3,0,12,0,0,0
,0,"InstrumentClipView::clipNeedsReRendering(const class InstrumentClipView*, class Clip*) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",911,"InstrumentClipView::copyAutomation(const class InstrumentClipView*, long int, long int)",15,0,77,0,0,0
,0,"InstrumentClipView::copyNotes(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",798,"InstrumentClipView::createDrumForAuditionedNoteRow(const class InstrumentClipView*, enum DrumType)",40,0,144,0,0,0
"instrument_clip_view.cpp",1246,"InstrumentClipView::createNewInstrument(const class InstrumentClipView*, enum OutputType, bool)",11,0,32,0,0,0
,0,"InstrumentClipView::createNewInstrument(const class InstrumentClipView*, enum OutputType, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",2464,"InstrumentClipView::createNewNoteRowForKit(const class InstrumentClipView*, class ModelStackWithTimelineCounter*, long int, long int*)",15,0,75,0,0,0
"instrument_clip_view.cpp",2494,"InstrumentClipView::createNoteRowForYDisplay(const class InstrumentClipView*, class ModelStackWithTimelineCounter*, long int)",17,0,80,0,0,0
"instrument_clip_view.cpp",4351,"InstrumentClipView::cutAuditionedNotesToOne(const class InstrumentClipView*)",17,0,70,0,0,0
"instrument_clip_view.cpp",1050,"InstrumentClipView::deleteCopiedNoteRows(const class InstrumentClipView*)",4,0,16,0,0,0
,0,"InstrumentClipView::deleteDrum(const class InstrumentClipView*, class SoundDrum*) (always inlined)",0,0,0,0,0,0
"display.h",92,"InstrumentClipView::displayOrLanguageChanged(const class InstrumentClipView*)",3,0,7,0,0,0
"instrument_clip_view.cpp",3098,"InstrumentClipView::displayProbability(unsigned char, bool, const class InstrumentClipView*)",24,0,135,0,0,0
,0,"InstrumentClipView::dontDeleteNotesOnDepress(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
"song.cpp",244,"InstrumentClipView::doubleClipLengthAction(const class InstrumentClipView*)",21,0,99,0,0,0
,0,"InstrumentClipView::doubleClipLengthAction(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::drawAuditionSquare(const class InstrumentClipView*, unsigned char, class RGB*) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",3847,"InstrumentClipView::drawDrumName(const class InstrumentClipView*, class Drum*, bool)",18,0,244,0,0,0
"instrument_clip_view.cpp",4183,"InstrumentClipView::drawMuteSquare(class NoteRow*, class RGB*, unsigned char*, const class InstrumentClipView*)",19,0,109,0,0,0
"instrument_clip_view.cpp",3834,"InstrumentClipView::drawNoteCode(const class InstrumentClipView*, unsigned char)",4,0,30,0,0,0
,0,"InstrumentClipView::drawNoteCode(const class InstrumentClipView*, unsigned char) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",4763,"InstrumentClipView::editNoteRepeat(const class InstrumentClipView*, long int)",36,0,562,0,0,0
,0,"InstrumentClipView::editNoteRepeat(const class InstrumentClipView*, long int) (always inlined)",0,0,0,0,0,0
"model_stack.h",206,"InstrumentClipView::editNoteRowLength(const class InstrumentClipView*, class ModelStackWithNoteRow*, long int, long int)",52,0,287,0,0,0
"instrument_clip_view.cpp",5417,"InstrumentClipView::editNumEuclideanEvents(const class InstrumentClipView*, class ModelStackWithNoteRow*, long int, long int)",56,0,284,0,0,0
,0,"InstrumentClipView::editPadAction(const class InstrumentClipView*, bool, unsigned char, unsigned char, long unsigned int) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",2030,"InstrumentClipView::endEditPadPress(const class InstrumentClipView*, unsigned char)",6,0,26,0,0,0
"instrument_clip_view.cpp",3679,"InstrumentClipView::enterDrumCreator(const class InstrumentClipView*, class ModelStackWithNoteRow*, bool)",41,0,167,0,0,0
"instrument_clip_view.cpp",3980,"InstrumentClipView::enterScaleMode(const class InstrumentClipView*, unsigned char)",39,0,227,0,0,0
"instrument_clip_view.cpp",4084,"InstrumentClipView::exitScaleMode(const class InstrumentClipView*)",29,0,213,0,0,0
"instrument_clip_view.cpp",5171,"InstrumentClipView::fillOffScreenImageStores(const class InstrumentClipView*)",20,0,99,0,0,0
"instrument_clip_view.cpp",5215,"InstrumentClipView::flashDefaultRootNote(const class InstrumentClipView*)",3,0,13,0,0,0
"instrument_clip_view.cpp",3235,"InstrumentClipView::flipThroughAvailableDrums(const class InstrumentClipView*, long int, class Drum*, bool)",9,0,49,0,0,0
"instrument_clip_view.cpp",157,"InstrumentClipView::focusRegained(const class InstrumentClipView*)",4,0,12,0,0,0
,0,"InstrumentClipView::getAffectEntire(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::getDrumName(const class InstrumentClipView*, class Drum*, class StringBuf&) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::getEditPadPressXDisplayOnScreen(const class InstrumentClipView*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::getNextDrum(const class InstrumentClipView*, class Drum*, bool) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::getNumNoteRowsAuditioning(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",2480,"InstrumentClipView::getOrCreateNoteRowForYDisplay(const class InstrumentClipView*, class ModelStackWithTimelineCounter*, long int)",6,0,33,0,0,0
,0,"InstrumentClipView::getSoundForNoteRow(const class InstrumentClipView*, class NoteRow*, class ParamManagerForTimeline**) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",5210,"InstrumentClipView::getSquareWidth(const class InstrumentClipView*, long int, long int)",2,0,17,0,0,0
,0,"InstrumentClipView::getVelocityForAudition(const class InstrumentClipView*, unsigned char, long unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::getYVisualFromYDisplay(const class InstrumentClipView*, long int) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::getYVisualWithinOctaveFromYDisplay(const class InstrumentClipView*, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",5111,"InstrumentClipView::graphicsRoutine(const class InstrumentClipView*)",24,4,137,34,2,70
"ui.cpp",382,"InstrumentClipView::horizontalEncoderAction(const class InstrumentClipView*, long int)",74,0,448,0,0,0
,0,"InstrumentClipView::isDrumAuditioned(const class InstrumentClipView*, class Drum*) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",5364,"InstrumentClipView::modEncoderAction(const class InstrumentClipView*, long int, long int)",16,0,80,0,0,0
"instrument_clip_view.cpp",895,"InstrumentClipView::modEncoderButtonAction(const class InstrumentClipView*, unsigned char, bool)",6,0,29,0,0,0
,0,"InstrumentClipView::modEncoderButtonAction(const class InstrumentClipView*, unsigned char, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",2422,"InstrumentClipView::mutePadPress(const class InstrumentClipView*, unsigned char)",15,0,70,0,0,0
"instrument_clip_view.cpp",5222,"InstrumentClipView::noteRowChanged(const class InstrumentClipView*, class InstrumentClip*, class NoteRow*)",5,0,31,0,0,0
"instrument_clip_view.cpp",5265,"InstrumentClipView::notifyPlaybackBegun(const class InstrumentClipView*)",1,0,1,0,0,0
"instrument_clip_view.cpp",4841,"InstrumentClipView::nudgeNotes(const class InstrumentClipView*, long int)",282,0,1471,0,0,0
,0,"InstrumentClipView::offsetNoteCodeAction(const class InstrumentClipView*, long int) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::oneNoteAuditioning(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",126,"InstrumentClipView::opened(const class InstrumentClipView*)",3,0,7,0,0,0
"instrument_clip_view.cpp",136,"InstrumentClipView::openedInBackground(const class InstrumentClipView*)",9,0,38,0,0,0
"instrument_clip_view.cpp",1334,"InstrumentClipView::padAction(const class InstrumentClipView*, long int, long int, long int)",285,0,2018,0,0,0
"instrument_clip_view.cpp",1059,"InstrumentClipView::pasteAutomation(const class InstrumentClipView*, long int, long int)",21,0,136,0,0,0
"instrument_clip_view.cpp",1112,"InstrumentClipView::pasteNotes(const class InstrumentClipView*, bool)",38,0,208,0,0,0
,0,"InstrumentClipView::performActualRender(const class InstrumentClipView*, long unsigned int, class RGB*, unsigned char[18]*, long int, long unsigned int, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",3655,"InstrumentClipView::potentiallyRefreshNoteRowMenu(const class InstrumentClipView*)",6,0,19,0,0,0
,0,"InstrumentClipView::potentiallyRefreshNoteRowMenu(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",4613,"InstrumentClipView::quantizeNotes(long int, long int, const class InstrumentClipView*)",108,0,526,0,0,0
"instrument_clip_view.cpp",2877,"InstrumentClipView::reassessAllAuditionStatus(const class InstrumentClipView*)",2,0,10,0,0,0
"instrument_clip_view.cpp",2884,"InstrumentClipView::reassessAuditionStatus(const class InstrumentClipView*, unsigned char)",16,0,112,0,0,0
"instrument_clip_view.cpp",2548,"InstrumentClipView::recalculateColour(const class InstrumentClipView*, unsigned char)",10,0,93,0,0,0
"instrument_clip_view.cpp",2541,"InstrumentClipView::recalculateColours(const class InstrumentClipView*)",2,0,10,0,0,0
"instrument_clip_view.cpp",5271,"InstrumentClipView::renderMainPads(const class InstrumentClipView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",10,0,158,0,0,0
"instrument_clip_view.h",161,"InstrumentClipView::renderOLED(const class InstrumentClipView*, unsigned char[128]*)",1,0,1,0,0,0
"instrument_clip_view.cpp",4165,"InstrumentClipView::renderSidebar(const class InstrumentClipView*, long unsigned int, class RGB[18]*, unsigned char[18]*)",41,0,320,0,0,0
"instrument_clip_view.cpp",5789,"InstrumentClipView::reportMPEInitialValuesForNoteEditing(class ModelStackWithNoteRow*, const short int*, const class InstrumentClipView*)",17,0,54,0,0,0
,0,"InstrumentClipView::reportMPEValueForNoteEditing(const class InstrumentClipView*, long int, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",5844,"InstrumentClipView::reportNoteOffForMPEEditing(class ModelStackWithNoteRow*, const class InstrumentClipView*)",27,0,99,0,0,0
,0,"InstrumentClipView::rotateNoteRowHorizontally(const class InstrumentClipView*, class ModelStackWithNoteRow*, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",5346,"InstrumentClipView::scrollFinished(const class InstrumentClipView*)",3,0,9,0,0,0
,0,"InstrumentClipView::scrollFinished(const class InstrumentClipView*) (always inlined)",0,0,0,0,0,0
,0,"InstrumentClipView::scrollVertical(const class InstrumentClipView*, long int, bool, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",1277,"InstrumentClipView::selectEncoderAction(const class InstrumentClipView*, signed char)",152,0,757,0,0,0
"instrument_clip_view.cpp",2904,"InstrumentClipView::sendAuditionNote(const class InstrumentClipView*, bool, unsigned char, unsigned char, long unsigned int)",24,0,106,0,0,0
"instrument_clip_view.cpp",171,"InstrumentClipView::setLedStates(const class InstrumentClipView*)",2,0,7,0,0,0
,0,"InstrumentClipView::setRowProbability(const class InstrumentClipView*, long int) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",3300,"InstrumentClipView::setSelectedDrum(class Drum*, class Kit*, const class InstrumentClipView*, bool)",20,0,78,0,0,0
"instrument_clip_view.cpp",4139,"InstrumentClipView::setupChangingOfRootNote(const class InstrumentClipView*, long int, long int)",7,0,32,0,0,0
"ui_timer_manager.cpp",250,"InstrumentClipView::setupForEnteringScaleMode(long int, long int, const class InstrumentClipView*)",20,0,72,0,0,0
"instrument_clip_view.cpp",4053,"InstrumentClipView::setupForExitingScaleMode(const class InstrumentClipView*)",11,0,44,0,0,0
"instrument_clip_view.cpp",3800,"InstrumentClipView::someAuditioningHasEnded(const class InstrumentClipView*, bool)",14,0,38,0,0,0
,0,"InstrumentClipView::someAuditioningHasEnded(const class InstrumentClipView*, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",5258,"InstrumentClipView::tellMatrixDriverWhichRowsContainSomethingZoomable(const class InstrumentClipView*)",3,0,22,0,0,0
,0,"InstrumentClipView::tempoEncoderAction(const class InstrumentClipView*, signed char, bool, bool) (always inlined)",0,0,0,0,0,0
"instrument_clip_view.cpp",4372,"InstrumentClipView::verticalEncoderAction(const class InstrumentClipView*, long int, bool)",183,0,898,0,0,0
"intc_handler.c",92,"INTC_Handler_Interrupt(long unsigned int)",12,5,43,31,1068,34148
,0,"INTC_Handler_Interrupt(long unsigned int) (always inlined)",0,0,0,0,0,0
"param.cpp",41,"Integer::buttonAction(const class Integer*, unsigned char, bool, bool)",1,0,1,0,0,0
"integer.cpp",67,"Integer::drawInteger(const class Integer*, long int, long int, long int)",3,0,31,0,0,0
"integer.cpp",75,"Integer::drawPixelsForOled(const class Integer*)",1,0,9,0,0,0
"integer.h",29,"Integer::drawValue(const class Integer*)",2,0,15,0,0,0
"integer.cpp",42,"Integer::drawValue(const class Integer*)",1,0,16,0,0,0
"value.h",42,"Integer::getDisplayValue(const class Integer*)",1,0,2,0,0,0
"value.h",42,"Integer::getFinalValue(const class Integer*)",3,0,13,0,0,0
"integer.h",31,"Integer::getLearningThing(const class Integer*)",1,0,1,0,0,0
"integer.h",32,"Integer::getMaxValue(const class Integer*)",1,0,2,0,0,0
"integer.h",49,"Integer::getParamIndex(const class Integer*)",1,0,1,0,0,0
"integer.h",48,"Integer::getParamKind(const class Integer*)",1,0,2,0,0,0
"integer.h",31,"Integer::getUnit(const class Integer*)",1,0,3,0,0,0
"param.cpp",45,"Integer::horizontalEncoderAction(const class Integer*, long int)",1,0,1,0,0,0
,0,"Integer::Integer(const class Integer*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"integer.h",57,"Integer::learnKnob(const class Integer*, class MIDIDevice*, long int, long int, long int)",1,0,2,0,0,0
"integer.h",51,"Integer::patchingSourceShortcutPress(const class Integer*, enum PatchSource, bool)",1,0,1,0,0,0
"integer.cpp",29,"Integer::readCurrentValue(const class Integer*)",3,0,32,0,0,0
"integer.h",39,"Integer::selectButtonPress(const class Integer*)",1,0,1,0,0,0
"integer.cpp",26,"Integer::selectEncoderAction(const class Integer*, long int)",6,0,24,0,0,0
"integer.h",35,"Integer::shouldBlinkPatchingSourceShortcut(const class Integer*, enum PatchSource, unsigned char*)",1,0,1,0,0,0
"integer.h",38,"Integer::shouldDrawDotOnName(const class Integer*)",1,0,1,0,0,0
"integer.h",54,"Integer::unlearnAction(const class Integer*)",1,0,2,0,0,0
"integer.cpp",37,"Integer::writeCurrentValue(const class Integer*)",9,0,52,0,0,0
"menu_item.h",54,"Integer::~Integer(const class Integer*)",1,0,1,0,0,0
"integer.h",23,"Integer::~Integer(const class Integer*)",2,0,6,0,0,0
"integer.cpp",83,"IntegerContinuous::drawPixelsForOled(const class IntegerContinuous*)",2,0,14,0,0,0
,0,"IntegerContinuous::IntegerContinuous(const class IntegerContinuous*, enum String, enum String) (always inlined)",0,0,0,0,0,0
,0,"IntegerNonFM::IntegerNonFM(const class IntegerNonFM*, enum String, long int) (always inlined)",0,0,0,0,0,0
"integer_non_fm.h",27,"IntegerNonFM::isRelevant(const class IntegerNonFM*, class ModControllableAudio*, long int)",1,0,5,0,0,0
"menu_item.h",54,"IntegerNonFM::~IntegerNonFM(const class IntegerNonFM*)",1,0,1,0,0,0
"integer_non_fm.h",22,"IntegerNonFM::~IntegerNonFM(const class IntegerNonFM*)",2,0,6,0,0,0
"integer_range.cpp",26,"IntegerRange::beginSession(const class IntegerRange*, class MenuItem*)",5,0,16,0,0,0
"integer_range.cpp",74,"IntegerRange::getText(const class IntegerRange*, char*, long int*, long int*, bool)",12,0,36,0,0,0
,0,"IntegerRange::IntegerRange(const class IntegerRange*, enum String, enum String, long int, long int) (always inlined)",0,0,0,0,0,0
"integer_range.cpp",38,"IntegerRange::selectEncoderAction(const class IntegerRange*, long int)",9,0,60,0,0,0
"menu_item.h",54,"IntegerRange::~IntegerRange(const class IntegerRange*)",1,0,1,0,0,0
"integer_range.h",24,"IntegerRange::~IntegerRange(const class IntegerRange*)",2,0,6,0,0,0
"value.h",42,"IntegerWithOff::drawPixelsForOled(const class IntegerWithOff*)",3,0,18,0,0,0
"value.h",42,"IntegerWithOff::drawValue(const class IntegerWithOff*)",4,0,31,0,0,0
,0,"IntegerWithOff::IntegerWithOff(const class IntegerWithOff*, enum String, enum String) (always inlined)",0,0,0,0,0,0
,0,"Interpolate<float>(const float, const float, float) (always inlined)",0,0,0,0,0,0
"functions.cpp",455,"interpolateTable(long unsigned int, long int, const short unsigned int*, long int)",10,8,15,12,27,405
,0,"interpolateTableInverse(long int, long int, const short unsigned int*, long int) (always inlined)",0,0,0,0,0,0
,0,"interpolateTableSigned(long unsigned int, long int, const short int*, long int) (always inlined)",0,0,0,0,0,0
,0,"interpolateTableSigned2d(long unsigned int, long unsigned int, long int, long int, const short int*, long int, long int) (always inlined)",0,0,0,0,0,0
"interpolation.h",40,"Interpolation::getOptions(const class Interpolation*)",4,0,45,0,0,0
,0,"Interpolation::Interpolation(const class Interpolation*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"interpolation.h",45,"Interpolation::isRelevant(const class Interpolation*, class ModControllableAudio*, long int)",2,0,28,0,0,0
"interpolation.h",33,"Interpolation::readCurrentValue(const class Interpolation*)",2,0,6,0,0,0
"interpolation.h",36,"Interpolation::writeCurrentValue(const class Interpolation*)",2,0,6,0,0,0
"interpolation.h",26,"Interpolation::~Interpolation(const class Interpolation*)",4,0,17,0,0,0
"interpolation.h",26,"Interpolation::~Interpolation(const class Interpolation*)",4,0,14,0,0,0
,0,"Interpolation::~Interpolation(const class Interpolation*) (always inlined)",0,0,0,0,0,0
"encoders.cpp",67,"interpretEncoders(bool)",68,5,282,55,9,743
,0,"Interval::Interval(const class Interval*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"interval.h",27,"Interval::readCurrentValue(const class Interval*)",2,0,6,0,0,0
"value.h",42,"Interval::selectEncoderAction(const class Interval*, long int)",6,0,11,0,0,0
"interval.h",28,"Interval::writeCurrentValue(const class Interval*)",19,0,83,0,0,0
"menu_item.h",54,"Interval::~Interval(const class Interval*)",1,0,1,0,0,0
"interval.h",23,"Interval::~Interval(const class Interval*)",2,0,6,0,0,0
"d_string.cpp",345,"intToHex(long unsigned int, char*, long int)",4,0,16,0,0,0
"cfunctions.c",38,"intToString(long int, char* restrict, long int)",16,0,77,0,0,0
,0,"intToString(long int, char*) (always inlined)",0,0,0,0,0,0
,0,"InvertedToggleBool::InvertedToggleBool(const class InvertedToggleBool*, enum String, enum String, bool&) (always inlined)",0,0,0,0,0,0
"value.h",35,"InvertedToggleBool::readCurrentValue(const class InvertedToggleBool*)",1,0,5,0,0,0
"value.h",42,"InvertedToggleBool::writeCurrentValue(const class InvertedToggleBool*)",1,0,5,0,0,0
"toggle.h",45,"InvertedToggleBool::~InvertedToggleBool(const class InvertedToggleBool*)",2,0,6,0,0,0
"menu_item.h",54,"InvertedToggleBool::~InvertedToggleBool(const class InvertedToggleBool*)",1,0,1,0,0,0
,0,"io_spibsc_port_setting(long unsigned int, int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"ioRegGet(volatile short unsigned int*, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"gpio.c",22,"ioRegSet(volatile short unsigned int*, unsigned char, unsigned char, unsigned char)",4,4,12,12,1,12
"irqfiq_handler.S",136,"irq_handler",25,25,25,25,1100,42172
,0,"isAiffFilename(const char*) (always inlined)",0,0,0,0,0,0
,0,"isAnyInternalRecordingHappening() (always inlined)",0,0,0,0,0,0
"functions.cpp",1296,"isAudioFilename(const char*)",4,0,25,0,0,0
"buttons.cpp",256,"isButtonPressed(unsigned char)",3,0,12,0,0,0
,0,"isCodePointer(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"isKnobIndicatorBlinking(long int) (always inlined)",0,0,0,0,0,0
"song.cpp",244,"isLoopLocked()",2,0,14,0,0,0
,0,"isNoUIModeActive() (always inlined)",0,0,0,0,0,0
"param.cpp",27,"isParamBipolar(enum Kind, long int)",6,0,35,0,0,0
,0,"isParamBipolar(enum Kind, long int) (always inlined)",0,0,0,0,0,0
,0,"isParamPan(enum Kind, long int) (always inlined)",0,0,0,0,0,0
,0,"isParamPitch(enum Kind, long int) (always inlined)",0,0,0,0,0,0
"array",200,"isParamQuantizedStutter(enum Kind, long int)",2,0,14,0,0,0
,0,"isParamStutter(enum Kind, long int) (always inlined)",0,0,0,0,0,0
,0,"isShiftButtonPressed() (always inlined)",0,0,0,0,0,0
,0,"isStackPointer(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"isTimerEnabled(int) (always inlined)",0,0,0,0,0,0
,0,"isUIModeActive(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"isUIModeActiveExclusively(long unsigned int) (always inlined)",0,0,0,0,0,0
"ui.cpp",395,"isUIModeWithinRange(const long unsigned int*)",4,0,23,0,0,0
"ui.cpp",247,"isUIOpen(class UI*)",1,0,22,0,0,0
,0,"iter_swap<SortedTask*, SortedTask*>(struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
,0,"iter_swap<std::basic_string_view<char>*, std::basic_string_view<char>*>(class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"iterateAndCallSpecificDeviceHook(enum Hook)",12,0,117,0,0,0
,0,"KeyboardLayout::getDefaultVelocity(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayout::getHighestClipNote(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayout::getNoteColour(const class KeyboardLayout*, unsigned char) (always inlined)",0,0,0,0,0,0
"layout.h",79,"KeyboardLayout::getNotesState(const class KeyboardLayout*)",1,0,2,0,0,0
,0,"KeyboardLayout::getNotesState(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
"keyboard_layout.h",31,"KeyboardLayout::getOptions(const class KeyboardLayout*)",4,0,45,0,0,0
,0,"KeyboardLayout::getRootNote(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayout::getScaleModeEnabled(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayout::getScaleNoteCount(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayout::getScaleNotes(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayout::getState(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayout::isKit(const class KeyboardLayout*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayout::KeyboardLayout(const class KeyboardLayout*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"keyboard_layout.h",28,"KeyboardLayout::readCurrentValue(const class KeyboardLayout*)",2,0,5,0,0,0
"layout.h",65,"KeyboardLayout::renderSidebarPads(const class KeyboardLayout*, class RGB[18]*)",2,0,9,0,0,0
"layout.h",77,"KeyboardLayout::requiredScaleMode(const class KeyboardLayout*)",1,0,2,0,0,0
"value.h",45,"KeyboardLayout::writeCurrentValue(const class KeyboardLayout*)",1,0,5,0,0,0
"menu_item.h",54,"KeyboardLayout::~KeyboardLayout(const class KeyboardLayout*)",1,0,1,0,0,0
"keyboard_layout.h",25,"KeyboardLayout::~KeyboardLayout(const class KeyboardLayout*)",2,0,6,0,0,0
"in_key.cpp",27,"KeyboardLayoutInKey::evaluatePads(const class KeyboardLayoutInKey*, struct PressedPad*)",8,0,61,0,0,0
"in_key.cpp",48,"KeyboardLayoutInKey::handleHorizontalEncoder(const class KeyboardLayoutInKey*, long int, bool)",2,0,12,0,0,0
"in_key.cpp",41,"KeyboardLayoutInKey::handleVerticalEncoder(const class KeyboardLayoutInKey*, long int)",2,0,14,0,0,0
"in_key.h",39,"KeyboardLayoutInKey::name(const class KeyboardLayoutInKey*)",1,0,3,0,0,0
,0,"KeyboardLayoutInKey::noteFromPadIndex(const class KeyboardLayoutInKey*, short unsigned int) (always inlined)",0,0,0,0,0,0
"in_key.cpp",55,"KeyboardLayoutInKey::offsetPads(const class KeyboardLayoutInKey*, long int, bool)",16,0,166,0,0,0
,0,"KeyboardLayoutInKey::padIndexFromCoords(const class KeyboardLayoutInKey*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"KeyboardLayoutInKey::padIndexFromNote(const class KeyboardLayoutInKey*, short unsigned int) (always inlined)",0,0,0,0,0,0
"layout.h",122,"KeyboardLayoutInKey::precalculate(const class KeyboardLayoutInKey*)",9,0,78,0,0,0
"in_key.cpp",97,"KeyboardLayoutInKey::renderPads(const class KeyboardLayoutInKey*, class RGB[18]*)",11,0,180,0,0,0
"in_key.h",42,"KeyboardLayoutInKey::requiredScaleMode(const class KeyboardLayoutInKey*)",1,0,2,0,0,0
"in_key.h",30,"KeyboardLayoutInKey::~KeyboardLayoutInKey(const class KeyboardLayoutInKey*)",2,0,6,0,0,0
"layout.h",46,"KeyboardLayoutInKey::~KeyboardLayoutInKey(const class KeyboardLayoutInKey*)",1,0,1,0,0,0
"isomorphic.cpp",29,"KeyboardLayoutIsomorphic::evaluatePads(const class KeyboardLayoutIsomorphic*, struct PressedPad*)",6,0,38,0,0,0
"isomorphic.cpp",50,"KeyboardLayoutIsomorphic::handleHorizontalEncoder(const class KeyboardLayoutIsomorphic*, long int, bool)",2,0,12,0,0,0
"isomorphic.cpp",43,"KeyboardLayoutIsomorphic::handleVerticalEncoder(const class KeyboardLayoutIsomorphic*, long int)",2,0,14,0,0,0
,0,"KeyboardLayoutIsomorphic::handleVerticalEncoder(const class KeyboardLayoutIsomorphic*, long int) (always inlined)",0,0,0,0,0,0
"isomorphic.h",36,"KeyboardLayoutIsomorphic::name(const class KeyboardLayoutIsomorphic*)",1,0,3,0,0,0
"isomorphic.cpp",57,"KeyboardLayoutIsomorphic::offsetPads(const class KeyboardLayoutIsomorphic*, long int, bool)",16,0,77,0,0,0
"layout.h",122,"KeyboardLayoutIsomorphic::precalculate(const class KeyboardLayoutIsomorphic*)",9,0,56,0,0,0
"isomorphic.cpp",96,"KeyboardLayoutIsomorphic::renderPads(const class KeyboardLayoutIsomorphic*, class RGB[18]*)",24,0,232,0,0,0
"norns.cpp",25,"KeyboardLayoutNorns::evaluatePads(const class KeyboardLayoutNorns*, struct PressedPad*)",6,0,72,0,0,0
"norns.cpp",39,"KeyboardLayoutNorns::handleHorizontalEncoder(const class KeyboardLayoutNorns*, long int, bool)",1,0,1,0,0,0
"norns.cpp",36,"KeyboardLayoutNorns::handleVerticalEncoder(const class KeyboardLayoutNorns*, long int)",1,0,1,0,0,0
"norns.h",39,"KeyboardLayoutNorns::name(const class KeyboardLayoutNorns*)",1,0,3,0,0,0
"norns.cpp",42,"KeyboardLayoutNorns::precalculate(const class KeyboardLayoutNorns*)",1,0,1,0,0,0
"norns.cpp",46,"KeyboardLayoutNorns::renderPads(const class KeyboardLayoutNorns*, class RGB[18]*)",4,0,21,0,0,0
"norns.h",30,"KeyboardLayoutNorns::~KeyboardLayoutNorns(const class KeyboardLayoutNorns*)",2,0,6,0,0,0
"layout.h",46,"KeyboardLayoutNorns::~KeyboardLayoutNorns(const class KeyboardLayoutNorns*)",1,0,1,0,0,0
"velocity_drums.cpp",25,"KeyboardLayoutVelocityDrums::evaluatePads(const class KeyboardLayoutVelocityDrums*, struct PressedPad*)",15,0,136,0,0,0
"velocity_drums.cpp",67,"KeyboardLayoutVelocityDrums::handleHorizontalEncoder(const class KeyboardLayoutVelocityDrums*, long int, bool)",15,0,85,0,0,0
"velocity_drums.cpp",63,"KeyboardLayoutVelocityDrums::handleVerticalEncoder(const class KeyboardLayoutVelocityDrums*, long int)",2,0,16,0,0,0
,0,"KeyboardLayoutVelocityDrums::intensityFromCoords(const class KeyboardLayoutVelocityDrums*, long int, long int) (always inlined)",0,0,0,0,0,0
"velocity_drums.h",39,"KeyboardLayoutVelocityDrums::name(const class KeyboardLayoutVelocityDrums*)",1,0,3,0,0,0
,0,"KeyboardLayoutVelocityDrums::noteFromCoords(const class KeyboardLayoutVelocityDrums*, long int, long int) (always inlined)",0,0,0,0,0,0
"layout.h",122,"KeyboardLayoutVelocityDrums::precalculate(const class KeyboardLayoutVelocityDrums*)",9,0,61,0,0,0
"velocity_drums.cpp",108,"KeyboardLayoutVelocityDrums::renderPads(const class KeyboardLayoutVelocityDrums*, class RGB[18]*)",12,0,131,0,0,0
"velocity_drums.h",30,"KeyboardLayoutVelocityDrums::~KeyboardLayoutVelocityDrums(const class KeyboardLayoutVelocityDrums*)",2,0,6,0,0,0
"layout.h",46,"KeyboardLayoutVelocityDrums::~KeyboardLayoutVelocityDrums(const class KeyboardLayoutVelocityDrums*)",1,0,1,0,0,0
"keyboard_screen.cpp",389,"KeyboardScreen::buttonAction(const class KeyboardScreen*, unsigned char, bool, bool)",63,0,302,0,0,0
"display.h",92,"KeyboardScreen::displayOrLanguageChanged(const class KeyboardScreen*)",3,0,7,0,0,0
"keyboard_screen.cpp",780,"KeyboardScreen::enterScaleMode(const class KeyboardScreen*, long int)",8,0,35,0,0,0
"keyboard_screen.cpp",174,"KeyboardScreen::evaluateActiveNotes(const class KeyboardScreen*)",3,0,39,0,0,0
"keyboard_screen.cpp",694,"KeyboardScreen::exitAuditionMode(const class KeyboardScreen*)",6,0,21,0,0,0
"keyboard_screen.cpp",797,"KeyboardScreen::exitScaleMode(const class KeyboardScreen*)",7,0,32,0,0,0
,0,"KeyboardScreen::flashDefaultRootNote(const class KeyboardScreen*) (always inlined)",0,0,0,0,0,0
"keyboard_screen.cpp",712,"KeyboardScreen::focusRegained(const class KeyboardScreen*)",4,0,11,0,0,0
"keyboard_screen.cpp",828,"KeyboardScreen::getAffectEntire(const class KeyboardScreen*)",1,0,4,0,0,0
"keyboard_screen.h",60,"KeyboardScreen::getUIType(const class KeyboardScreen*)",1,0,2,0,0,0
"playback_handler.h",214,"KeyboardScreen::graphicsRoutine(const class KeyboardScreen*)",8,0,63,0,0,0
"keyboard_screen.cpp",587,"KeyboardScreen::horizontalEncoderAction(const class KeyboardScreen*, long int)",7,0,37,0,0,0
"keyboard_screen.cpp",61,"KeyboardScreen::KeyboardScreen(const class KeyboardScreen*)",7,0,48,0,0,0
"keyboard_screen.cpp",358,"KeyboardScreen::noteOff(class ModelStack&, class Instrument&, bool, long int, const class KeyboardScreen*)",15,0,57,0,0,0
"keyboard_screen.cpp",705,"KeyboardScreen::opened(const class KeyboardScreen*)",3,0,7,0,0,0
"keyboard_screen.cpp",724,"KeyboardScreen::openedInBackground(const class KeyboardScreen*)",4,0,28,0,0,0
"keyboard_screen.cpp",75,"KeyboardScreen::padAction(const class KeyboardScreen*, long int, long int, long int)",30,0,177,0,0,0
"keyboard_screen.cpp",738,"KeyboardScreen::renderMainPads(const class KeyboardScreen*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",8,0,36,0,0,0
"keyboard_screen.h",81,"KeyboardScreen::renderOLED(const class KeyboardScreen*, unsigned char[128]*)",1,0,1,0,0,0
"keyboard_screen.cpp",760,"KeyboardScreen::renderSidebar(const class KeyboardScreen*, long unsigned int, class RGB[18]*, unsigned char[18]*)",5,0,24,0,0,0
,0,"KeyboardScreen::requestRendering(const class KeyboardScreen*) (always inlined)",0,0,0,0,0,0
"keyboard_screen.cpp",662,"KeyboardScreen::selectEncoderAction(const class KeyboardScreen*, signed char)",20,0,126,0,0,0
"keyboard_screen.cpp",600,"KeyboardScreen::selectLayout(const class KeyboardScreen*, signed char)",25,0,156,0,0,0
"keyboard_screen.cpp",812,"KeyboardScreen::setLedStates(const class KeyboardScreen*)",2,0,7,0,0,0
"keyboard_screen.h",74,"KeyboardScreen::toClipMinder(const class KeyboardScreen*)",1,0,1,0,0,0
"keyboard_screen.cpp",831,"KeyboardScreen::unscrolledPadAudition(long int, long int, const class KeyboardScreen*, bool)",6,0,21,0,0,0
"keyboard_screen.cpp",180,"KeyboardScreen::updateActiveNotes(const class KeyboardScreen*)",59,0,345,0,0,0
"keyboard_screen.cpp",565,"KeyboardScreen::verticalEncoderAction(const class KeyboardScreen*, long int, bool)",10,0,60,0,0,0
,0,"KeyboardState::KeyboardState(const struct KeyboardState*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardStateInKey::KeyboardStateInKey(const struct KeyboardStateInKey*) (always inlined)",0,0,0,0,0,0
,0,"KeyboardStateIsomorphic::KeyboardStateIsomorphic(const struct KeyboardStateIsomorphic*) (always inlined)",0,0,0,0,0,0
,0,"KeyRange::getRandomValueInRange(const class KeyRange*) (always inlined)",0,0,0,0,0,0
"key_range.cpp",60,"KeyRange::getText(const class KeyRange*, char*, long int*, long int*, bool)",15,0,75,0,0,0
,0,"KeyRange::KeyRange(const class KeyRange*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"key_range.cpp",31,"KeyRange::selectEncoderAction(const class KeyRange*, long int)",8,0,47,0,0,0
"menu_item.h",54,"KeyRange::~KeyRange(const class KeyRange*)",1,0,1,0,0,0
"key_range.h",23,"KeyRange::~KeyRange(const class KeyRange*)",2,0,6,0,0,0
"kit.cpp",54,"Kit::acceptCurrentOption(const class Kit*)",14,0,354,0,0,0
,0,"Kit::acceptCurrentOption(const class Kit*) (always inlined)",0,0,0,0,0,0
"kit.cpp",412,"Kit::addDrum(const class Kit*, class Drum*)",4,0,14,0,0,0
,0,"Kit::addDrum(const class Kit*, class Drum*) (always inlined)",0,0,0,0,0,0
"kit.cpp",1542,"Kit::beginAuditioningforDrum(const class Kit*, class ModelStackWithNoteRow*, class Drum*, long int, const short int*, long int)",15,0,70,0,0,0
"kit.cpp",69,"Kit::canSeeViewUnderneath(const class Kit*)",1,0,3,0,0,0
"firmware_version.h",45,"Kit::compensateInstrumentVolumeForResonance(const class Kit*, class ParamManagerForTimeline*, class Song*)",9,0,67,0,0,0
,0,"Kit::compensateInstrumentVolumeForResonance(const class Kit*, class ParamManagerForTimeline*, class Song*) (always inlined)",0,0,0,0,0,0
"kit.cpp",509,"Kit::cutAllSound(const class Kit*)",2,0,11,0,0,0
"kit.cpp",933,"Kit::deleteBackedUpParamManagers(const class Kit*, class Song*)",5,0,22,0,0,0
"kit.cpp",945,"Kit::doTickForwardForArp(const class Kit*, class ModelStack*, long int)",16,0,100,0,0,0
"kit.cpp",445,"Kit::drumRemoved(class Drum*, const class Kit*)",1,0,10,0,0,0
,0,"Kit::drumRemoved(const class Kit*, class Drum*) (always inlined)",0,0,0,0,0,0
"kit.cpp",1581,"Kit::endAuditioningForDrum(const class Kit*, class ModelStackWithNoteRow*, class Drum*, long int)",14,0,48,0,0,0
"kit.cpp",470,"Kit::getDrumFromIndex(const class Kit*, long int)",3,0,13,0,0,0
,0,"Kit::getDrumFromIndex(const class Kit*, long int) (always inlined)",0,0,0,0,0,0
"kit.cpp",493,"Kit::getDrumFromName(const char*, bool, const class Kit*)",6,0,30,0,0,0
,0,"Kit::getDrumFromNoteCode(const class Kit*, class InstrumentClip*, long int) (always inlined)",0,0,0,0,0,0
"kit.cpp",463,"Kit::getDrumIndex(const class Kit*, class Drum*)",3,0,19,0,0,0
"kit.cpp",451,"Kit::getFirstUnassignedDrum(const class Kit*, class InstrumentClip*)",2,0,18,0,0,0
,0,"Kit::getGateDrumForChannel(const class Kit*, long int) (always inlined)",0,0,0,0,0,0
"kit.cpp",1619,"Kit::getModelStackWithParam(const class Kit*, class ModelStackWithTimelineCounter*, class Clip*, long int, enum Kind, bool, bool)",19,0,64,0,0,0
,0,"Kit::getModelStackWithParamForKit(const class Kit*, class ModelStackWithTimelineCounter*, class Clip*, long int, enum Kind, bool) (always inlined)",0,0,0,0,0,0
,0,"Kit::getModelStackWithParamForKitRow(const class Kit*, class ModelStackWithTimelineCounter*, class Clip*, long int, enum Kind, bool) (always inlined)",0,0,0,0,0,0
"kit.h",119,"Kit::getModKnobMode(const class Kit*)",1,0,2,0,0,0
"kit.cpp",37,"Kit::getOptions(const class Kit*)",2,0,26,0,0,0
"kit.cpp",1018,"Kit::getThingWithMostReverb(const class Kit*, class Sound**, class ParamManager**, class GlobalEffectableForClip**, long int*)",7,0,43,0,0,0
,0,"Kit::getThingWithMostReverb(const class Kit*, class Sound**, class ParamManager**, class GlobalEffectableForClip**, long int*) (always inlined)",0,0,0,0,0,0
"kit.cpp",32,"Kit::getTitle(const class Kit*)",1,0,2,0,0,0
"kit.h",138,"Kit::getXMLTag(const class Kit*)",1,0,3,0,0,0
"kit.cpp",1530,"Kit::isAnyAuditioningHappening(const class Kit*)",1,0,12,0,0,0
"kit.cpp",45,"Kit::isCurrentOptionAvailable(const class Kit*)",2,0,9,0,0,0
"kit.cpp",1511,"Kit::isNoteRowStillAuditioningAsLinearRecordingEnded(const class Kit*, class NoteRow*)",1,0,10,0,0,0
"kit.cpp",48,"Kit::Kit(const class Kit*)",3,0,31,0,0,0
"kit.cpp",357,"Kit::loadAllAudioFiles(const class Kit*, bool)",9,0,54,0,0,0
"kit.cpp",389,"Kit::loadCrucialAudioFilesOnly(const class Kit*)",11,0,58,0,0,0
"kit.cpp",743,"Kit::makeDrumNameUnique(const class Kit*, class String*, long int)",5,0,45,0,0,0
"kit.cpp",1482,"Kit::offerBendRangeUpdate(const class Kit*, class ModelStack*, class MIDIDevice*, long int, long int, long int)",10,0,45,0,0,0
"kit.cpp",1450,"Kit::offerReceivedAftertouch(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, long int, long int, long int, bool*)",22,0,115,0,0,0
"kit.cpp",1318,"Kit::offerReceivedCC(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, bool*)",13,0,59,0,0,0
"kit.cpp",674,"Kit::offerReceivedCCToLearnedParams(const class Kit*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*)",9,0,48,0,0,0
,0,"Kit::offerReceivedCCToLearnedParams(const class Kit*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"Kit::offerReceivedCCToModControllable(const class Kit*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
"kit.cpp",1209,"Kit::offerReceivedNote(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, bool, long int, long int, long int, bool, bool*)",25,0,155,0,0,0
"kit.cpp",1275,"Kit::offerReceivedPitchBend(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, bool*)",8,0,47,0,0,0
"kit.cpp",700,"Kit::offerReceivedPitchBendToLearnedParams(const class Kit*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*)",9,0,52,0,0,0
"kit.cpp",65,"Kit::padAction(const class Kit*, long int, long int, long int)",1,0,3,0,0,0
,0,"Kit::possiblySetSelectedDrumAndRefreshUI(const class Kit*, class Drum*) (always inlined)",0,0,0,0,0,0
"kit.cpp",901,"Kit::prepareForHibernationOrDeletion(const class Kit*)",3,0,14,0,0,0
,0,"Kit::readDrumFromFile(const class Kit*, class StorageManager&, class Song*, class Clip*, enum DrumType, long int) (always inlined)",0,0,0,0,0,0
"kit.cpp",257,"Kit::readFromFile(const class Kit*, class Deserializer&, class Song*, class Clip*, long int)",32,0,249,0,0,0
"kit.cpp",1426,"Kit::receivedAftertouchForDrum(const class Kit*, class ModelStackWithTimelineCounter*, class Drum*, enum MIDIMatchType, unsigned char, unsigned char)",3,0,23,0,0,0
,0,"Kit::receivedAftertouchForDrum(const class Kit*, class ModelStackWithTimelineCounter*, class Drum*, enum MIDIMatchType, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"kit.cpp",1405,"Kit::receivedAftertouchForKit(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, enum MIDIMatchType, long int, long int, long int, bool*)",6,0,49,0,0,0
,0,"Kit::receivedAftertouchForKit(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, enum MIDIMatchType, long int, long int, long int, bool*) (always inlined)",0,0,0,0,0,0
"kit.cpp",1384,"Kit::receivedCCForKit(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, enum MIDIMatchType, unsigned char, unsigned char, unsigned char, bool*, class Clip*)",5,0,38,0,0,0
,0,"Kit::receivedCCForKit(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, enum MIDIMatchType, unsigned char, unsigned char, unsigned char, bool*, class Clip*) (always inlined)",0,0,0,0,0,0
"kit.cpp",1294,"Kit::receivedMPEYForDrum(const class Kit*, class ModelStackWithTimelineCounter*, class Drum*, enum MIDIMatchType, unsigned char, unsigned char)",3,0,23,0,0,0
"kit.cpp",1039,"Kit::receivedNoteForDrum(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, bool, long int, long int, long int, bool, bool*, class Drum*)",54,0,315,0,0,0
,0,"Kit::receivedNoteForKit(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, bool, long int, long int, long int, bool, bool*, class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"kit.cpp",1255,"Kit::receivedPitchBendForDrum(const class Kit*, class ModelStackWithTimelineCounter*, class Drum*, unsigned char, unsigned char, enum MIDIMatchType, unsigned char, bool*)",3,0,23,0,0,0
,0,"Kit::receivedPitchBendForKit(const class Kit*, class ModelStackWithTimelineCounter*, class MIDIDevice*, enum MIDIMatchType, unsigned char, unsigned char, unsigned char, bool*) (always inlined)",0,0,0,0,0,0
"kit.cpp",428,"Kit::removeDrum(const class Kit*, class Drum*)",8,0,30,0,0,0
,0,"Kit::removeDrumFromLinkedList(const class Kit*, class Drum*) (always inlined)",0,0,0,0,0,0
"kit.cpp",522,"Kit::renderGlobalEffectableForClip(const class Kit*, class ModelStackWithTimelineCounter*, struct StereoSample*, long int*, long int, long int*, long int, long int, bool, bool, long int, long int, long int)",32,0,157,0,0,0
"kit.cpp",653,"Kit::renderOutput(const class Kit*, class ModelStack*, struct StereoSample*, struct StereoSample*, long int, long int*, long int, long int, bool, bool)",3,0,29,0,0,0
"kit.cpp",1009,"Kit::resetDrumTempValues(const class Kit*)",3,0,7,0,0,0
,0,"Kit::resetDrumTempValues(const class Kit*) (always inlined)",0,0,0,0,0,0
"kit.cpp",729,"Kit::resyncLFOs(const class Kit*)",3,0,15,0,0,0
"kit.cpp",855,"Kit::setActiveClip(const class Kit*, class ModelStackWithTimelineCounter*, enum PgmChangeSend)",21,0,81,0,0,0
"kit.cpp",793,"Kit::setupPatching(const class Kit*, class ModelStackWithTimelineCounter*)",26,0,109,0,0,0
"kit.cpp",760,"Kit::setupWithoutActiveClip(const class Kit*, class ModelStack*)",11,0,42,0,0,0
"model_stack.h",159,"Kit::stopAnyAuditioning(const class Kit*, class ModelStack*)",6,0,29,0,0,0
"kit.cpp",737,"Kit::toModControllable(const class Kit*)",1,0,2,0,0,0
,0,"Kit::toModControllable(const class Kit*) (always inlined)",0,0,0,0,0,0
"kit.h",120,"Kit::toOutput(const class Kit*)",1,0,1,0,0,0
"kit.cpp",91,"Kit::writeDataToFile(const class Kit*, class Serializer&, class Clip*, class Song*)",62,0,307,0,0,0
,0,"Kit::writeDrumToFile(const class Kit*, class Serializer&, class Drum*, class ParamManager*, bool, long int*, long int*, class Song*) (always inlined)",0,0,0,0,0,0
"context_menu.h",31,"Kit::~Kit(const class Kit*)",1,0,1,0,0,0
"kit.cpp",53,"Kit::~Kit(const class Kit*)",2,0,8,0,0,0
"kit.cpp",53,"Kit::~Kit(const class Kit*)",11,0,36,0,0,0
"kit.h",23,"Kit::~Kit(const class Kit*)",2,0,6,0,0,0
,0,"Knob::Knob(const class Knob*) (always inlined)",0,0,0,0,0,0
,0,"l10n_get(unsigned int) (always inlined)",0,0,0,0,0,0
,0,"Lane<__vector(2) float>::operator neon::NonVec<__vector(2) float>::type(const class Lane<__vector(2) float>*) (always inlined)",0,0,0,0,0,0
,0,"Language::hasFallback(const class Language*) (always inlined)",0,0,0,0,0,0
"launch_style.cpp",24,"LaunchStyle::getOptions(const class LaunchStyle*)",2,0,30,0,0,0
"launch_style.cpp",19,"LaunchStyle::getTitle(const class LaunchStyle*)",1,0,3,0,0,0
"launch_style.cpp",44,"LaunchStyle::selectEncoderAction(const class LaunchStyle*, signed char)",2,0,7,0,0,0
,0,"LaunchStyle::setupAndCheckAvailability(const class LaunchStyle*) (always inlined)",0,0,0,0,0,0
"launch_style.h",16,"LaunchStyle::~LaunchStyle(const class LaunchStyle*)",2,0,6,0,0,0
"context_menu.h",31,"LaunchStyle::~LaunchStyle(const class LaunchStyle*)",1,0,1,0,0,0
"layout.h",30,"Layout::getOptions(const class Layout*)",5,0,66,0,0,0
,0,"Layout::Layout(const class Layout*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"layout.h",27,"Layout::readCurrentValue(const class Layout*)",2,0,5,0,0,0
"value.h",45,"Layout::writeCurrentValue(const class Layout*)",1,0,5,0,0,0
"menu_item.h",54,"Layout::~Layout(const class Layout*)",1,0,1,0,0,0
"layout.h",24,"Layout::~Layout(const class Layout*)",2,0,6,0,0,0
,0,"ld_clust(struct FATFS*, const unsigned char*) (always inlined)",0,0,0,0,0,0
,0,"ld_dword(const unsigned char*) (always inlined)",0,0,0,0,0,0
,0,"ld_word(const unsigned char*) (always inlined)",0,0,0,0,0,0
,0,"ldexp",0,0,38,0,0,0
"learned_midi.cpp",28,"LearnedMIDI::checkMatch(const class LearnedMIDI*, class MIDIDevice*, long int)",4,0,44,0,0,0
,0,"LearnedMIDI::equalsChannelAllowMPE(const class LearnedMIDI*, class MIDIDevice*, long int) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::equalsChannelAllowMPEMasterChannels(const class LearnedMIDI*, class MIDIDevice*, long int) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::equalsChannelOrZone(const class LearnedMIDI*, class MIDIDevice*, long int) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::equalsDevice(const class LearnedMIDI*, class MIDIDevice*) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::equalsNoteOrCC(const class LearnedMIDI*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::equalsNoteOrCCAllowMPE(const class LearnedMIDI*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::equalsNoteOrCCAllowMPEMasterChannels(const class LearnedMIDI*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::getMasterChannel(const class LearnedMIDI*) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::isForMPEZone(const class LearnedMIDI*) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::LearnedMIDI(const class LearnedMIDI*) (always inlined)",0,0,0,0,0,0
,0,"LearnedMIDI::readChannelFromFile(const class LearnedMIDI*, class Deserializer&) (always inlined)",0,0,0,0,0,0
"learned_midi.cpp",106,"LearnedMIDI::readFromFile(const class LearnedMIDI*, class Deserializer&, long int)",12,0,73,0,0,0
"learned_midi.cpp",126,"LearnedMIDI::readMPEZone(const class LearnedMIDI*, class Deserializer&)",5,0,23,0,0,0
,0,"LearnedMIDI::readNoteFromFile(const class LearnedMIDI*, class Deserializer&) (always inlined)",0,0,0,0,0,0
"learned_midi.cpp",70,"LearnedMIDI::writeAttributesToFile(const class LearnedMIDI*, class Serializer&, long int)",8,0,44,0,0,0
,0,"LearnedMIDI::writeNoteToFile(const class LearnedMIDI*, class Serializer&, const char*) (always inlined)",0,0,0,0,0,0
"learned_midi.cpp",86,"LearnedMIDI::writeToFile(const class LearnedMIDI*, class Serializer&, const char*, long int)",10,0,48,0,0,0
"indicator_leds.cpp",108,"ledBlinkTimeout(unsigned char, bool, bool)",6,0,20,0,0,0
,0,"LFO::setGlobalInitialPhase(const class LFO*, const class LFOConfig&) (always inlined)",0,0,0,0,0,0
,0,"LFO::setLocalInitialPhase(const class LFO*, const class LFOConfig&) (always inlined)",0,0,0,0,0,0
,0,"LFO::tick(const class LFO*, long int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"LFOConfig::LFOConfig(const class LFOConfig*) (always inlined)",0,0,0,0,0,0
,0,"lfoPhaseToValue(long int, int) (always inlined)",0,0,0,0,0,0
"live_input_buffer.cpp",109,"LiveInputBuffer::getAveragesForCrossfade(const class LiveInputBuffer*, long int*, long int, long int, long int)",10,0,33,0,0,0
,0,"LiveInputBuffer::giveInput(const class LiveInputBuffer*, long int, long unsigned int, enum OscType) (always inlined)",0,0,0,0,0,0
,0,"LiveInputBuffer::LiveInputBuffer(const class LiveInputBuffer*) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifter::hopEnd(const class LivePitchShifter*, long int, class LiveInputBuffer*, long long unsigned int, long long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifter::LivePitchShifter(const class LivePitchShifter*, enum OscType, long int) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifter::mayBeRemovedWithoutClick(const class LivePitchShifter*) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifter::olderPlayHeadIsCurrentlySounding(const class LivePitchShifter*) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifterPlayHead::fillInterpolationBuffer(const class LivePitchShifterPlayHead*, class LiveInputBuffer*, long int) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifterPlayHead::getEstimatedPlaytimeRemaining(const class LivePitchShifterPlayHead*, long unsigned int, class LiveInputBuffer*, long int) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifterPlayHead::getNumRawSamplesBehindInput(const class LivePitchShifterPlayHead*, class LiveInputBuffer*, class LivePitchShifter*, long int) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifterPlayHead::interpolate(const class LivePitchShifterPlayHead*, long int*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"LivePitchShifterPlayHead::interpolateLinear(const class LivePitchShifterPlayHead*, long int*, long int, long int) (always inlined)",0,0,0,0,0,0
"live_pitch_shifter_play_head.cpp",37,"LivePitchShifterPlayHead::render(const class LivePitchShifterPlayHead*, long int* restrict, long int, long int, long int, long int, long int, long int*, long int, long int, long int*)",55,0,213,0,0,0
,0,"load1<__vector(2) float>(const float*) (always inlined)",0,0,0,0,0,0
,0,"loadAnyEnqueuedClustersRoutine() (always inlined)",0,0,0,0,0,0
"load_instrument_preset.cpp",47,"LoadInstrumentPreset::acceptCurrentOption(const class LoadInstrumentPreset*)",6,0,18,0,0,0
"load_instrument_preset.cpp",34,"LoadInstrumentPreset::getOptions(const class LoadInstrumentPreset*)",2,0,21,0,0,0
"load_instrument_preset.cpp",29,"LoadInstrumentPreset::getTitle(const class LoadInstrumentPreset*)",1,0,2,0,0,0
"load_instrument_preset.h",23,"LoadInstrumentPreset::~LoadInstrumentPreset(const class LoadInstrumentPreset*)",2,0,6,0,0,0
"context_menu.h",31,"LoadInstrumentPreset::~LoadInstrumentPreset(const class LoadInstrumentPreset*)",1,0,1,0,0,0
"load_instrument_preset_ui.cpp",337,"LoadInstrumentPresetUI::buttonAction(const class LoadInstrumentPresetUI*, unsigned char, bool, bool)",32,0,135,0,0,0
,0,"LoadInstrumentPresetUI::confirmPresetOrNextUnlaunchedOne(const class LoadInstrumentPresetUI*, enum OutputType, class String*, enum Availability) (always inlined)",0,0,0,0,0,0
"load_instrument_preset_ui.cpp",272,"LoadInstrumentPresetUI::currentFileChanged(const class LoadInstrumentPresetUI*, long int)",5,0,18,0,0,0
"load_instrument_preset_ui.cpp",1385,"LoadInstrumentPresetUI::doPresetNavigation(long int, class Instrument*, enum Availability, bool, const class LoadInstrumentPresetUI*)",85,0,423,0,0,0
"load_instrument_preset_ui.cpp",285,"LoadInstrumentPresetUI::enterKeyPress(const class LoadInstrumentPresetUI*)",18,0,66,0,0,0
"load_instrument_preset_ui.cpp",1073,"LoadInstrumentPresetUI::exitAction(const class LoadInstrumentPresetUI*)",8,0,210,0,0,0
"load_instrument_preset_ui.cpp",1159,"LoadInstrumentPresetUI::findAnUnlaunchedPresetIncludingWithinSubfolders(class Song*, enum OutputType, enum Availability, const class LoadInstrumentPresetUI*)",58,0,243,0,0,0
,0,"LoadInstrumentPresetUI::findUnusedSlotVariation(const class LoadInstrumentPresetUI*, class String*, class String*) (always inlined)",0,0,0,0,0,0
"load_instrument_preset_ui.cpp",264,"LoadInstrumentPresetUI::folderContentsReady(const class LoadInstrumentPresetUI*, long int)",1,0,2,0,0,0
"load_instrument_preset_ui.cpp",56,"LoadInstrumentPresetUI::getGreyoutColsAndRows(const class LoadInstrumentPresetUI*, long unsigned int*, long unsigned int*)",2,0,11,0,0,0
,0,"LoadInstrumentPresetUI::isInstrumentInList(const class LoadInstrumentPresetUI*, class Instrument*, class Output*) (always inlined)",0,0,0,0,0,0
"load_instrument_preset_ui.cpp",67,"LoadInstrumentPresetUI::opened(const class LoadInstrumentPresetUI*)",30,0,88,0,0,0
"load_instrument_preset_ui.cpp",1080,"LoadInstrumentPresetUI::padAction(const class LoadInstrumentPresetUI*, long int, long int, long int)",11,0,49,0,0,0
"load_instrument_preset_ui.cpp",841,"LoadInstrumentPresetUI::performLoad(const class LoadInstrumentPresetUI*, bool, class StorageManager&)",130,0,611,0,0,0
"load_instrument_preset_ui.cpp",1023,"LoadInstrumentPresetUI::performLoadSynthToKit(const class LoadInstrumentPresetUI*)",30,0,244,0,0,0
"load_instrument_preset_ui.cpp",1136,"LoadInstrumentPresetUI::renderSidebar(const class LoadInstrumentPresetUI*, long unsigned int, class RGB[18]*, unsigned char[18]*)",2,0,18,0,0,0
,0,"LoadInstrumentPresetUI::revertToInitialPreset(const class LoadInstrumentPresetUI*, class StorageManager&) (always inlined)",0,0,0,0,0,0
"load_instrument_preset_ui.cpp",128,"LoadInstrumentPresetUI::setupForOutputType(const class LoadInstrumentPresetUI*)",52,0,251,0,0,0
,0,"LoadInstrumentPresetUI::setupLoadInstrument(const class LoadInstrumentPresetUI*, enum OutputType, class Instrument*, class InstrumentClip*) (always inlined)",0,0,0,0,0,0
,0,"LoadInstrumentPresetUI::setupLoadSynthToKit(const class LoadInstrumentPresetUI*, class Instrument*, class InstrumentClip*, class SoundDrum*, class NoteRow*, long int) (always inlined)",0,0,0,0,0,0
"load_instrument_preset_ui.cpp",1143,"LoadInstrumentPresetUI::showingAuditionPads(const class LoadInstrumentPresetUI*)",1,0,9,0,0,0
"load_instrument_preset_ui.cpp",385,"LoadInstrumentPresetUI::timerCallback(const class LoadInstrumentPresetUI*)",19,0,72,0,0,0
"load_instrument_preset_ui.cpp",1113,"LoadInstrumentPresetUI::verticalEncoderAction(const class LoadInstrumentPresetUI*, long int, bool)",6,0,37,0,0,0
"load_song_ui.cpp",191,"LoadSongUI::buttonAction(const class LoadSongUI*, unsigned char, bool, bool)",13,0,39,0,0,0
"load_song_ui.cpp",613,"LoadSongUI::currentFileChanged(const class LoadSongUI*, long int)",11,0,37,0,0,0
,0,"LoadSongUI::currentFileChanged(const class LoadSongUI*, long int) (always inlined)",0,0,0,0,0,0
"load_song_ui.cpp",169,"LoadSongUI::displayArmedPopup(const class LoadSongUI*)",4,0,15,0,0,0
"load_song_ui.cpp",178,"LoadSongUI::displayLoopsRemainingPopup(const class LoadSongUI*)",3,0,23,0,0,0
,0,"LoadSongUI::displayLoopsRemainingPopup(const class LoadSongUI*) (always inlined)",0,0,0,0,0,0
"load_song_ui.cpp",808,"LoadSongUI::displayText(const class LoadSongUI*, bool)",4,0,13,0,0,0
,0,"LoadSongUI::displayText(const class LoadSongUI*, bool) (always inlined)",0,0,0,0,0,0
"load_song_ui.cpp",733,"LoadSongUI::drawSongPreview(bool, const class LoadSongUI*, class StorageManager&)",37,0,153,0,0,0
"load_song_ui.cpp",146,"LoadSongUI::enterKeyPress(const class LoadSongUI*)",10,0,39,0,0,0
"load_song_ui.cpp",720,"LoadSongUI::exitAction(const class LoadSongUI*)",8,0,56,0,0,0
,0,"LoadSongUI::exitAction(const class LoadSongUI*) (always inlined)",0,0,0,0,0,0
,0,"LoadSongUI::exitThisUI(const class LoadSongUI*) (always inlined)",0,0,0,0,0,0
"load_song_ui.cpp",138,"LoadSongUI::folderContentsReady(const class LoadSongUI*, long int)",3,0,11,0,0,0
"load_song_ui.h",40,"LoadSongUI::getUIType(const class LoadSongUI*)",1,0,2,0,0,0
"load_song_ui.cpp",67,"LoadSongUI::opened(const class LoadSongUI*)",37,0,151,0,0,0
"load_song_ui.cpp",821,"LoadSongUI::padAction(const class LoadSongUI*, long int, long int, long int)",7,0,41,0,0,0
"load_song_ui.cpp",235,"LoadSongUI::performLoad(const class LoadSongUI*, class StorageManager&)",7,0,26,0,0,0
"load_song_ui.cpp",381,"LoadSongUI::performLoadFixedSM()::{lambda()#1}::_FUN",1,0,3,0,0,0
"load_song_ui.cpp",388,"LoadSongUI::performLoadFixedSM()::{lambda()#2}::_FUN",1,0,3,0,0,0
"load_song_ui.cpp",437,"LoadSongUI::performLoadFixedSM()::{lambda()#3}::_FUN",1,0,3,0,0,0
"load_song_ui.cpp",249,"LoadSongUI::performLoadFixedSM(const class LoadSongUI*)",111,0,489,0,0,0
"load_song_ui.cpp",531,"LoadSongUI::scrollFinished(const class LoadSongUI*)",1,0,9,0,0,0
"load_song_ui.cpp",644,"LoadSongUI::selectEncoderAction(const class LoadSongUI*, signed char)",7,0,35,0,0,0
"load_song_ui.cpp",490,"LoadSongUI::timerCallback(const class LoadSongUI*)",26,0,162,0,0,0
"load_song_ui.cpp",706,"LoadSongUI::verticalEncoderAction(const class LoadSongUI*, long int, bool)",4,0,27,0,0,0
"load_ui.cpp",25,"LoadUI::focusRegained(const class LoadUI*)",3,0,15,0,0,0
"load_ui.h",29,"LoadUI::searchMemoryForBetterFile(const class LoadUI*, long int, char*)",1,0,1,0,0,0
,0,"log",0,0,139,0,0,0
,0,"log(float) (always inlined)",0,0,0,0,0,0
,0,"log2",0,0,154,0,0,0
,0,"log2(float) (always inlined)",0,0,0,0,0,0
,0,"log2f",0,0,58,0,0,0
"log.cpp",29,"logDebug(enum DebugPrintMode, const char*, int, unsigned int, const char*, unsigned int)",14,0,48,0,0,0
,0,"logf",0,0,58,38,343,8718
"functions.cpp",1309,"lookupReleaseRate(long int)",5,0,26,0,0,0
"loop_point.cpp",64,"LoopPoint::beginSession(const class LoopPoint*, class MenuItem*)",7,0,27,0,0,0
"loop_point.cpp",43,"LoopPoint::checkPermissionToBeginSession(const class LoopPoint*, class ModControllableAudio*, long int, class MultiRange**)",5,0,28,0,0,0
"sound.h",199,"LoopPoint::isRelevant(const class LoopPoint*, class ModControllableAudio*, long int)",1,0,11,0,0,0
,0,"LoopPoint::isRelevant(const class LoopPoint*, class ModControllableAudio*, long int) (always inlined)",0,0,0,0,0,0
,0,"LoopPoint::LoopPoint(const class LoopPoint*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"lpf_freq.h",29,"LPFFreq::drawValue(const class LPFFreq*)",9,0,65,0,0,0
,0,"LPFFreq::LPFFreq(const class LPFFreq*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"menu_item.h",54,"LPFFreq::~LPFFreq(const class LPFFreq*)",1,0,1,0,0,0
"lpf_freq.h",23,"LPFFreq::~LPFFreq(const class LPFFreq*)",2,0,6,0,0,0
"lpf_mode.h",33,"LPFMode::getOptions(const class LPFMode*)",4,0,63,0,0,0
,0,"LPFMode::LPFMode(const class LPFMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"lpf_mode.h",29,"LPFMode::readCurrentValue(const class LPFMode*)",2,0,6,0,0,0
"lpf_mode.h",30,"LPFMode::writeCurrentValue(const class LPFMode*)",2,0,6,0,0,0
"menu_item.h",54,"LPFMode::~LPFMode(const class LPFMode*)",1,0,1,0,0,0
"lpf_mode.h",26,"LPFMode::~LPFMode(const class LPFMode*)",2,0,6,0,0,0
,0,"lpfTypeToString(enum FilterMode) (always inlined)",0,0,0,0,0,0
,0,"LpLadderFilter::do12dBLPFOnSample(const class LpLadderFilter*, long int, struct LpLadderState&) (always inlined)",0,0,0,0,0,0
,0,"LpLadderFilter::do24dBLPFOnSample(const class LpLadderFilter*, long int, struct LpLadderState&) (always inlined)",0,0,0,0,0,0
,0,"LpLadderFilter::doDriveLPFOnSample(const class LpLadderFilter*, long int, struct LpLadderState&) (always inlined)",0,0,0,0,0,0
"lpladder.cpp",177,"LpLadderFilter::doFilter(const class LpLadderFilter*, long int*, long int*, long int)",31,0,604,0,0,0
"lpladder.cpp",245,"LpLadderFilter::doFilterStereo(const class LpLadderFilter*, long int*, long int*)",34,0,1102,0,0,0
,0,"LpLadderFilter::scaleInput(const class LpLadderFilter*, long int, long int) (always inlined)",0,0,0,0,0,0
"lpladder.cpp",55,"LpLadderFilter::setConfig(const class LpLadderFilter*, long int, long int, enum FilterMode, long int, long int)",27,0,186,0,0,0
,0,"lshiftAndSaturate<16>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturate<1>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturate<23>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturate<24>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturate<2>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturate<3>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturate<5>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturate<7>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturate<8>(long int) (always inlined)",0,0,0,0,0,0
,0,"lshiftAndSaturateUnknown(long int, unsigned char) (always inlined)",0,0,0,0,0,0
"value.h",42,"Magnitude::drawPixelsForOled(const class Magnitude*)",3,0,20,0,0,0
"magnitude.h",39,"Magnitude::drawValue(const class Magnitude*)",2,0,15,0,0,0
,0,"Magnitude::Magnitude(const class Magnitude*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"magnitude.h",28,"Magnitude::readCurrentValue(const class Magnitude*)",2,0,5,0,0,0
"magnitude.h",40,"Magnitude::size(const class Magnitude*)",1,0,2,0,0,0
"value.h",42,"Magnitude::writeCurrentValue(const class Magnitude*)",1,0,5,0,0,0
"menu_item.h",54,"Magnitude::~Magnitude(const class Magnitude*)",1,0,1,0,0,0
"magnitude.h",25,"Magnitude::~Magnitude(const class Magnitude*)",2,0,6,0,0,0
,0,"main() (always inlined)",0,0,0,0,0,0
,0,"Main::Main(const class Main*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",134,"Main::readCurrentValue(const class Main*)",3,0,19,0,0,0
"sound_editor.cpp",134,"Main::writeCurrentValue(const class Main*)",3,0,14,0,0,0
"menu_item.h",54,"Main::~Main(const class Main*)",1,0,1,0,0,0
"main.h",25,"Main::~Main(const class Main*)",2,0,6,0,0,0
,0,"MainOLED_WCom(char) (always inlined)",0,0,0,0,0,0
,0,"make_pair<long unsigned int&, long unsigned int&>(long unsigned int&, long unsigned int&) (always inlined)",0,0,0,0,0,0
,0,"map<float>(float, float, float, float, float) (always inlined)",0,0,0,0,0,0
"master_transpose.h",48,"MasterTranspose::drawValue(const class MasterTranspose*)",2,0,17,0,0,0
"master_transpose.h",56,"MasterTranspose::getMinValue(const class MasterTranspose*)",1,0,2,0,0,0
"master_transpose.h",40,"MasterTranspose::getP(const class MasterTranspose*)",1,0,2,0,0,0
"master_transpose.h",39,"MasterTranspose::getParamIndex(const class MasterTranspose*)",1,0,2,0,0,0
"master_transpose.h",53,"MasterTranspose::learnKnob(const class MasterTranspose*, class MIDIDevice*, long int, long int, long int)",1,0,2,0,0,0
,0,"MasterTranspose::MasterTranspose(const class MasterTranspose*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"master_transpose.h",45,"MasterTranspose::patchingSourceShortcutPress(const class MasterTranspose*, enum PatchSource, bool)",1,0,2,0,0,0
"master_transpose.h",30,"MasterTranspose::readCurrentValue(const class MasterTranspose*)",2,0,6,0,0,0
"master_transpose.h",37,"MasterTranspose::selectButtonPress(const class MasterTranspose*)",1,0,2,0,0,0
"master_transpose.h",42,"MasterTranspose::shouldBlinkPatchingSourceShortcut(const class MasterTranspose*, enum PatchSource, unsigned char*)",1,0,2,0,0,0
"master_transpose.h",38,"MasterTranspose::shouldDrawDotOnName(const class MasterTranspose*)",1,0,2,0,0,0
,0,"MasterTranspose::shouldDrawDotOnName(const class MasterTranspose*) (always inlined)",0,0,0,0,0,0
"master_transpose.h",50,"MasterTranspose::unlearnAction(const class MasterTranspose*)",1,0,2,0,0,0
"master_transpose.h",32,"MasterTranspose::writeCurrentValue(const class MasterTranspose*)",5,0,17,0,0,0
"menu_item.h",54,"MasterTranspose::~MasterTranspose(const class MasterTranspose*)",1,0,1,0,0,0
"master_transpose.h",27,"MasterTranspose::~MasterTranspose(const class MasterTranspose*)",2,0,6,0,0,0
,0,"MatrixDriver::isPadPressed(const class MatrixDriver*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MatrixDriver::noPressesHappening(const class MatrixDriver*, bool) (always inlined)",0,0,0,0,0,0
"matrix_driver.cpp",69,"MatrixDriver::padAction(long int, long int, long int, const class MatrixDriver*)",5,0,23,0,0,0
,0,"max<float>(const float&, const float&) (always inlined)",0,0,0,0,0,0
,0,"max<int>(const int&, const int&) (always inlined)",0,0,0,0,0,0
,0,"max<long int>(const long int&, const long int&) (always inlined)",0,0,0,0,0,0
,0,"max<long long int>(const long long int&, const long long int&) (always inlined)",0,0,0,0,0,0
,0,"max<long unsigned int>(const long unsigned int&, const long unsigned int&) (always inlined)",0,0,0,0,0,0
,0,"max<short int>(const short int&, const short int&) (always inlined)",0,0,0,0,0,0
,0,"max<signed char>(const signed char&, const signed char&) (always inlined)",0,0,0,0,0,0
,0,"max<unsigned char>(const unsigned char&, const unsigned char&) (always inlined)",0,0,0,0,0,0
,0,"max<unsigned int>(const unsigned int&, const unsigned int&) (always inlined)",0,0,0,0,0,0
"melodic_instrument.cpp",542,"MelodicInstrument::beginAuditioningForNote(const class MelodicInstrument*, class ModelStack*, long int, long int, const short int*, long int, long unsigned int)",9,0,48,0,0,0
"melodic_instrument.h",41,"MelodicInstrument::ccReceivedFromInputMIDIChannel(const class MelodicInstrument*, long int, long int, class ModelStackWithTimelineCounter*)",1,0,1,0,0,0
"melodic_instrument.cpp",555,"MelodicInstrument::endAuditioningForNote(const class MelodicInstrument*, class ModelStack*, long int, long int)",13,0,62,0,0,0
"melodic_instrument.cpp",716,"MelodicInstrument::getModelStackWithParam(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class Clip*, long int, enum Kind, bool, bool)",9,0,32,0,0,0
"melodic_instrument.cpp",576,"MelodicInstrument::getParamToControlFromInputMIDIChannel(const class MelodicInstrument*, long int, class ModelStackWithThreeMainThings*)",7,0,34,0,0,0
,0,"MelodicInstrument::getParamToControlFromInputMIDIChannel(const class MelodicInstrument*, long int, class ModelStackWithThreeMainThings*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"MelodicInstrument::isAnyAuditioningHappening(const class MelodicInstrument*)",1,0,5,0,0,0
"melodic_instrument.cpp",512,"MelodicInstrument::isNoteRowStillAuditioningAsLinearRecordingEnded(const class MelodicInstrument*, class NoteRow*)",1,0,18,0,0,0
,0,"MelodicInstrument::MelodicInstrument(const class MelodicInstrument*, enum OutputType) (always inlined)",0,0,0,0,0,0
"melodic_instrument.cpp",477,"MelodicInstrument::offerBendRangeUpdate(const class MelodicInstrument*, class ModelStack*, class MIDIDevice*, long int, long int, long int)",12,0,45,0,0,0
,0,"MelodicInstrument::offerBendRangeUpdate(const class MelodicInstrument*, class ModelStack*, class MIDIDevice*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"melodic_instrument.cpp",429,"MelodicInstrument::offerReceivedAftertouch(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, long int, long int, long int, bool*)",3,0,26,0,0,0
"melodic_instrument.cpp",357,"MelodicInstrument::offerReceivedCC(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, bool*)",6,0,35,0,0,0
,0,"MelodicInstrument::offerReceivedCC(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, bool*) (always inlined)",0,0,0,0,0,0
"melodic_instrument.cpp",293,"MelodicInstrument::offerReceivedNote(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, bool, long int, long int, long int, bool, bool*)",7,0,56,0,0,0
"melodic_instrument.cpp",315,"MelodicInstrument::offerReceivedPitchBend(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, bool*)",3,0,26,0,0,0
"melodic_instrument.cpp",663,"MelodicInstrument::polyphonicExpressionEventPossiblyToRecord(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, long int, long int, long int, enum MIDICharacteristic)",19,0,94,0,0,0
"melodic_instrument.cpp",417,"MelodicInstrument::possiblyRefreshAutomationEditorGrid(const class MelodicInstrument*, long int)",4,0,20,0,0,0
,0,"MelodicInstrument::possiblyRefreshAutomationEditorGrid(const class MelodicInstrument*, long int) (always inlined)",0,0,0,0,0,0
"melodic_instrument.cpp",613,"MelodicInstrument::processParamFromInputMIDIChannel(const class MelodicInstrument*, long int, long int, class ModelStackWithTimelineCounter*)",14,0,64,0,0,0
"melodic_instrument.cpp",80,"MelodicInstrument::readTagFromFile(const class MelodicInstrument*, class Deserializer&, const char*)",10,0,60,0,0,0
"melodic_instrument.cpp",440,"MelodicInstrument::receivedAftertouch(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, enum MIDIMatchType, long int, long int, long int, bool*)",8,0,50,0,0,0
"melodic_instrument.cpp",373,"MelodicInstrument::receivedCC(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, enum MIDIMatchType, unsigned char, unsigned char, unsigned char, bool*)",10,0,61,0,0,0
"melodic_instrument.cpp",106,"MelodicInstrument::receivedNote(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, bool, long int, enum MIDIMatchType, long int, long int, bool, bool*)",52,0,268,0,0,0
"melodic_instrument.cpp",325,"MelodicInstrument::receivedPitchBend(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, enum MIDIMatchType, unsigned char, unsigned char, unsigned char, bool*)",5,0,46,0,0,0
"melodic_instrument.cpp",506,"MelodicInstrument::setActiveClip(const class MelodicInstrument*, class ModelStackWithTimelineCounter*, enum PgmChangeSend)",2,0,11,0,0,0
"melodic_instrument.cpp",517,"MelodicInstrument::stopAnyAuditioning(const class MelodicInstrument*, class ModelStack*)",12,0,60,0,0,0
"melodic_instrument.cpp",43,"MelodicInstrument::writeMelodicInstrumentAttributesToFile(const class MelodicInstrument*, class Serializer&, class Clip*, class Song*)",8,0,36,0,0,0
,0,"MelodicInstrument::writeMelodicInstrumentAttributesToFile(const class MelodicInstrument*, class Serializer&, class Clip*, class Song*) (always inlined)",0,0,0,0,0,0
"melodic_instrument.cpp",66,"MelodicInstrument::writeMelodicInstrumentTagsToFile(const class MelodicInstrument*, class Serializer&, class Clip*, class Song*)",3,0,11,0,0,0
,0,"MelodicInstrument::writeMelodicInstrumentTagsToFile(const class MelodicInstrument*, class Serializer&, class Clip*, class Song*) (always inlined)",0,0,0,0,0,0
,0,"MelodicInstrument::~MelodicInstrument(const class MelodicInstrument*) (always inlined)",0,0,0,0,0,0
"functions.cpp",1804,"memcasecmp(const char*, const char*, long int)",7,0,39,0,0,0
,0,"memcmp",0,0,15,0,0,0
"c_lib_alternatives.S",210,"memcpy()",181,0,312,0,0,0
,0,"memIsNumericChars(const char*, long int) (always inlined)",0,0,0,0,0,0
"c_lib_alternatives.S",1166,"memmove()",24,0,24,0,0,0
"memory_region.cpp",276,"MemoryRegion::alloc(const class MemoryRegion*, long unsigned int, bool, void*)",85,0,522,0,0,0
"memory_region.cpp",573,"MemoryRegion::attemptToGrabNeighbouringMemory(const class MemoryRegion*, void*, long int, long int, long int, void*, long unsigned int, bool)",38,0,193,0,0,0
,0,"MemoryRegion::cache_manager(const class MemoryRegion*) (always inlined)",0,0,0,0,0,0
"memory_region.cpp",825,"MemoryRegion::dealloc(const class MemoryRegion*, void*)",7,0,42,0,0,0
,0,"MemoryRegion::extend(const class MemoryRegion*, void*, long unsigned int, long unsigned int, long unsigned int* restrict, long unsigned int* restrict, void*) (always inlined)",0,0,0,0,0,0
"memory_region.cpp",128,"MemoryRegion::markSpaceAsEmpty(const class MemoryRegion*, long unsigned int, long unsigned int, bool, bool)",49,0,213,0,0,0
,0,"MemoryRegion::markSpaceAsEmpty(const class MemoryRegion*, long unsigned int, long unsigned int, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"MemoryRegion::MemoryRegion(const class MemoryRegion*) (always inlined)",0,0,0,0,0,0
,0,"MemoryRegion::padSize(const class MemoryRegion*, long unsigned int) (always inlined)",0,0,0,0,0,0
"memory_region.cpp",66,"MemoryRegion::padSize(long unsigned int, const class MemoryRegion*)",4,0,20,0,0,0
"memory_region.cpp",35,"MemoryRegion::setup(const class MemoryRegion*, void*, long int, long unsigned int, long unsigned int)",14,0,37,0,0,0
,0,"MemoryRegion::shortenLeft(const class MemoryRegion*, void*, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"MemoryRegion::shortenRight(const class MemoryRegion*, void*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"MemoryRegion::writeTempHeadersBeforeASteal(const class MemoryRegion*, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"MemoryRegion::~MemoryRegion(const class MemoryRegion*, const int) (always inlined)",0,0,0,0,0,0
"c_lib_alternatives.S",43,"memset",32,23,32,23,58,2913
,0,"memset()",31,22,32,23,58,2913
,0,"memToUIntOrError(const char* restrict, const char*) (always inlined)",0,0,0,0,0,0
"menu_item.h",108,"MenuItem::beginSession(const class MenuItem*, class MenuItem*)",1,0,1,0,0,0
"menu_item.h",67,"MenuItem::buttonAction(const class MenuItem*, unsigned char, bool, bool)",1,0,2,0,0,0
"menu_item.cpp",28,"MenuItem::checkPermissionToBeginSession(const class MenuItem*, class ModControllableAudio*, long int, class MultiRange**)",2,0,5,0,0,0
"menu_item.cpp",47,"MenuItem::drawItemsForOled(class span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>, const long int, const long int)",7,0,53,0,0,0
"menu_item.cpp",42,"MenuItem::drawName(const class MenuItem*)",1,0,29,0,0,0
"menu_item.h",119,"MenuItem::getIndexOfPatchedParamToBlink(const class MenuItem*)",1,0,2,0,0,0
"menu_item.h",235,"MenuItem::getName(const class MenuItem*)",1,0,6,0,0,0
"menu_item.h",128,"MenuItem::getParamIndex(const class MenuItem*)",1,0,2,0,0,0
"menu_item.h",209,"MenuItem::getTitle(const class MenuItem*)",1,0,6,0,0,0
"menu_item.h",72,"MenuItem::horizontalEncoderAction(const class MenuItem*, long int)",1,0,1,0,0,0
"menu_item.h",242,"MenuItem::isRelevant(const class MenuItem*, class ModControllableAudio*, long int)",1,0,2,0,0,0
"menu_item.cpp",33,"MenuItem::learnCC(const class MenuItem*, class MIDIDevice*, long int, long int, long int)",1,0,10,0,0,0
"menu_item.h",158,"MenuItem::learnKnob(const class MenuItem*, class MIDIDevice*, long int, long int, long int)",1,0,1,0,0,0
"menu_item.h",168,"MenuItem::learnProgramChange(const class MenuItem*, class MIDIDevice*, long int, long int)",1,0,1,0,0,0
,0,"MenuItem::MenuItem(const class MenuItem*) (always inlined)",0,0,0,0,0,0
"menu_item.h",150,"MenuItem::patchingSourceShortcutPress(const class MenuItem*, enum PatchSource, bool)",1,0,2,0,0,0
"menu_item.cpp",37,"MenuItem::renderOLED(const class MenuItem*)",2,0,17,0,0,0
"menu_item.h",135,"MenuItem::shouldBlinkPatchingSourceShortcut(const class MenuItem*, enum PatchSource, unsigned char*)",1,0,2,0,0,0
"menu_item_with_cc_learning.cpp",42,"MenuItemWithCCLearning::learnKnob(const class MenuItemWithCCLearning*, class MIDIDevice*, long int, long int, long int)",6,0,49,0,0,0
"menu_item_with_cc_learning.cpp",26,"MenuItemWithCCLearning::unlearnAction(const class MenuItemWithCCLearning*)",12,0,71,0,0,0
,0,"Metronome::setVolume(const class Metronome*, long int) (always inlined)",0,0,0,0,0,0
,0,"Metronome::trigger(const class Metronome*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"MetronomeVolume::MetronomeVolume(const class MetronomeVolume*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"metronome_volume.h",29,"MetronomeVolume::readCurrentValue(const class MetronomeVolume*)",2,0,5,0,0,0
"value.h",42,"MetronomeVolume::writeCurrentValue(const class MetronomeVolume*)",2,0,21,0,0,0
"metronome_volume.h",24,"MetronomeVolume::~MetronomeVolume(const class MetronomeVolume*)",2,0,6,0,0,0
"menu_item.h",54,"MetronomeVolume::~MetronomeVolume(const class MetronomeVolume*)",1,0,1,0,0,0
"uart.c",268,"MIDI_TX_INT_TrnEnd(long unsigned int)",8,0,20,0,0,0
"mtu.h",35,"midiAndGateOutputTimerInterrupt(long unsigned int)",7,0,23,0,0,0
,0,"midiAndGateTimerGoneOff() (always inlined)",0,0,0,0,0,0
,0,"MIDIDevice::dataEntryMessageReceived(const class MIDIDevice*, class ModelStack*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MIDIDevice::hasDefaultVelocityToLevelSet(const class MIDIDevice*) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",33,"MIDIDevice::MIDIDevice(const class MIDIDevice*)",8,0,33,0,0,0
"midi_device.cpp",190,"MIDIDevice::readFromFile(const class MIDIDevice*, class Deserializer&)",12,0,59,0,0,0
,0,"MIDIDevice::sendAllMCMs(const class MIDIDevice*) (always inlined)",0,0,0,0,0,0
"midi_device.h",102,"MIDIDevice::sendRPN(const class MIDIDevice*, long int, long int, long int, long int)",3,0,50,0,0,0
"midi_device.cpp",136,"MIDIDevice::wantsToOutputMIDIOnChannel(const class MIDIDevice*, long int, long int)",5,0,30,0,0,0
,0,"MIDIDevice::wantsToOutputMIDIOnChannel(const class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",351,"MIDIDevice::worthWritingToFile(const class MIDIDevice*)",2,0,19,0,0,0
,0,"MIDIDevice::writeDefinitionAttributesToFile(const class MIDIDevice*, class Serializer&) (always inlined)",0,0,0,0,0,0
,0,"MIDIDevice::writePorts(const class MIDIDevice*, class Serializer&) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",47,"MIDIDevice::writeReferenceToFile(const class MIDIDevice*, class Serializer&, const char*)",3,0,18,0,0,0
"midi_device.cpp",218,"MIDIDevice::writeToFile(const class MIDIDevice*, const char*, class Serializer&)",11,0,44,0,0,0
"midi_device.cpp",555,"MIDIDeviceDINPorts::getDisplayName(const class MIDIDeviceDINPorts*)",1,0,2,0,0,0
"midi_device.cpp",563,"MIDIDeviceDINPorts::sendBufferSpace(const class MIDIDeviceDINPorts*)",1,0,2,0,0,0
"midi_device.cpp",559,"MIDIDeviceDINPorts::sendMessage(const class MIDIDeviceDINPorts*, unsigned char, unsigned char, unsigned char, unsigned char)",1,0,5,0,0,0
"midi_device.cpp",567,"MIDIDeviceDINPorts::sendSysex(const class MIDIDeviceDINPorts*, const unsigned char*, long int)",3,0,27,0,0,0
"midi_device.cpp",547,"MIDIDeviceDINPorts::writeReferenceAttributesToFile(const class MIDIDeviceDINPorts*, class Serializer&)",1,0,12,0,0,0
"midi_device.cpp",551,"MIDIDeviceDINPorts::writeToFlash(const class MIDIDeviceDINPorts*, unsigned char*)",1,0,3,0,0,0
"midi_device.cpp",586,"MIDIDeviceLoopback::getDisplayName(const class MIDIDeviceLoopback*)",1,0,2,0,0,0
"midi_device.cpp",593,"MIDIDeviceLoopback::sendBufferSpace(const class MIDIDeviceLoopback*)",1,0,2,0,0,0
"midi_device.cpp",590,"MIDIDeviceLoopback::sendMessage(const class MIDIDeviceLoopback*, unsigned char, unsigned char, unsigned char, unsigned char)",1,0,1,0,0,0
"midi_device.cpp",597,"MIDIDeviceLoopback::sendSysex(const class MIDIDeviceLoopback*, const unsigned char*, long int)",1,0,1,0,0,0
"midi_device.cpp",578,"MIDIDeviceLoopback::writeReferenceAttributesToFile(const class MIDIDeviceLoopback*, class Serializer&)",1,0,12,0,0,0
"midi_device.cpp",582,"MIDIDeviceLoopback::writeToFlash(const class MIDIDeviceLoopback*, unsigned char*)",1,0,3,0,0,0
"midi_device_lumi_keys.cpp",243,"MIDIDeviceLumiKeys::determineScaleAndRootNoteOffsetFromNotes(const class MIDIDeviceLumiKeys*, unsigned char*, unsigned char)",3,0,25,0,0,0
"midi_device_lumi_keys.cpp",187,"MIDIDeviceLumiKeys::getCounterCodes(unsigned char*, long int, unsigned char, const class MIDIDeviceLumiKeys*)",8,0,17,0,0,0
"midi_device_lumi_keys.cpp",77,"MIDIDeviceLumiKeys::hookOnChangeRootNote(const class MIDIDeviceLumiKeys*)",1,0,13,0,0,0
"midi_device_lumi_keys.cpp",81,"MIDIDeviceLumiKeys::hookOnChangeScale(const class MIDIDeviceLumiKeys*)",2,0,12,0,0,0
"midi_device_lumi_keys.cpp",38,"MIDIDeviceLumiKeys::hookOnConnected(const class MIDIDeviceLumiKeys*)",13,0,58,0,0,0
"midi_device_lumi_keys.cpp",86,"MIDIDeviceLumiKeys::hookOnEnterScaleMode(const class MIDIDeviceLumiKeys*)",2,0,6,0,0,0
"midi_device_lumi_keys.cpp",91,"MIDIDeviceLumiKeys::hookOnExitScaleMode(const class MIDIDeviceLumiKeys*)",2,0,7,0,0,0
"midi_device_lumi_keys.cpp",96,"MIDIDeviceLumiKeys::hookOnMIDILearn(const class MIDIDeviceLumiKeys*)",1,0,1,0,0,0
"midi_device_lumi_keys.cpp",113,"MIDIDeviceLumiKeys::hookOnRecalculateColour(const class MIDIDeviceLumiKeys*)",19,0,107,0,0,0
"midi_device_lumi_keys.cpp",73,"MIDIDeviceLumiKeys::hookOnWriteHostedDeviceToFile(const class MIDIDeviceLumiKeys*)",1,0,1,0,0,0
"midi_device_lumi_keys.cpp",29,"MIDIDeviceLumiKeys::matchesVendorProduct(short unsigned int, short unsigned int)",1,0,8,0,0,0
,0,"MIDIDeviceLumiKeys::MIDIDeviceLumiKeys(const class MIDIDeviceLumiKeys*) (always inlined)",0,0,0,0,0,0
"midi_device_lumi_keys.cpp",169,"MIDIDeviceLumiKeys::sendLumiCommand(const class MIDIDeviceLumiKeys*, unsigned char*, unsigned char)",8,0,33,0,0,0
"midi_device_lumi_keys.cpp",266,"MIDIDeviceLumiKeys::setColour(const class MIDIDeviceLumiKeys*, enum ColourZone, class RGB)",3,0,36,0,0,0
"midi_device_lumi_keys.cpp",205,"MIDIDeviceLumiKeys::setMIDIMode(const class MIDIDeviceLumiKeys*, enum MIDIMode)",3,0,14,0,0,0
,0,"MIDIDeviceLumiKeys::setMPENumChannels(const class MIDIDeviceLumiKeys*, unsigned char) (always inlined)",0,0,0,0,0,0
"midi_device_lumi_keys.cpp",214,"MIDIDeviceLumiKeys::setMPEZone(const class MIDIDeviceLumiKeys*, enum MPEZone)",3,0,14,0,0,0
"midi_device_lumi_keys.cpp",232,"MIDIDeviceLumiKeys::setRootNote(const class MIDIDeviceLumiKeys*, short int)",3,0,15,0,0,0
"midi_device_lumi_keys.cpp",259,"MIDIDeviceLumiKeys::setScale(const class MIDIDeviceLumiKeys*, enum Scale)",3,0,15,0,0,0
,0,"MIDIDeviceUSB::connectedNow(const class MIDIDeviceUSB*, long int) (always inlined)",0,0,0,0,0,0
,0,"MIDIDeviceUSB::MIDIDeviceUSB(const class MIDIDeviceUSB*, unsigned char) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",392,"MIDIDeviceUSB::sendBufferSpace(const class MIDIDeviceUSB*)",3,0,25,0,0,0
"midi_device.cpp",360,"MIDIDeviceUSB::sendMCMsNowIfNeeded(const class MIDIDeviceUSB*)",7,0,22,2,4,12
"midi_device.cpp",369,"MIDIDeviceUSB::sendMessage(const class MIDIDeviceUSB*, unsigned char, unsigned char, unsigned char, unsigned char)",6,0,33,0,0,0
,0,"MIDIDeviceUSB::sendMessage(const class MIDIDeviceUSB*, unsigned char, unsigned char, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",408,"MIDIDeviceUSB::sendSysex(const class MIDIDeviceUSB*, const unsigned char*, long int)",12,0,98,0,0,0
,0,"MIDIDeviceUSB::sendSysex(const class MIDIDeviceUSB*, const unsigned char*, long int) (always inlined)",0,0,0,0,0,0
,0,"MIDIDeviceUSBHosted::callHook(const class MIDIDeviceUSBHosted*, enum Hook) (always inlined)",0,0,0,0,0,0
"d_string.h",88,"MIDIDeviceUSBHosted::getDisplayName(const class MIDIDeviceUSBHosted*)",1,0,8,0,0,0
,0,"MIDIDeviceUSBHosted::getDisplayName(const class MIDIDeviceUSBHosted*) (always inlined)",0,0,0,0,0,0
,0,"MIDIDeviceUSBHosted::MIDIDeviceUSBHosted(const class MIDIDeviceUSBHosted*) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",468,"MIDIDeviceUSBHosted::writeReferenceAttributesToFile(const class MIDIDeviceUSBHosted*, class Serializer&)",4,0,38,0,0,0
"midi_device.cpp",474,"MIDIDeviceUSBHosted::writeToFlash(const class MIDIDeviceUSBHosted*, unsigned char*)",2,0,5,0,0,0
"midi_device.cpp",533,"MIDIDeviceUSBUpstream::getDisplayName(const class MIDIDeviceUSBUpstream*)",4,0,15,0,0,0
"midi_device.cpp",524,"MIDIDeviceUSBUpstream::writeReferenceAttributesToFile(const class MIDIDeviceUSBUpstream*, class Serializer&)",1,0,19,0,0,0
"midi_device.cpp",528,"MIDIDeviceUSBUpstream::writeToFlash(const class MIDIDeviceUSBUpstream*, unsigned char*)",2,0,22,0,0,0
"midi_drum.cpp",126,"MIDIDrum::expressionEvent(const class MIDIDrum*, long int, long int)",2,0,13,0,0,0
,0,"MIDIDrum::expressionEvent(const class MIDIDrum*, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_drum.cpp",129,"MIDIDrum::expressionEvent(long int, const class MIDIDrum*, long int, long int)",1,0,4,0,0,0
"midi_drum.cpp",83,"MIDIDrum::getName(const class MIDIDrum*, char*)",13,0,63,0,0,0
"midi_drum.h",33,"MIDIDrum::getNumChannels(const class MIDIDrum*)",1,0,2,0,0,0
,0,"MIDIDrum::MIDIDrum(const class MIDIDrum*) (always inlined)",0,0,0,0,0,0
"midi_drum.cpp",112,"MIDIDrum::modEncoderAction(const class MIDIDrum*, class ModelStackWithThreeMainThings*, signed char, unsigned char)",5,0,38,0,0,0
"midi_drum.cpp",38,"MIDIDrum::noteOff(const class MIDIDrum*, class ModelStackWithThreeMainThings*, long int)",3,0,13,0,0,0
"midi_drum.cpp",32,"MIDIDrum::noteOn(const class MIDIDrum*, class ModelStackWithThreeMainThings*, unsigned char, class Kit*, const short int*, long int, long unsigned int, long int, long unsigned int)",3,0,16,0,0,0
"midi_drum.cpp",129,"MIDIDrum::polyphonicExpressionEventOnChannelOrNote(const class MIDIDrum*, long int, long int, long int, enum MIDICharacteristic)",1,0,4,0,0,0
"midi_drum.cpp",67,"MIDIDrum::readFromFile(const class MIDIDrum*, class Deserializer&, class Song*, class Clip*, long int)",7,0,51,0,0,0
"non_audio_drum.cpp",40,"MIDIDrum::unassignAllVoices(const class MIDIDrum*)",2,0,6,0,0,0
"midi_drum.cpp",49,"MIDIDrum::writeToFile(const class MIDIDrum*, class Serializer&, bool, class ParamManager*)",9,0,55,0,0,0
"midi_drum.h",22,"MIDIDrum::~MIDIDrum(const class MIDIDrum*)",2,0,6,0,0,0
"drum.h",46,"MIDIDrum::~MIDIDrum(const class MIDIDrum*)",1,0,1,0,0,0
"midi_engine.cpp",414,"MidiEngine::anythingInOutputBuffer(const class MidiEngine*)",3,1,15,12,125,1635
"uart.c",245,"MidiEngine::checkIncomingSerialMidi(const class MidiEngine*)",43,1,166,9,4512,44453
,0,"MidiEngine::checkIncomingUsbMidi(const class MidiEngine*) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::checkIncomingUsbSysex(const class MidiEngine*, const unsigned char*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_engine.cpp",583,"MidiEngine::flushMIDI(const class MidiEngine*)",4,0,9,0,0,0
"midi_engine.cpp",304,"MidiEngine::flushUSBMIDIOutput(const class MidiEngine*)",26,0,130,0,0,0
,0,"MidiEngine::flushUSBMIDIOutput(const class MidiEngine*) (always inlined)",0,0,0,0,0,0
"midi_engine.cpp",943,"MidiEngine::getMidiMessageLength(unsigned char, const class MidiEngine*)",6,0,15,0,0,0
,0,"MidiEngine::getPotentialNumConnectedUSBMIDIDevices(const class MidiEngine*, long int) (always inlined)",0,0,0,0,0,0
"midi_engine.cpp",978,"MidiEngine::midiMessageReceived(class MIDIDevice*, unsigned char, unsigned char, unsigned char, unsigned char, long unsigned int*, const class MidiEngine*)",190,0,933,0,0,0
"midi_engine.cpp",780,"MidiEngine::midiSysexReceived(class MIDIDevice*, unsigned char*, long int, const class MidiEngine*)",34,0,265,0,0,0
,0,"MidiEngine::midiSysexReceived(const class MidiEngine*, class MIDIDevice*, unsigned char*, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::sendAllNotesOff(const class MidiEngine*, struct MIDISource, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::sendBank(const class MidiEngine*, struct MIDISource, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::sendCC(const class MidiEngine*, struct MIDISource, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_engine.cpp",434,"MidiEngine::sendCC(struct MIDISource, long int, long int, long int, long int, const class MidiEngine*)",4,0,18,0,0,0
,0,"MidiEngine::sendChannelAftertouch(const class MidiEngine*, struct MIDISource, long int, unsigned char, long int) (always inlined)",0,0,0,0,0,0
"midi_engine.cpp",441,"MidiEngine::sendClock(struct MIDISource, bool, long int, const class MidiEngine*)",3,0,10,0,0,0
"midi_engine.cpp",453,"MidiEngine::sendContinue(struct MIDISource, const class MidiEngine*)",4,0,17,0,0,0
"midi_engine.cpp",492,"MidiEngine::sendMidi(struct MIDISource, unsigned char, unsigned char, unsigned char, unsigned char, long int, bool, const class MidiEngine*)",29,0,146,0,0,0
"midi_engine.cpp",417,"MidiEngine::sendNote(struct MIDISource, bool, long int, unsigned char, unsigned char, long int, const class MidiEngine*)",4,0,23,0,0,0
,0,"MidiEngine::sendPGMChange(const class MidiEngine*, struct MIDISource, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::sendPitchBend(const class MidiEngine*, struct MIDISource, long int, unsigned char, unsigned char, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::sendPolyphonicAftertouch(const class MidiEngine*, struct MIDISource, long int, unsigned char, unsigned char, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::sendPositionPointer(const class MidiEngine*, struct MIDISource, short unsigned int) (always inlined)",0,0,0,0,0,0
"midi_engine.cpp",590,"MidiEngine::sendSerialMidi(unsigned char, unsigned char, unsigned char, unsigned char, const class MidiEngine*)",10,0,39,0,0,0
"midi_engine.cpp",448,"MidiEngine::sendStart(struct MIDISource, const class MidiEngine*)",4,0,17,0,0,0
,0,"MidiEngine::sendStop(const class MidiEngine*, struct MIDISource) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::sendSubBank(const class MidiEngine*, struct MIDISource, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::sendUsbMidi(const class MidiEngine*, unsigned char, unsigned char, unsigned char, unsigned char, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiEngine::setupUSBHostReceiveTransfer(const class MidiEngine*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::aftertouchReceived(const class MidiFollow*, class MIDIDevice*, long int, long int, long int, bool*, class ModelStack*) (always inlined)",0,0,0,0,0,0
"midi_follow.cpp",718,"MidiFollow::checkMidiFollowMatch(class MIDIDevice*, unsigned char, const class MidiFollow*)",5,0,14,0,0,0
,0,"MidiFollow::displayParamControlError(const class MidiFollow*, long int, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",66,"MidiFollow::getActiveClip(class ModelStack*, const class MidiFollow*)",9,0,18,0,0,0
,0,"MidiFollow::getCCFromParam(const class MidiFollow*, enum Kind, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::getModelStackWithParam(const class MidiFollow*, class ModelStackWithTimelineCounter*, class Clip*, long int, long int, long int, bool) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::getModelStackWithParamForAudioClip(const class MidiFollow*, class ModelStackWithTimelineCounter*, class Clip*, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_follow.cpp",218,"MidiFollow::getModelStackWithParamForClip(class ModelStackWithTimelineCounter*, class Clip*, long int, long int, const class MidiFollow*)",20,0,92,0,0,0
,0,"MidiFollow::getModelStackWithParamForKitClip(const class MidiFollow*, class ModelStackWithTimelineCounter*, class Clip*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::getModelStackWithParamForSynthClip(const class MidiFollow*, class ModelStackWithTimelineCounter*, class Clip*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::getSelectedClip(const class MidiFollow*) (always inlined)",0,0,0,0,0,0
"midi_follow.cpp",116,"MidiFollow::getSelectedOrActiveClip(const class MidiFollow*)",17,0,47,0,0,0
,0,"MidiFollow::getSelectedOrActiveClip(const class MidiFollow*) (always inlined)",0,0,0,0,0,0
"midi_follow.cpp",520,"MidiFollow::handleReceivedCC(class ModelStackWithTimelineCounter&, class Clip*, long int, long int, const class MidiFollow*)",44,0,261,0,0,0
"midi_follow.cpp",89,"MidiFollow::init(const class MidiFollow*)",7,0,23,0,0,0
,0,"MidiFollow::initMapping(const class MidiFollow*, long int[8]*) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::isFeedbackEnabled(const class MidiFollow*) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::noteMessageReceived(const class MidiFollow*, class MIDIDevice*, bool, long int, long int, long int, bool*, bool, class ModelStack*) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::readDefaultMappingsFromFile(const class MidiFollow*, class Deserializer&) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::readDefaultsFromFile(const class MidiFollow*, class StorageManager&) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::removeClip(const class MidiFollow*, class Clip*) (always inlined)",0,0,0,0,0,0
"midi_follow.cpp",644,"MidiFollow::sendCCForMidiFollowFeedback(long int, long int, long int, const class MidiFollow*)",9,0,30,0,0,0
,0,"MidiFollow::sendCCWithoutModelStackForMidiFollowFeedback(const class MidiFollow*, long int, bool) (always inlined)",0,0,0,0,0,0
"midi_follow.cpp",418,"MidiFollow::sendNoteToClip(class MIDIDevice*, class Clip*, enum MIDIMatchType, bool, long int, long int, long int, bool*, bool, class ModelStack*, const class MidiFollow*)",20,0,96,0,0,0
,0,"MidiFollow::sendNoteToClip(const class MidiFollow*, class MIDIDevice*, class Clip*, enum MIDIMatchType, bool, long int, long int, long int, bool*, bool, class ModelStack*) (always inlined)",0,0,0,0,0,0
,0,"MidiFollow::writeDefaultMappingsToFile(const class MidiFollow*) (always inlined)",0,0,0,0,0,0
"midi_follow.cpp",745,"MidiFollow::writeDefaultsToFile(class StorageManager&, const class MidiFollow*)",25,0,166,0,0,0
,0,"MidiFollow::writeDefaultsToFile(const class MidiFollow*, class StorageManager&) (always inlined)",0,0,0,0,0,0
,0,"MIDIInputChannel::MIDIInputChannel(const class MIDIInputChannel*) (always inlined)",0,0,0,0,0,0
,0,"MIDIInstrument::allNotesOff(const class MIDIInstrument*) (always inlined)",0,0,0,0,0,0
"midi_instrument.cpp",189,"MIDIInstrument::ccReceivedFromInputMIDIChannel(const class MIDIInstrument*, long int, long int, class ModelStackWithTimelineCounter*)",1,0,3,0,0,0
,0,"MIDIInstrument::changeControlNumberForModKnob(const class MIDIInstrument*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_instrument.cpp",1023,"MIDIInstrument::combineMPEtoMono(const class MIDIInstrument*, long int, long int)",21,0,77,0,0,0
,0,"MIDIInstrument::doesAutomationExistOnMIDIParam(const class MIDIInstrument*, class ModelStackWithThreeMainThings*, long int) (always inlined)",0,0,0,0,0,0
,0,"MIDIInstrument::getFirstUnusedCC(const class MIDIInstrument*, class ModelStackWithThreeMainThings*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_instrument.cpp",128,"MIDIInstrument::getKnobPosForNonExistentParam(const class MIDIInstrument*, long int, class ModelStackWithAutoParam*)",1,0,10,0,0,0
"non_audio_instrument.h",56,"MIDIInstrument::getModelStackWithParam(const class MIDIInstrument*, class ModelStackWithTimelineCounter*, class Clip*, long int, enum Kind, bool, bool)",4,0,17,0,0,0
"midi_instrument.h",68,"MIDIInstrument::getModKnobMode(const class MIDIInstrument*)",1,0,2,0,0,0
,0,"MIDIInstrument::getOutputMasterChannel(const class MIDIInstrument*) (always inlined)",0,0,0,0,0,0
"midi_instrument.cpp",115,"MIDIInstrument::getParamFromModEncoder(const class MIDIInstrument*, long int, class ModelStackWithThreeMainThings*, bool)",5,0,18,0,0,0
"midi_instrument.cpp",140,"MIDIInstrument::getParamToControlFromInputMIDIChannel(const class MIDIInstrument*, long int, class ModelStackWithThreeMainThings*)",16,0,57,0,0,0
"midi_instrument.h",77,"MIDIInstrument::getSlotXMLTag(const class MIDIInstrument*)",1,0,15,0,0,0
"midi_instrument.h",99,"MIDIInstrument::getSubSlotXMLTag(const class MIDIInstrument*)",1,0,3,0,0,0
"midi_instrument.h",97,"MIDIInstrument::getXMLTag(const class MIDIInstrument*)",1,0,3,0,0,0
"midi_instrument.cpp",38,"MIDIInstrument::MIDIInstrument(const class MIDIInstrument*)",11,0,68,0,0,0
"midi_instrument.cpp",100,"MIDIInstrument::modButtonAction(const class MIDIInstrument*, unsigned char, bool, class ParamManagerForTimeline*)",5,0,15,0,0,0
,0,"MIDIInstrument::modButtonAction(const class MIDIInstrument*, unsigned char, bool, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
"midi_instrument.cpp",50,"MIDIInstrument::modEncoderButtonAction(const class MIDIInstrument*, unsigned char, bool, class ModelStackWithThreeMainThings*)",15,0,52,0,0,0
"midi_instrument.cpp",206,"MIDIInstrument::monophonicExpressionEvent(const class MIDIInstrument*, long int, long int)",2,0,7,0,0,0
,0,"MIDIInstrument::moveAutomationToDifferentCC(const class MIDIInstrument*, long int, long int, class ModelStackWithThreeMainThings*) (always inlined)",0,0,0,0,0,0
"midi_instrument.h",79,"MIDIInstrument::noteOffPostArp(const class MIDIInstrument*, long int, long int, long int)",20,0,121,0,0,0
"midi_instrument.cpp",683,"MIDIInstrument::noteOnPostArp(const class MIDIInstrument*, long int, struct ArpNote*)",33,0,252,0,0,0
"midi_instrument.cpp",672,"MIDIInstrument::offerReceivedNote(const class MIDIInstrument*, class ModelStackWithTimelineCounter*, class MIDIDevice*, bool, long int, long int, long int, bool, bool*)",3,0,27,0,0,0
"midi_instrument.cpp",819,"MIDIInstrument::outputAllMPEValuesOnMemberChannel(const class MIDIInstrument*, const short int*, long int)",11,0,45,0,0,0
"midi_instrument.h",79,"MIDIInstrument::polyphonicExpressionEventPostArpeggiator(const class MIDIInstrument*, long int, long int, long int, struct ArpNote*)",35,0,147,0,0,0
,0,"MIDIInstrument::readMIDIParamFromFile(const class MIDIInstrument*, class Deserializer&, long int, class MIDIParamCollection*, signed char*) (always inlined)",0,0,0,0,0,0
"midi_instrument.cpp",388,"MIDIInstrument::readModKnobAssignmentsFromFile(const class MIDIInstrument*, long int, class ParamManagerForTimeline*, class StorageManager&)",36,0,125,0,0,0
"midi_instrument.cpp",332,"MIDIInstrument::readTagFromFile(const class MIDIInstrument*, class Deserializer&, const char*)",26,0,156,0,0,0
"midi_instrument.cpp",277,"MIDIInstrument::sendMIDIPGM(const class MIDIInstrument*)",2,0,4,0,0,0
,0,"MIDIInstrument::sendMIDIPGM(const class MIDIInstrument*) (always inlined)",0,0,0,0,0,0
"midi_instrument.cpp",193,"MIDIInstrument::sendMonophonicExpressionEvent(const class MIDIInstrument*, long int)",10,0,53,0,0,0
,0,"MIDIInstrument::sendNoteToInternal(const class MIDIInstrument*, bool, long int, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"MIDIInstrument::sendsToInternal(const class MIDIInstrument*) (always inlined)",0,0,0,0,0,0
,0,"MIDIInstrument::sendsToMPE(const class MIDIInstrument*) (always inlined)",0,0,0,0,0,0
"midi_instrument.cpp",248,"MIDIInstrument::setActiveClip(const class MIDIInstrument*, class ModelStackWithTimelineCounter*, enum PgmChangeSend)",15,0,77,0,0,0
"midi_instrument.cpp",285,"MIDIInstrument::writeDataToFile(const class MIDIInstrument*, class Serializer&, class Clip*, class Song*)",23,0,147,0,0,0
"midi_instrument.h",36,"MIDIInstrument::~MIDIInstrument(const class MIDIInstrument*)",6,0,28,0,0,0
"midi_instrument.h",36,"MIDIInstrument::~MIDIInstrument(const class MIDIInstrument*)",6,0,24,0,0,0
,0,"MIDIInstrument::~MIDIInstrument(const class MIDIInstrument*) (always inlined)",0,0,0,0,0,0
"knob.h",38,"MIDIKnob::is14Bit(const class MIDIKnob*)",1,0,5,0,0,0
"knob.h",37,"MIDIKnob::isRelative(const class MIDIKnob*)",1,0,2,0,0,0
,0,"MIDIKnob::MIDIKnob(const class MIDIKnob*) (always inlined)",0,0,0,0,0,0
"knob.h",39,"MIDIKnob::topValueIs127(const class MIDIKnob*)",1,0,7,0,0,0
"midi_knob_array.cpp",26,"MidiKnobArray::insertKnob(const class MidiKnobArray*, long int)",9,0,26,0,0,0
,0,"MidiKnobArray::insertKnobAtEnd(const class MidiKnobArray*) (always inlined)",0,0,0,0,0,0
,0,"MidiKnobArray::MidiKnobArray(const class MidiKnobArray*) (always inlined)",0,0,0,0,0,0
,0,"MidiKnobArray::~MidiKnobArray(const class MidiKnobArray*) (always inlined)",0,0,0,0,0,0
,0,"MIDIParam::MIDIParam(const class MIDIParam*) (always inlined)",0,0,0,0,0,0
,0,"MIDIParam::~MIDIParam(const class MIDIParam*) (always inlined)",0,0,0,0,0,0
"midi_param_collection.cpp",95,"MIDIParamCollection::appendParamCollection(const class MIDIParamCollection*, class ModelStackWithParamCollection*, class ModelStackWithParamCollection*, long int, long int, bool)",9,0,38,0,0,0
"midi_param_collection.cpp",59,"MIDIParamCollection::beenCloned(const class MIDIParamCollection*, bool, long int)",3,0,23,0,0,0
"resizeable_array.h",56,"MIDIParamCollection::deleteAllAutomation(const class MIDIParamCollection*, class Action*, class ModelStackWithParamCollection*)",5,0,30,0,0,0
,0,"MIDIParamCollection::deleteAllParams(const class MIDIParamCollection*, class Action*, bool) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"MIDIParamCollection::generateRepeats(const class MIDIParamCollection*, class ModelStackWithParamCollection*, long unsigned int, long unsigned int, bool)",4,0,23,0,0,0
"midi_param_collection.cpp",181,"MIDIParamCollection::getAutoParamFromId(const class MIDIParamCollection*, class ModelStackWithParamId*, bool)",5,0,10,0,0,0
"midi_param_collection.h",69,"MIDIParamCollection::getParamKind(const class MIDIParamCollection*)",1,0,2,0,0,0
"resizeable_array.h",56,"MIDIParamCollection::grabValuesFromPos(const class MIDIParamCollection*, long unsigned int, class ModelStackWithParamCollection*)",8,0,43,0,0,0
"param_collection.cpp",62,"MIDIParamCollection::knobPosToParamValue(const class MIDIParamCollection*, long int, class ModelStackWithAutoParam*)",1,0,5,0,0,0
,0,"MIDIParamCollection::makeInterpolatedCCsGoodAgain(const class MIDIParamCollection*, long int) (always inlined)",0,0,0,0,0,0
"midi_param_collection.cpp",275,"MIDIParamCollection::mayParamInterpolate(const class MIDIParamCollection*, long int)",1,0,2,0,0,0
,0,"MIDIParamCollection::MIDIParamCollection(const class MIDIParamCollection*, class ParamCollectionSummary*) (always inlined)",0,0,0,0,0,0
"midi_param_collection.cpp",257,"MIDIParamCollection::notifyParamModifiedInSomeWay(const class MIDIParamCollection*, const class ModelStackWithAutoParam*, long int, bool, bool, bool)",8,0,44,0,0,0
"param_collection.cpp",74,"MIDIParamCollection::notifyPingpongOccurred(const class MIDIParamCollection*, class ModelStackWithParamCollection*)",4,0,17,0,0,0
"resizeable_array.h",56,"MIDIParamCollection::nudgeNonInterpolatingNodesAtPos(const class MIDIParamCollection*, long int, long int, long int, class Action*, class ModelStackWithParamCollection*)",4,0,29,0,0,0
"midi_param_collection.cpp",133,"MIDIParamCollection::processCurrentPos(const class MIDIParamCollection*, class ModelStackWithParamCollection*, long int, bool, bool, bool)",10,0,45,0,0,0
"midi_param_collection.cpp",154,"MIDIParamCollection::remotelySwapParamState(const class MIDIParamCollection*, class AutoParamState*, class ModelStackWithParamId*)",5,0,15,0,0,0
,0,"MIDIParamCollection::sendMIDI(const class MIDIParamCollection*, struct MIDISource, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_param_collection.cpp",67,"MIDIParamCollection::setPlayPos(const class MIDIParamCollection*, long unsigned int, class ModelStackWithParamCollection*, bool)",6,0,26,0,0,0
"resizeable_array.h",56,"MIDIParamCollection::shiftHorizontally(const class MIDIParamCollection*, class ModelStackWithParamCollection*, long int, long int)",3,0,22,0,0,0
"midi_param_collection.cpp",114,"MIDIParamCollection::trimToLength(const class MIDIParamCollection*, long unsigned int, class ModelStackWithParamCollection*, class Action*, bool)",6,0,26,0,0,0
,0,"MIDIParamCollection::writeToFile(const class MIDIParamCollection*, class Serializer&) (always inlined)",0,0,0,0,0,0
"midi_param_collection.cpp",39,"MIDIParamCollection::~MIDIParamCollection(const class MIDIParamCollection*)",2,0,8,0,0,0
"midi_param_collection.cpp",39,"MIDIParamCollection::~MIDIParamCollection(const class MIDIParamCollection*)",4,0,25,0,0,0
,0,"MIDIParamVector::getElement(const class MIDIParamVector*, long int) (always inlined)",0,0,0,0,0,0
"midi_param_vector.cpp",35,"MIDIParamVector::getOrCreateParamFromCC(const class MIDIParamVector*, long int, bool, long int)",17,0,56,0,0,0
,0,"MIDIParamVector::insertParam(const class MIDIParamVector*, long int) (always inlined)",0,0,0,0,0,0
,0,"MIDIParamVector::MIDIParamVector(const class MIDIParamVector*) (always inlined)",0,0,0,0,0,0
,0,"MIDIParamVector::~MIDIParamVector(const class MIDIParamVector*) (always inlined)",0,0,0,0,0,0
,0,"MIDIPort::channelToZone(const class MIDIPort*, long int) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",228,"MIDIPort::channelToZone(long int, const class MIDIPort*)",5,0,12,0,0,0
,0,"MIDIPort::isChannelPartOfAnMPEZone(const class MIDIPort*, long int) (always inlined)",0,0,0,0,0,0
,0,"MIDIPort::isMasterChannel(const class MIDIPort*, long int) (always inlined)",0,0,0,0,0,0
,0,"MIDIPort::MIDIPort(const class MIDIPort*) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",259,"MIDIPort::moveLowerZoneOutOfWayOfUpperZone(const class MIDIPort*)",5,0,14,0,0,0
"midi_device.cpp",248,"MIDIPort::moveUpperZoneOutOfWayOfLowerZone(const class MIDIPort*)",5,0,13,0,0,0
"midi_device.cpp",291,"MIDIPort::readFromFile(const class MIDIPort*, class MIDIDevice*, class Deserializer&)",26,0,93,0,0,0
,0,"MIDIPort::worthWritingToFile(const class MIDIPort*) (always inlined)",0,0,0,0,0,0
"midi_device.cpp",269,"MIDIPort::writeToFile(const class MIDIPort*, const char*, class Serializer&)",12,0,70,0,0,0
,0,"MIDISource::MIDISource(const struct MIDISource*, const class MidiFollow*) (always inlined)",0,0,0,0,0,0
,0,"min<float>(const float&, const float&) (always inlined)",0,0,0,0,0,0
,0,"min<int>(const int&, const int&) (always inlined)",0,0,0,0,0,0
,0,"min<long int>(const long int&, const long int&) (always inlined)",0,0,0,0,0,0
,0,"min<long long int>(const long long int&, const long long int&) (always inlined)",0,0,0,0,0,0
,0,"min<long long unsigned int>(const long long unsigned int&, const long long unsigned int&) (always inlined)",0,0,0,0,0,0
,0,"min<long unsigned int>(const long unsigned int&, const long unsigned int&) (always inlined)",0,0,0,0,0,0
,0,"min<OscType>(const enum OscType&, const enum OscType&) (always inlined)",0,0,0,0,0,0
,0,"min<SampleRepeatMode>(const enum SampleRepeatMode&, const enum SampleRepeatMode&) (always inlined)",0,0,0,0,0,0
,0,"min<short int>(const short int&, const short int&) (always inlined)",0,0,0,0,0,0
,0,"min<signed char>(const signed char&, const signed char&) (always inlined)",0,0,0,0,0,0
,0,"min<unsigned char>(const unsigned char&, const unsigned char&) (always inlined)",0,0,0,0,0,0
,0,"min<unsigned int>(const unsigned int&, const unsigned int&) (always inlined)",0,0,0,0,0,0
,0,"mkdir(class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
,0,"mkiSin(long int, short unsigned int) (always inlined)",0,0,0,0,0,0
"mod.cpp",60,"ModColumn::handlePad(const class ModColumn*, class ModelStackWithTimelineCounter*, struct PressedPad, class KeyboardLayout*)",10,0,90,0,0,0
"mod.cpp",42,"ModColumn::handleVerticalEncoder(const class ModColumn*, signed char, long int)",8,0,105,0,0,0
,0,"ModColumn::ModColumn(const class ModColumn*) (always inlined)",0,0,0,0,0,0
"mod.cpp",29,"ModColumn::renderColumn(const class ModColumn*, class RGB[18]*, long int)",6,0,33,0,0,0
"mod_controllable.h",63,"ModControllable::allowNoteTails(const class ModControllable*, class ModelStackWithSoundFlags*, bool)",1,0,2,0,0,0
"mod_controllable.cpp",28,"ModControllable::getKnobPosForNonExistentParam(const class ModControllable*, long int, class ModelStackWithAutoParam*)",1,0,2,0,0,0
"mod_controllable.cpp",46,"ModControllable::getParamFromMIDIKnob(const class ModControllable*, class MIDIKnob*, class ModelStackWithThreeMainThings*)",3,0,4,0,0,0
"mod_controllable.cpp",39,"ModControllable::getParamFromModEncoder(const class ModControllable*, long int, class ModelStackWithThreeMainThings*, bool)",3,0,4,0,0,0
"mod_controllable.h",46,"ModControllable::modButtonAction(const class ModControllable*, unsigned char, bool, class ParamManagerForTimeline*)",1,0,1,0,0,0
"mod_controllable.h",61,"ModControllable::modEncoderActionForNonExistentParam(const class ModControllable*, long int, long int, class ModelStackWithAutoParam*)",1,0,2,0,0,0
"mod_controllable.h",44,"ModControllable::modEncoderButtonAction(const class ModControllable*, unsigned char, bool, class ModelStackWithThreeMainThings*)",1,0,2,0,0,0
"mod_controllable.h",66,"ModControllable::polyphonicExpressionEventOnChannelOrNote(const class ModControllable*, long int, long int, long int, enum MIDICharacteristic)",1,0,1,0,0,0
"mod_controllable_audio.cpp",1304,"ModControllableAudio::addNoteRowIndexAndStuff(const class ModControllableAudio*, class ModelStackWithTimelineCounter*, long int)",13,0,63,0,0,0
"mod_controllable_audio.cpp",1543,"ModControllableAudio::beginStutter(const class ModControllableAudio*, class ParamManagerForTimeline*)",20,0,83,0,0,0
"mod_controllable_audio.cpp",1778,"ModControllableAudio::clearModFXMemory(const class ModControllableAudio*)",8,0,34,0,0,0
"mod_controllable_audio.cpp",114,"ModControllableAudio::cloneFrom(const class ModControllableAudio*, class ModControllableAudio*)",16,0,31,0,0,0
"mod_controllable_audio.cpp",1913,"ModControllableAudio::displayDelaySettings(const class ModControllableAudio*, bool)",20,0,191,0,0,0
"mod_controllable_audio.cpp",1888,"ModControllableAudio::displayFilterSettings(const class ModControllableAudio*, bool, enum FilterType)",14,0,82,0,0,0
"mod_controllable_audio.cpp",2036,"ModControllableAudio::displayOtherModKnobSettings(const class ModControllableAudio*, unsigned char, bool)",12,0,119,0,0,0
"mod_controllable_audio.cpp",1974,"ModControllableAudio::displaySidechainAndReverbSettings(const class ModControllableAudio*, bool)",14,0,97,0,0,0
,0,"ModControllableAudio::doEQ(const class ModControllableAudio*, bool, bool, long int*, long int*, long int, long int) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1592,"ModControllableAudio::endStutter(const class ModControllableAudio*, class ParamManagerForTimeline*)",12,0,50,0,0,0
"mod_controllable_audio.cpp",1964,"ModControllableAudio::getDelayPingPongStatusDisplayName(const class ModControllableAudio*)",3,0,6,0,0,0
,0,"ModControllableAudio::getDelayPingPongStatusDisplayName(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1672,"ModControllableAudio::getDelaySyncLevelDisplayName(const class ModControllableAudio*, char*)",3,0,36,0,0,0
,0,"ModControllableAudio::getDelaySyncTypeDisplayName(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1630,"ModControllableAudio::getDelayTypeDisplayName(const class ModControllableAudio*)",3,0,6,0,0,0
,0,"ModControllableAudio::getDelayTypeDisplayName(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1712,"ModControllableAudio::getFilterModeDisplayName(const class ModControllableAudio*, enum FilterType)",4,0,9,0,0,0
,0,"ModControllableAudio::getFilterModeDisplayName(const class ModControllableAudio*, enum FilterType) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1680,"ModControllableAudio::getFilterTypeDisplayName(const class ModControllableAudio*, enum FilterType)",5,0,13,0,0,0
,0,"ModControllableAudio::getFilterTypeDisplayName(const class ModControllableAudio*, enum FilterType) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1759,"ModControllableAudio::getHPFModeDisplayName(const class ModControllableAudio*)",5,0,14,0,0,0
"mod_controllable_audio.cpp",1725,"ModControllableAudio::getLPFModeDisplayName(const class ModControllableAudio*)",7,0,15,0,0,0
"mod_controllable_audio.cpp",1285,"ModControllableAudio::getParamFromMIDIKnob(const class ModControllableAudio*, class MIDIKnob*, class ModelStackWithThreeMainThings*)",6,0,27,0,0,0
"mod_controllable_audio.cpp",2004,"ModControllableAudio::getSidechainDisplayName(const class ModControllableAudio*)",6,0,20,0,0,0
,0,"ModControllableAudio::getSidechainDisplayName(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",807,"ModControllableAudio::getStutterRate(const class ModControllableAudio*, class ParamManager*)",15,0,62,0,0,0
,0,"ModControllableAudio::hasBassAdjusted(const class ModControllableAudio*, class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::hasTrebleAdjusted(const class ModControllableAudio*, class ParamManager*) (always inlined)",0,0,0,0,0,0
"param_manager.h",99,"ModControllableAudio::initParams(class ParamManager*)",4,0,29,0,0,0
,0,"ModControllableAudio::isBitcrushingEnabled(const class ModControllableAudio*, class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::isSRREnabled(const class ModControllableAudio*, class ParamManager*) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1812,"ModControllableAudio::learnKnob(const class ModControllableAudio*, class MIDIDevice*, class ParamDescriptor, unsigned char, unsigned char, unsigned char, class Song*)",13,0,56,0,0,0
"mod_controllable_audio.cpp",45,"ModControllableAudio::ModControllableAudio(const class ModControllableAudio*)",34,0,102,0,0,0
"resizeable_array.h",56,"ModControllableAudio::offerReceivedCCToLearnedParamsForClip(const class ModControllableAudio*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*, long int)",29,0,171,0,0,0
,0,"ModControllableAudio::offerReceivedCCToLearnedParamsForSong(const class ModControllableAudio*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithThreeMainThings*) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1487,"ModControllableAudio::offerReceivedPitchBendToLearnedParams(const class ModControllableAudio*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*, long int)",25,0,101,0,0,0
"mod_controllable_audio.cpp",176,"ModControllableAudio::processFX(const class ModControllableAudio*, struct StereoSample*, long int, enum ModFXType, long int, long int, const struct State&, long int*, class ParamManager*)",129,2,993,45,4,184
"mod_controllable_audio.cpp",547,"ModControllableAudio::processReverbSendAndVolume(const class ModControllableAudio*, struct StereoSample*, long int, long int*, long int, long int, long int, long int, bool)",17,6,94,38,3,3067
"mod_controllable_audio.cpp",616,"ModControllableAudio::processSRRAndBitcrushing(const class ModControllableAudio*, struct StereoSample*, long int, long int*, class ParamManager*)",33,3,157,18,13,255
"mod_controllable_audio.cpp",716,"ModControllableAudio::processStutter(const class ModControllableAudio*, struct StereoSample*, long int, class ParamManager*)",51,0,296,6,14,84
"mod_controllable_audio.cpp",989,"ModControllableAudio::readParamTagFromFile(class Deserializer&, const char*, class ParamManagerForTimeline*, long int)",37,0,278,0,0,0
"mod_controllable_audio.cpp",1068,"ModControllableAudio::readTagFromFile(const class ModControllableAudio*, class Deserializer&, const char*, class ParamManagerForTimeline*, long int, class Song*)",120,0,864,0,0,0
"mod_controllable_audio.cpp",1799,"ModControllableAudio::setModFXType(const class ModControllableAudio*, enum ModFXType)",2,0,3,0,0,0
,0,"ModControllableAudio::setWrapsToShutdown(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::switchDelayAnalog(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::switchDelayPingPong(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::switchDelaySyncLevel(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::switchDelaySyncType(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::switchHPFMode(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::switchLPFMode(const class ModControllableAudio*) (always inlined)",0,0,0,0,0,0
,0,"ModControllableAudio::unlearnKnobs(const class ModControllableAudio*, class ParamDescriptor, class Song*) (always inlined)",0,0,0,0,0,0
"mod_controllable_audio.cpp",1773,"ModControllableAudio::wontBeRenderedForAWhile(const class ModControllableAudio*)",2,0,8,0,0,0
"mod_controllable_audio.cpp",878,"ModControllableAudio::writeAttributesToFile(const class ModControllableAudio*, class Serializer&)",5,0,64,0,0,0
"mod_controllable_audio.cpp",954,"ModControllableAudio::writeParamAttributesToFile(class Serializer&, class ParamManager*, bool, long int*)",9,0,70,0,0,0
"mod_controllable_audio.cpp",973,"ModControllableAudio::writeParamTagsToFile(class Serializer&, class ParamManager*, bool, long int*)",9,0,64,0,0,0
"mod_controllable_audio.cpp",890,"ModControllableAudio::writeTagsToFile(const class ModControllableAudio*, class Serializer&)",48,0,345,0,0,0
"mod_controllable_audio.cpp",101,"ModControllableAudio::~ModControllableAudio(const class ModControllableAudio*)",7,0,22,0,0,0
"mode.h",28,"Mode::getOptions(const class Mode*)",4,0,51,0,0,0
"mode.h",32,"Mode::getOptions(const class Mode*)",4,0,51,0,0,0
"mode.h",44,"Mode::getOptions(const class Mode*)",6,0,32,0,0,0
"mode.h",60,"Mode::getOptions(const class Mode*)",4,0,45,0,0,0
,0,"Mode::Mode(const class Mode*) (always inlined)",0,0,0,0,0,0
"mode.h",25,"Mode::readCurrentValue(const class Mode*)",2,0,5,0,0,0
"mode.h",28,"Mode::readCurrentValue(const class Mode*)",2,0,5,0,0,0
"mode.h",39,"Mode::readCurrentValue(const class Mode*)",2,0,9,0,0,0
"mode.h",32,"Mode::readCurrentValue(const class Mode*)",2,0,6,0,0,0
,0,"Mode::updateOptions(const class Mode*, long int) (always inlined)",0,0,0,0,0,0
"value.h",42,"Mode::writeCurrentValue(const class Mode*)",1,0,5,0,0,0
"value.h",45,"Mode::writeCurrentValue(const class Mode*)",1,0,5,0,0,0
"mode.h",41,"Mode::writeCurrentValue(const class Mode*)",4,0,45,0,0,0
"mode.h",34,"Mode::writeCurrentValue(const class Mode*)",20,0,88,0,0,0
"menu_item.h",54,"Mode::~Mode(const class Mode*)",1,0,1,0,0,0
"menu_item.h",54,"Mode::~Mode(const class Mode*)",1,0,1,0,0,0
"menu_item.h",54,"Mode::~Mode(const class Mode*)",1,0,1,0,0,0
"mode.h",22,"Mode::~Mode(const class Mode*)",2,0,6,0,0,0
"mode.h",24,"Mode::~Mode(const class Mode*)",2,0,6,0,0,0
"mode.h",28,"Mode::~Mode(const class Mode*)",10,0,36,0,0,0
"mode.h",28,"Mode::~Mode(const class Mode*)",9,0,33,0,0,0
"mode.h",29,"Mode::~Mode(const class Mode*)",2,0,6,0,0,0
,0,"Mode::~Mode(const class Mode*) (always inlined)",0,0,0,0,0,0
"model.h",19,"Model::getOptions(const class Model*)",4,0,45,0,0,0
,0,"Model::Model(const class Model*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"model.h",12,"Model::readCurrentValue(const class Model*)",2,0,5,0,0,0
"value.h",42,"Model::writeCurrentValue(const class Model*)",1,0,2,0,0,0
"model.h",9,"Model::~Model(const class Model*)",2,0,6,0,0,0
"menu_item.h",54,"Model::~Model(const class Model*)",1,0,1,0,0,0
,0,"ModelStack::addTimelineCounter(const class ModelStack*, class TimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithModControllable::addParamManager(const class ModelStackWithModControllable*, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithNoteRow::addModControllable(const class ModelStackWithNoteRow*, class ModControllable*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithNoteRow::addOtherTwoThings(const class ModelStackWithNoteRow*, class ModControllable*, class ParamManager*) (always inlined)",0,0,0,0,0,0
"model_stack.cpp",180,"ModelStackWithNoteRow::addOtherTwoThingsAutomaticallyGivenNoteRow(const class ModelStackWithNoteRow*)",7,0,47,0,0,0
"model_stack.cpp",91,"ModelStackWithNoteRow::getLastProcessedPos(const class ModelStackWithNoteRow*)",5,0,27,0,0,0
"model_stack.cpp",170,"ModelStackWithNoteRow::getLivePos(const class ModelStackWithNoteRow*)",5,0,22,0,0,0
"model_stack.cpp",81,"ModelStackWithNoteRow::getLoopLength(const class ModelStackWithNoteRow*)",4,0,25,0,0,0
,0,"ModelStackWithNoteRow::getNoteRow(const class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithNoteRow::getNoteRowAllowNull(const class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
"model_stack.cpp",114,"ModelStackWithNoteRow::getPosAtWhichPlaybackWillCut(const class ModelStackWithNoteRow*)",17,0,82,0,0,0
,0,"ModelStackWithNoteRow::getPosAtWhichPlaybackWillCut(const class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithNoteRow::getRepeatCount(const class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
"model_stack.cpp",67,"ModelStackWithNoteRow::isCurrentlyPlayingReversed(const class ModelStackWithNoteRow*)",5,0,40,0,0,0
,0,"ModelStackWithNoteRow::isCurrentlyPlayingReversed(const class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithNoteRow::setNoteRow(const class ModelStackWithNoteRow*, class NoteRow*, long int) (always inlined)",0,0,0,0,0,0
"model_stack.cpp",56,"ModelStackWithNoteRowId::automaticallyAddNoteRowFromId(const class ModelStackWithNoteRowId*)",6,0,22,0,0,0
,0,"ModelStackWithNoteRowId::getTimelineCounter(const class ModelStackWithNoteRowId*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithParamCollection::addParamId(const class ModelStackWithParamCollection*, long int) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithParamId::addAutoParam(const class ModelStackWithParamId*, class AutoParam*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithSoundFlags::addVoice(const class ModelStackWithSoundFlags*, class Voice*) (always inlined)",0,0,0,0,0,0
"model_stack.cpp",205,"ModelStackWithSoundFlags::checkSourceEverActive(const class ModelStackWithSoundFlags*, long int)",11,0,44,0,0,0
,0,"ModelStackWithSoundFlags::checkSourceEverActiveDisregardingMissingSample(const class ModelStackWithSoundFlags*, long int) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithThreeMainThings::addParam(const class ModelStackWithThreeMainThings*, class ParamCollection*, class ParamCollectionSummary*, long int, class AutoParam*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithThreeMainThings::addParamCollection(const class ModelStackWithThreeMainThings*, class ParamCollection*, class ParamCollectionSummary*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithThreeMainThings::addParamCollectionAndId(const class ModelStackWithThreeMainThings*, class ParamCollection*, class ParamCollectionSummary*, long int) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithThreeMainThings::addParamCollectionSummary(const class ModelStackWithThreeMainThings*, class ParamCollectionSummary*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithThreeMainThings::addSoundFlags(const class ModelStackWithThreeMainThings*) (always inlined)",0,0,0,0,0,0
"model_stack.cpp",252,"ModelStackWithThreeMainThings::getPatchCableAutoParamFromId(const class ModelStackWithThreeMainThings*, long int)",7,0,29,0,0,0
"model_stack.cpp",239,"ModelStackWithThreeMainThings::getPatchedAutoParamFromId(const class ModelStackWithThreeMainThings*, long int)",7,0,29,0,0,0
"model_stack.cpp",226,"ModelStackWithThreeMainThings::getUnpatchedAutoParamFromId(const class ModelStackWithThreeMainThings*, long int)",5,0,18,0,0,0
,0,"ModelStackWithTimelineCounter::addModControllableButNoNoteRow(const class ModelStackWithTimelineCounter*, class ModControllable*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithTimelineCounter::addNoteRow(const class ModelStackWithTimelineCounter*, long int, class NoteRow*) (always inlined)",0,0,0,0,0,0
"model_stack.cpp",35,"ModelStackWithTimelineCounter::addNoteRowAndExtraStuff(const class ModelStackWithTimelineCounter*, long int, class NoteRow*)",9,0,51,0,0,0
,0,"ModelStackWithTimelineCounter::addNoteRowId(const class ModelStackWithTimelineCounter*, long int) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithTimelineCounter::addOtherTwoThingsButNoNoteRow(const class ModelStackWithTimelineCounter*, class ModControllable*, class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithTimelineCounter::getTimelineCounterAllowNull(const class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithTimelineCounter::setTimelineCounter(const class ModelStackWithTimelineCounter*, class TimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"ModelStackWithTimelineCounter::timelineCounterIsSet(const class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"modFXParamToString(enum ModFXParam) (always inlined)",0,0,0,0,0,0
,0,"ModKnob::ModKnob(const class ModKnob*) (always inlined)",0,0,0,0,0,0
"modulator.h",29,"Modulator::beginSession(const class Modulator*, class MenuItem*)",5,0,20,0,0,0
,0,"Modulator::Modulator(const class Modulator*, enum String, class span<MenuItem*, 4294967295>, long int) (always inlined)",0,0,0,0,0,0
"modulator.h",24,"Modulator::~Modulator(const class Modulator*)",7,0,28,0,0,0
"modulator.h",24,"Modulator::~Modulator(const class Modulator*)",7,0,25,0,0,0
,0,"Modulator::~Modulator(const class Modulator*) (always inlined)",0,0,0,0,0,0
"ff.c",3392,"mount_volume(const char**, struct FATFS**, unsigned char)",232,0,1483,0,0,0
,0,"move_backward<SortedTask*, SortedTask*>(struct SortedTask*, struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
"ff.c",1064,"move_window(struct FATFS*, long unsigned int)",6,0,22,0,0,0
,0,"move_window(struct FATFS*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"moveAreaUpCrude(long int, long int, long int, long int, long int, unsigned char[128]*) (always inlined)",0,0,0,0,0,0
,0,"MPEToMono::MPEToMono(const class MPEToMono*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"mpe_to_mono.h",29,"MPEToMono::readCurrentValue(const class MPEToMono*)",2,0,6,0,0,0
"value.h",42,"MPEToMono::writeCurrentValue(const class MPEToMono*)",2,0,8,0,0,0
"mpe_to_mono.h",25,"MPEToMono::~MPEToMono(const class MPEToMono*)",2,0,6,0,0,0
"menu_item.h",54,"MPEToMono::~MPEToMono(const class MPEToMono*)",1,0,1,0,0,0
,0,"msToSlowTimerCount(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"mtuEnableAccess() (always inlined)",0,0,0,0,0,0
,0,"multiply(float[2], float[2]) (always inlined)",0,0,0,0,0,0
,0,"multiply_32x32_rshift32(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"multiply_32x32_rshift32_rounded(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"multiply_accumulate_32x32_rshift32_rounded(long int, long int, long int) (always inlined)",0,0,0,0,0,0
"multi_range.cpp",41,"MultiRange::beginSession(const class MultiRange*, class MenuItem*)",14,0,46,0,0,0
,0,"MultiRange::deletePress(const class MultiRange*) (always inlined)",0,0,0,0,0,0
"multi_range.cpp",428,"MultiRange::drawPixelsForOled(const class MultiRange*)",17,0,81,0,0,0
"value.h",42,"MultiRange::getText(const class MultiRange*, char*, long int*, long int*, bool)",18,0,109,0,0,0
"multi_range.h",43,"MultiRange::getTitle(const class MultiRange*)",1,0,6,0,0,0
"multi_range.cpp",421,"MultiRange::mayEditRangeEdge(const class MultiRange*, enum RangeEdit)",3,0,16,0,0,0
,0,"MultiRange::mayEditRangeEdge(const class MultiRange*, enum RangeEdit) (always inlined)",0,0,0,0,0,0
,0,"MultiRange::MultiRange(const class MultiRange*) (always inlined)",0,0,0,0,0,0
,0,"MultiRange::noteOnToChangeRange(const class MultiRange*, long int) (always inlined)",0,0,0,0,0,0
"multi_range.cpp",396,"MultiRange::noteOnToChangeRange(long int, const class MultiRange*)",22,0,58,0,0,0
"multi_range.cpp",393,"MultiRange::selectButtonPress(const class MultiRange*)",1,0,2,0,0,0
"multi_range.cpp",70,"MultiRange::selectEncoderAction(const class MultiRange*, long int)",67,0,300,0,0,0
"menu_item.h",54,"MultiRange::~MultiRange(const class MultiRange*)",1,0,1,0,0,0
"multi_range.h",24,"MultiRange::~MultiRange(const class MultiRange*)",2,0,6,0,0,0
,0,"MultiRangeArray::changeType(const class MultiRangeArray*, long int) (always inlined)",0,0,0,0,0,0
"multi_range_array.cpp",39,"MultiRangeArray::insertMultiRange(const class MultiRangeArray*, long int)",10,0,38,0,0,0
,0,"MultiRangeArray::MultiRangeArray(const class MultiRangeArray*) (always inlined)",0,0,0,0,0,0
,0,"MultiRangeArray::~MultiRangeArray(const class MultiRangeArray*) (always inlined)",0,0,0,0,0,0
"multisample_range.cpp",24,"MultisampleRange::getAudioFileHolder(const class MultisampleRange*)",1,0,2,0,0,0
"multisample_range.cpp",21,"MultisampleRange::MultisampleRange(const class MultisampleRange*)",13,0,28,0,0,0
"multisample_range.h",27,"MultisampleRange::~MultisampleRange(const class MultisampleRange*)",1,0,11,0,0,0
"multisample_range.h",27,"MultisampleRange::~MultisampleRange(const class MultisampleRange*)",1,0,8,0,0,0
,0,"MultisampleRange::~MultisampleRange(const class MultisampleRange*) (always inlined)",0,0,0,0,0,0
"multi_wave_table_range.cpp",24,"MultiWaveTableRange::getAudioFileHolder(const class MultiWaveTableRange*)",1,0,2,0,0,0
,0,"MultiWaveTableRange::MultiWaveTableRange(const class MultiWaveTableRange*) (always inlined)",0,0,0,0,0,0
"multi_wave_table_range.h",23,"MultiWaveTableRange::~MultiWaveTableRange(const class MultiWaveTableRange*)",2,0,13,0,0,0
"multi_wave_table_range.h",23,"MultiWaveTableRange::~MultiWaveTableRange(const class MultiWaveTableRange*)",3,0,10,0,0,0
,0,"MultiWaveTableRange::~MultiWaveTableRange(const class MultiWaveTableRange*) (always inlined)",0,0,0,0,0,0
"reverb.hpp",134,"Mutable::getDamping(const class Mutable*)",1,0,3,0,0,0
"reverb.hpp",144,"Mutable::getHPF(const class Mutable*)",1,0,3,0,0,0
"misc.h",75,"Mutable::getRoomSize(const class Mutable*)",1,0,10,0,0,0
"misc.h",75,"Mutable::getWidth(const class Mutable*)",1,0,10,0,0,0
,0,"Mutable::Mutable(const class Mutable*) (always inlined)",0,0,0,0,0,0
"reverb.hpp",23,"Mutable::process(const class Mutable*, class span<long int, 4294967295>, class span<StereoSample, 4294967295>)",31,0,481,0,0,0
"reverb.hpp",131,"Mutable::setDamping(const class Mutable*, float)",5,0,36,0,0,0
"reverb.hpp",140,"Mutable::setHPF(const class Mutable*, float)",4,0,18,0,0,0
"reverb.hpp",124,"Mutable::setRoomSize(const class Mutable*, float)",2,0,7,0,0,0
"reverb.hpp",136,"Mutable::setWidth(const class Mutable*, float)",2,0,7,0,0,0
"base.hpp",9,"Mutable::~Mutable(const class Mutable*)",1,0,1,0,0,0
"reverb.hpp",21,"Mutable::~Mutable(const class Mutable*)",2,0,7,0,0,0
"resizeable_array.h",50,"NamedThingVector::getElement(const class NamedThingVector*, long int)",4,3,10,9,2,20
,0,"NamedThingVector::getMemory(const class NamedThingVector*, long int) (always inlined)",0,0,0,0,0,0
,0,"NamedThingVector::getName(const class NamedThingVector*, void*) (always inlined)",0,0,0,0,0,0
"named_thing_vector.cpp",79,"NamedThingVector::insertElement(const class NamedThingVector*, void*)",3,0,17,0,0,0
"named_thing_vector.cpp",89,"NamedThingVector::insertElement(const class NamedThingVector*, void*, long int)",10,0,28,0,0,0
,0,"NamedThingVector::insertElement(const class NamedThingVector*, void*, long int) (always inlined)",0,0,0,0,0,0
"named_thing_vector.cpp",101,"NamedThingVector::removeElement(const class NamedThingVector*, long int)",6,0,19,0,0,0
,0,"NamedThingVector::renameMember(const class NamedThingVector*, long int, class String*) (always inlined)",0,0,0,0,0,0
"named_thing_vector.cpp",31,"NamedThingVector::search(const class NamedThingVector*, const char*, bool*, long int)",21,0,46,0,0,0
,0,"NamedThingVectorElement::NamedThingVectorElement(const class NamedThingVectorElement*, void*, class String*) (always inlined)",0,0,0,0,0,0
,0,"NamedThingVectorElement::~NamedThingVectorElement(const class NamedThingVectorElement*) (always inlined)",0,0,0,0,0,0
,0,"ne10_factor(long int, long int*, long int) (always inlined)",0,0,0,0,0,0
,0,"ne10_fft16_backward_int32_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*) (always inlined)",0,0,0,0,0,0
,0,"ne10_fft4_backward_int32_unscaled(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*) (always inlined)",0,0,0,0,0,0
,0,"ne10_fft8_backward_int32_unscaled(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*) (always inlined)",0,0,0,0,0,0
"NE10_fft_int32.c",1161,"ne10_fft_alloc_r2c_int32(long int)",28,0,272,0,0,0
,0,"ne10_fft_c2c_1d_int32_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, struct ne10_fft_state_int32_t*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"ne10_fft_c2r_1d_int32_neon(long int*, struct ne10_fft_cpx_int32_t*, struct ne10_fft_r2c_state_int32_t*, long int) (always inlined)",0,0,0,0,0,0
"NE10_fft_int32.neonintrinsic.c",1865,"ne10_fft_r2c_1d_int32_neon(struct ne10_fft_cpx_int32_t*, long int*, struct ne10_fft_r2c_state_int32_t*, long int)",47,0,554,0,0,0
,0,"ne10_fft_split_c2r_1d_int32_neon(struct ne10_fft_cpx_int32_t*, const struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"ne10_fft_split_r2c_1d_int32_neon(struct ne10_fft_cpx_int32_t*, const struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"ne10_mixed_radix_fft_backward_int32_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int*, struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*) (always inlined)",0,0,0,0,0,0
,0,"ne10_mixed_radix_fft_forward_int32_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int*, struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*) (always inlined)",0,0,0,0,0,0
"NE10_fft_int32.neonintrinsic.c",1167,"ne10_radix4x4_with_twiddles_backward_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int, long int, long int)",8,0,93,0,0,0
"NE10_fft_int32.neonintrinsic.c",1139,"ne10_radix4x4_with_twiddles_forward_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int, long int, long int)",8,0,93,0,0,0
,0,"ne10_radix4x4_without_twiddles_backward_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int) (always inlined)",0,0,0,0,0,0
,0,"ne10_radix4x4_without_twiddles_forward_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int) (always inlined)",0,0,0,0,0,0
,0,"ne10_radix8x4_backward_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int) (always inlined)",0,0,0,0,0,0
,0,"ne10_radix8x4_forward_unscaled_neon(struct ne10_fft_cpx_int32_t*, struct ne10_fft_cpx_int32_t*, long int) (always inlined)",0,0,0,0,0,0
,0,"Neon64<float>::Neon64(const class Neon64<float>*, class Common<__vector(2) float>) (always inlined)",0,0,0,0,0,0
"neon_fm_kernel.s",45,"neon_fm_kernel()",141,0,141,0,0,0
"access.S",116,"neon_vfp_off",3,0,4,0,0,0
"access.S",103,"neon_vfp_on",3,0,4,0,0,0
,0,"next_unwind_byte",0,0,26,0,0,0
"column_controls.cpp",120,"nextControlFunction(enum ColumnControlFunction, enum ColumnControlFunction)",5,0,26,0,0,0
"audio_output.h",31,"non-virtual thunk to AudioOutput::cloneFrom(ModControllableAudio*)",1,0,2,0,0,0
"audio_output.h",46,"non-virtual thunk to AudioOutput::getModKnobMode()",1,0,2,0,0,0
"audio_output.h",37,"non-virtual thunk to AudioOutput::renderGlobalEffectableForClip(ModelStackWithTimelineCounter*, StereoSample*, long*, long, long*, long, long, bool, bool, long, long, long)",1,0,2,0,0,0
"audio_output.h",58,"non-virtual thunk to AudioOutput::toOutput()",1,0,2,0,0,0
"audio_output.h",92,"non-virtual thunk to AudioOutput::willRenderAsOneChannelOnlyWhichWillNeedCopying()",1,0,2,0,0,0
"audio_output.h",30,"non-virtual thunk to AudioOutput::~AudioOutput()",1,0,2,0,0,0
"audio_output.h",30,"non-virtual thunk to AudioOutput::~AudioOutput()",1,0,2,0,0,0
"cv_instrument.h",35,"non-virtual thunk to CVInstrument::monophonicExpressionEvent(long, long)",1,0,2,0,0,0
"sound_unpatched_param.h",25,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::OnlyForSoundUnpatchedParam::isRelevant(ModControllableAudio*, long)",1,0,7,0,0,0
"sound_unpatched_param.h",22,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::OnlyForSoundUnpatchedParam::~OnlyForSoundUnpatchedParam()",1,0,2,0,0,0
"sound_unpatched_param.h",22,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::OnlyForSoundUnpatchedParam::~OnlyForSoundUnpatchedParam()",1,0,7,0,0,0
"rate.h",25,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rate::isRelevant(ModControllableAudio*, long)",1,0,7,0,0,0
"rate.h",22,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rate::~Rate()",1,0,2,0,0,0
"rate.h",22,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rate::~Rate()",1,0,7,0,0,0
"rhythm.h",35,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rhythm::drawInteger(long, long, long)",1,0,27,0,0,0
"rhythm.h",33,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rhythm::drawValue()",1,0,18,0,0,0
"rhythm.h",31,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rhythm::getMaxValue() const",1,0,2,0,0,0
"rhythm.h",30,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rhythm::getMinValue() const",1,0,2,0,0,0
"rhythm.h",44,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rhythm::isRelevant(ModControllableAudio*, long)",1,0,7,0,0,0
"rhythm.h",26,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rhythm::~Rhythm()",1,0,2,0,0,0
"rhythm.h",26,"non-virtual thunk to deluge::gui::menu_item::arpeggiator::Rhythm::~Rhythm()",1,0,7,0,0,0
"transpose.h",54,"non-virtual thunk to deluge::gui::menu_item::audio_clip::Transpose::getLearningThing()",1,0,2,0,0,0
"compressor_params.h",28,"non-virtual thunk to deluge::gui::menu_item::audio_compressor::CompParam::readCurrentValue()",1,0,27,0,0,0
"compressor_params.h",25,"non-virtual thunk to deluge::gui::menu_item::audio_compressor::CompParam::~CompParam()",1,0,2,0,0,0
"compressor_params.h",25,"non-virtual thunk to deluge::gui::menu_item::audio_compressor::CompParam::~CompParam()",1,0,7,0,0,0
"segment.h",27,"non-virtual thunk to deluge::gui::menu_item::envelope::Segment::getTitle() const",1,0,5,0,0,0
"segment.h",22,"non-virtual thunk to deluge::gui::menu_item::envelope::Segment::~Segment()",1,0,20,0,0,0
"segment.h",22,"non-virtual thunk to deluge::gui::menu_item::envelope::Segment::~Segment()",1,0,17,0,0,0
"morph.h",28,"non-virtual thunk to deluge::gui::menu_item::filter::FilterMorph::getName() const",1,0,37,0,0,0
"morph.h",34,"non-virtual thunk to deluge::gui::menu_item::filter::FilterMorph::getTitle() const",1,0,37,0,0,0
"morph.h",24,"non-virtual thunk to deluge::gui::menu_item::filter::FilterMorph::~FilterMorph()",1,0,2,0,0,0
"morph.h",24,"non-virtual thunk to deluge::gui::menu_item::filter::FilterMorph::~FilterMorph()",1,0,7,0,0,0
"hpf_freq.h",29,"non-virtual thunk to deluge::gui::menu_item::filter::HPFFreq::drawValue()",1,0,64,0,0,0
"hpf_freq.h",24,"non-virtual thunk to deluge::gui::menu_item::filter::HPFFreq::~HPFFreq()",1,0,2,0,0,0
"hpf_freq.h",24,"non-virtual thunk to deluge::gui::menu_item::filter::HPFFreq::~HPFFreq()",1,0,7,0,0,0
"lpf_freq.h",28,"non-virtual thunk to deluge::gui::menu_item::filter::LPFFreq::drawValue()",1,0,65,0,0,0
"lpf_freq.h",23,"non-virtual thunk to deluge::gui::menu_item::filter::LPFFreq::~LPFFreq()",1,0,2,0,0,0
"lpf_freq.h",23,"non-virtual thunk to deluge::gui::menu_item::filter::LPFFreq::~LPFFreq()",1,0,7,0,0,0
"rate.h",27,"non-virtual thunk to deluge::gui::menu_item::lfo::Rate::isRelevant(ModControllableAudio*, long)",1,0,7,0,0,0
"rate.h",22,"non-virtual thunk to deluge::gui::menu_item::lfo::Rate::~Rate()",1,0,2,0,0,0
"rate.h",22,"non-virtual thunk to deluge::gui::menu_item::lfo::Rate::~Rate()",1,0,7,0,0,0
"master_transpose.h",48,"non-virtual thunk to deluge::gui::menu_item::MasterTranspose::drawValue()",1,0,15,0,0,0
"master_transpose.h",57,"non-virtual thunk to deluge::gui::menu_item::MasterTranspose::getMaxValue() const",1,0,2,0,0,0
"master_transpose.h",56,"non-virtual thunk to deluge::gui::menu_item::MasterTranspose::getMinValue() const",1,0,2,0,0,0
"master_transpose.h",40,"non-virtual thunk to deluge::gui::menu_item::MasterTranspose::getP()",1,0,2,0,0,0
"master_transpose.h",39,"non-virtual thunk to deluge::gui::menu_item::MasterTranspose::getParamIndex()",1,0,2,0,0,0
"master_transpose.h",38,"non-virtual thunk to deluge::gui::menu_item::MasterTranspose::shouldDrawDotOnName()",1,0,1,0,0,0
"depth_patched.h",29,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Depth_Patched::isRelevant(ModControllableAudio*, long)",1,0,23,0,0,0
"depth_patched.h",25,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Depth_Patched::~Depth_Patched()",1,0,2,0,0,0
"depth_patched.h",25,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Depth_Patched::~Depth_Patched()",1,0,7,0,0,0
"depth_unpatched.h",28,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Depth_Unpatched::isRelevant(ModControllableAudio*, long)",1,0,23,0,0,0
"depth_unpatched.h",24,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Depth_Unpatched::~Depth_Unpatched()",1,0,2,0,0,0
"depth_unpatched.h",24,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Depth_Unpatched::~Depth_Unpatched()",1,0,7,0,0,0
"feedback.h",28,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Feedback::isRelevant(ModControllableAudio*, long)",1,0,24,0,0,0
"feedback.h",24,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Feedback::~Feedback()",1,0,2,0,0,0
"feedback.h",24,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Feedback::~Feedback()",1,0,7,0,0,0
"offset.h",29,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Offset::isRelevant(ModControllableAudio*, long)",1,0,24,0,0,0
"offset.h",25,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Offset::~Offset()",1,0,2,0,0,0
"offset.h",25,"non-virtual thunk to deluge::gui::menu_item::mod_fx::Offset::~Offset()",1,0,7,0,0,0
"pulse_width.h",30,"non-virtual thunk to deluge::gui::menu_item::osc::PulseWidth::getTitle() const",1,0,5,0,0,0
"pulse_width.h",51,"non-virtual thunk to deluge::gui::menu_item::osc::PulseWidth::isRelevant(ModControllableAudio*, long)",1,0,17,0,0,0
"pulse_width.h",44,"non-virtual thunk to deluge::gui::menu_item::osc::PulseWidth::readCurrentValue()",1,0,30,0,0,0
"pulse_width.h",25,"non-virtual thunk to deluge::gui::menu_item::osc::PulseWidth::~PulseWidth()",1,0,20,0,0,0
"pulse_width.h",25,"non-virtual thunk to deluge::gui::menu_item::osc::PulseWidth::~PulseWidth()",1,0,17,0,0,0
"feedback.h",28,"non-virtual thunk to deluge::gui::menu_item::osc::source::Feedback::getTitle() const",1,0,5,0,0,0
"feedback.h",30,"non-virtual thunk to deluge::gui::menu_item::osc::source::Feedback::isRelevant(ModControllableAudio*, long)",1,0,10,0,0,0
"feedback.h",23,"non-virtual thunk to deluge::gui::menu_item::osc::source::Feedback::~Feedback()",1,0,20,0,0,0
"feedback.h",23,"non-virtual thunk to deluge::gui::menu_item::osc::source::Feedback::~Feedback()",1,0,17,0,0,0
"volume.h",29,"non-virtual thunk to deluge::gui::menu_item::osc::source::Volume::getTitle() const",1,0,5,0,0,0
"volume.h",31,"non-virtual thunk to deluge::gui::menu_item::osc::source::Volume::isRelevant(ModControllableAudio*, long)",1,0,5,0,0,0
"volume.h",24,"non-virtual thunk to deluge::gui::menu_item::osc::source::Volume::~Volume()",1,0,20,0,0,0
"volume.h",24,"non-virtual thunk to deluge::gui::menu_item::osc::source::Volume::~Volume()",1,0,17,0,0,0
"wave_index.h",28,"non-virtual thunk to deluge::gui::menu_item::osc::source::WaveIndex::getTitle() const",1,0,5,0,0,0
"wave_index.h",30,"non-virtual thunk to deluge::gui::menu_item::osc::source::WaveIndex::isRelevant(ModControllableAudio*, long)",1,0,12,0,0,0
"wave_index.h",23,"non-virtual thunk to deluge::gui::menu_item::osc::source::WaveIndex::~WaveIndex()",1,0,20,0,0,0
"wave_index.h",23,"non-virtual thunk to deluge::gui::menu_item::osc::source::WaveIndex::~WaveIndex()",1,0,17,0,0,0
"range.h",27,"non-virtual thunk to deluge::gui::menu_item::patch_cable_strength::Range::getLearningThing()",1,0,2,0,0,0
"regular.h",29,"non-virtual thunk to deluge::gui::menu_item::patch_cable_strength::Regular::getLearningThing()",1,0,2,0,0,0
"patch_cable_strength.h",58,"non-virtual thunk to deluge::gui::menu_item::PatchCableStrength::getModelStackWithParam(void*)",1,0,2,0,0,0
"patch_cable_strength.h",47,"non-virtual thunk to deluge::gui::menu_item::PatchCableStrength::getPatchSource()",1,0,2,0,0,0
"integer.h",55,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::allowsLearnMode()",1,0,2,0,0,0
"integer.h",43,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::buttonAction(unsigned char, bool, bool)",1,0,2,0,0,0
"integer.h",29,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::drawValue()",1,0,17,0,0,0
"integer.h",31,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::getLearningThing()",1,0,2,0,0,0
"integer.h",32,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::getMaxValue() const",1,0,2,0,0,0
"integer.h",33,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::getMinValue() const",1,0,2,0,0,0
"integer.h",49,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::getParamIndex()",1,0,2,0,0,0
"integer.h",48,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::getParamKind()",1,0,2,0,0,0
"integer.h",46,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::horizontalEncoderAction(long)",1,0,2,0,0,0
"integer.h",56,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::learnKnob(MIDIDevice*, long, long, long)",1,0,2,0,0,0
"integer.h",50,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::patchingSourceShortcutPress(PatchSource, bool)",1,0,2,0,0,0
"integer.h",61,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::readCurrentValue()",1,0,2,0,0,0
"integer.h",39,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::selectButtonPress()",1,0,2,0,0,0
"integer.h",34,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::shouldBlinkPatchingSourceShortcut(PatchSource, unsigned char*)",1,0,2,0,0,0
"integer.h",38,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::shouldDrawDotOnName()",1,0,2,0,0,0
"integer.h",54,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::unlearnAction()",1,0,2,0,0,0
"integer.h",62,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::writeCurrentValue()",1,0,2,0,0,0
"integer.h",23,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::~Integer()",1,0,7,0,0,0
"integer.h",23,"non-virtual thunk to deluge::gui::menu_item::patched_param::Integer::~Integer()",1,0,2,0,0,0
"integer_non_fm.h",25,"non-virtual thunk to deluge::gui::menu_item::patched_param::IntegerNonFM::isRelevant(ModControllableAudio*, long)",1,0,5,0,0,0
"integer_non_fm.h",22,"non-virtual thunk to deluge::gui::menu_item::patched_param::IntegerNonFM::~IntegerNonFM()",1,0,7,0,0,0
"integer_non_fm.h",22,"non-virtual thunk to deluge::gui::menu_item::patched_param::IntegerNonFM::~IntegerNonFM()",1,0,2,0,0,0
"pan.h",24,"non-virtual thunk to deluge::gui::menu_item::patched_param::Pan::drawValue()",1,0,2,0,0,0
"pan.h",27,"non-virtual thunk to deluge::gui::menu_item::patched_param::Pan::getMaxValue() const",1,0,2,0,0,0
"pan.h",28,"non-virtual thunk to deluge::gui::menu_item::patched_param::Pan::getMinValue() const",1,0,2,0,0,0
"pan.h",30,"non-virtual thunk to deluge::gui::menu_item::patched_param::Pan::readCurrentValue()",1,0,2,0,0,0
"pan.h",21,"non-virtual thunk to deluge::gui::menu_item::patched_param::Pan::~Pan()",1,0,7,0,0,0
"pan.h",21,"non-virtual thunk to deluge::gui::menu_item::patched_param::Pan::~Pan()",1,0,2,0,0,0
"patched_param.h",45,"non-virtual thunk to deluge::gui::menu_item::PatchedParam::getLearningThing()",1,0,2,0,0,0
"fm.h",28,"non-virtual thunk to deluge::gui::menu_item::source::patched_param::FM::getTitle() const",1,0,5,0,0,0
"fm.h",30,"non-virtual thunk to deluge::gui::menu_item::source::patched_param::FM::isRelevant(ModControllableAudio*, long)",1,0,5,0,0,0
"fm.h",23,"non-virtual thunk to deluge::gui::menu_item::source::patched_param::FM::~FM()",1,0,20,0,0,0
"fm.h",23,"non-virtual thunk to deluge::gui::menu_item::source::patched_param::FM::~FM()",1,0,17,0,0,0
"transpose.h",26,"non-virtual thunk to deluge::gui::menu_item::source::Transpose::getLearningThing()",1,0,7,0,0,0
"transpose.h",26,"non-virtual thunk to deluge::gui::menu_item::source::Transpose::getLearningThing()",1,0,7,0,0,0
"transpose.h",33,"non-virtual thunk to deluge::gui::menu_item::source::Transpose::getP()",1,0,7,0,0,0
"transpose.h",38,"non-virtual thunk to deluge::gui::menu_item::Transpose::drawValue()",1,0,2,0,0,0
"transpose.h",33,"non-virtual thunk to deluge::gui::menu_item::Transpose::getMaxValue() const",1,0,2,0,0,0
"transpose.h",32,"non-virtual thunk to deluge::gui::menu_item::Transpose::getMinValue() const",1,0,3,0,0,0
"transpose.h",35,"non-virtual thunk to deluge::gui::menu_item::Transpose::getParamIndex()",1,0,1,0,0,0
"transpose.h",36,"non-virtual thunk to deluge::gui::menu_item::Transpose::shouldDrawDotOnName()",1,0,1,0,0,0
"pan.h",26,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::Pan::drawValue()",1,0,2,0,0,0
"pan.h",29,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::Pan::getMaxValue() const",1,0,2,0,0,0
"pan.h",30,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::Pan::getMinValue() const",1,0,2,0,0,0
"pan.h",32,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::Pan::readCurrentValue()",1,0,2,0,0,0
"pan.h",23,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::Pan::~Pan()",1,0,7,0,0,0
"pan.h",23,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::Pan::~Pan()",1,0,2,0,0,0
"updating_reverb_params.h",26,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::UpdatingReverbParams::writeCurrentValue()",1,0,8,0,0,0
"updating_reverb_params.h",22,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::UpdatingReverbParams::~UpdatingReverbParams()",1,0,2,0,0,0
"updating_reverb_params.h",22,"non-virtual thunk to deluge::gui::menu_item::unpatched_param::UpdatingReverbParams::~UpdatingReverbParams()",1,0,7,0,0,0
"unpatched_param.h",50,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::allowsLearnMode()",1,0,2,0,0,0
"unpatched_param.h",44,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::buttonAction(unsigned char, bool, bool)",1,0,2,0,0,0
"unpatched_param.h",37,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::getLearningThing()",1,0,2,0,0,0
"unpatched_param.h",38,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::getMaxValue() const",1,0,2,0,0,0
"unpatched_param.h",39,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::getMinValue() const",1,0,2,0,0,0
"unpatched_param.h",56,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::getParamIndex()",1,0,2,0,0,0
"unpatched_param.h",55,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::getParamKind()",1,0,2,0,0,0
"unpatched_param.h",47,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::horizontalEncoderAction(long)",1,0,2,0,0,0
"unpatched_param.h",51,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::learnKnob(MIDIDevice*, long, long, long)",1,0,2,0,0,0
"unpatched_param.h",35,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::readCurrentValue()",1,0,2,0,0,0
"unpatched_param.h",40,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::selectButtonPress()",1,0,2,0,0,0
"unpatched_param.h",49,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::unlearnAction()",1,0,2,0,0,0
"unpatched_param.h",36,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::writeCurrentValue()",1,0,2,0,0,0
"unpatched_param.h",28,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::~UnpatchedParam()",1,0,7,0,0,0
"unpatched_param.h",28,"non-virtual thunk to deluge::gui::menu_item::UnpatchedParam::~UnpatchedParam()",1,0,2,0,0,0
"kit.h",119,"non-virtual thunk to Kit::getModKnobMode()",1,0,2,0,0,0
"kit.h",157,"non-virtual thunk to Kit::isKit()",1,0,2,0,0,0
"kit.h",132,"non-virtual thunk to Kit::renderGlobalEffectableForClip(ModelStackWithTimelineCounter*, StereoSample*, long*, long, long*, long, long, bool, bool, long, long, long)",1,0,2,0,0,0
"kit.h",120,"non-virtual thunk to Kit::toOutput()",1,0,2,0,0,0
"kit.h",41,"non-virtual thunk to Kit::~Kit()",1,0,2,0,0,0
"kit.h",41,"non-virtual thunk to Kit::~Kit()",1,0,2,0,0,0
"midi_drum.h",40,"non-virtual thunk to MIDIDrum::polyphonicExpressionEventOnChannelOrNote(long, long, long, MIDICharacteristic)",1,0,2,0,0,0
"midi_instrument.h",70,"non-virtual thunk to MIDIInstrument::getKnobPosForNonExistentParam(long, ModelStackWithAutoParam*)",1,0,2,0,0,0
"midi_instrument.h",68,"non-virtual thunk to MIDIInstrument::getModKnobMode()",1,0,2,0,0,0
"midi_instrument.h",66,"non-virtual thunk to MIDIInstrument::getParamFromModEncoder(long, ModelStackWithThreeMainThings*, bool)",1,0,2,0,0,0
"midi_instrument.h",65,"non-virtual thunk to MIDIInstrument::modButtonAction(unsigned char, bool, ParamManagerForTimeline*)",1,0,2,0,0,0
"midi_instrument.h",64,"non-virtual thunk to MIDIInstrument::modEncoderButtonAction(unsigned char, bool, ModelStackWithThreeMainThings*)",1,0,2,0,0,0
"midi_instrument.h",110,"non-virtual thunk to MIDIInstrument::monophonicExpressionEvent(long, long)",1,0,2,0,0,0
"non_audio_drum.h",29,"non-virtual thunk to NonAudioDrum::allowNoteTails(ModelStackWithSoundFlags*, bool)",1,0,2,0,0,0
"non_audio_instrument.h",43,"non-virtual thunk to NonAudioInstrument::polyphonicExpressionEventOnChannelOrNote(long, long, long, MIDICharacteristic)",1,0,2,0,0,0
"sound_drum.h",38,"non-virtual thunk to SoundDrum::allowNoteTails(ModelStackWithSoundFlags*, bool)",1,0,2,0,0,0
"sound_drum.h",39,"non-virtual thunk to SoundDrum::anyNoteIsOn()",1,0,2,0,0,0
"sound_drum.h",54,"non-virtual thunk to SoundDrum::choke(ModelStackWithSoundFlags*)",1,0,2,0,0,0
"sound_drum.h",57,"non-virtual thunk to SoundDrum::drumWontBeRenderedForAWhile()",1,0,2,0,0,0
"sound_drum.h",60,"non-virtual thunk to SoundDrum::expressionEvent(long, long)",1,0,2,0,0,0
"sound_drum.h",52,"non-virtual thunk to SoundDrum::getName(char*)",1,0,1,0,0,0
"sound_drum.h",40,"non-virtual thunk to SoundDrum::hasAnyVoices()",1,0,2,0,0,0
"sound_drum.h",48,"non-virtual thunk to SoundDrum::loadAllSamples(bool)",1,0,2,0,0,0
"sound_drum.h",44,"non-virtual thunk to SoundDrum::noteOff(ModelStackWithThreeMainThings*, long)",1,0,2,0,0,0
"sound_drum.h",41,"non-virtual thunk to SoundDrum::noteOn(ModelStackWithThreeMainThings*, unsigned char, Kit*, short const*, long, unsigned long, long, unsigned long)",1,0,2,0,0,0
"sound_drum.h",49,"non-virtual thunk to SoundDrum::prepareForHibernation()",1,0,2,0,0,0
"sound_drum.h",53,"non-virtual thunk to SoundDrum::readFromFile(Deserializer&, Song*, Clip*, long)",1,0,2,0,0,0
"sound_drum.h",58,"non-virtual thunk to SoundDrum::toModControllable()",1,0,2,0,0,0
"sound_drum.h",45,"non-virtual thunk to SoundDrum::unassignAllVoices()",1,0,2,0,0,0
"sound_drum.h",50,"non-virtual thunk to SoundDrum::writeToFile(Serializer&, bool, ParamManager*)",1,0,2,0,0,0
"sound_drum.h",27,"non-virtual thunk to SoundDrum::~SoundDrum()",1,0,29,0,0,0
"sound_drum.h",27,"non-virtual thunk to SoundDrum::~SoundDrum()",1,0,25,0,0,0
"sound_instrument.h",75,"non-virtual thunk to SoundInstrument::beenEdited(bool)",1,0,2,0,0,0
"sound_instrument.h",72,"non-virtual thunk to SoundInstrument::compensateInstrumentVolumeForResonance(ModelStackWithThreeMainThings*)",1,0,2,0,0,0
"sound_instrument.h",35,"non-virtual thunk to SoundInstrument::cutAllSound()",1,0,2,0,0,0
"sound_instrument.h",59,"non-virtual thunk to SoundInstrument::deleteBackedUpParamManagers(Song*)",1,0,2,0,0,0
"sound_instrument.h",76,"non-virtual thunk to SoundInstrument::doTickForwardForArp(ModelStack*, long)",1,0,2,0,0,0
"sound_instrument.h",78,"non-virtual thunk to SoundInstrument::getThingWithMostReverb(Sound**, ParamManager**, GlobalEffectableForClip**, long*)",1,0,2,0,0,0
"sound_instrument.h",83,"non-virtual thunk to SoundInstrument::getXMLTag()",1,0,3,0,0,0
"sound_instrument.h",73,"non-virtual thunk to SoundInstrument::isSkippingRendering()",1,0,2,0,0,0
"sound_instrument.h",52,"non-virtual thunk to SoundInstrument::loadAllAudioFiles(bool)",1,0,2,0,0,0
"sound_instrument.h",74,"non-virtual thunk to SoundInstrument::loadCrucialAudioFilesOnly()",1,0,2,0,0,0
"sound_instrument.h",43,"non-virtual thunk to SoundInstrument::offerReceivedCCToLearnedParams(MIDIDevice*, unsigned char, unsigned char, unsigned char, ModelStackWithTimelineCounter*)",1,0,12,0,0,0
"sound_instrument.h",47,"non-virtual thunk to SoundInstrument::offerReceivedPitchBendToLearnedParams(MIDIDevice*, unsigned char, unsigned char, unsigned char, ModelStackWithTimelineCounter*)",1,0,6,0,0,0
"sound_instrument.h",60,"non-virtual thunk to SoundInstrument::polyphonicExpressionEventOnChannelOrNote(long, long, long, MIDICharacteristic)",1,0,2,0,0,0
"sound_instrument.h",71,"non-virtual thunk to SoundInstrument::prepareForHibernationOrDeletion()",1,0,2,0,0,0
"sound_instrument.h",34,"non-virtual thunk to SoundInstrument::readFromFile(Deserializer&, Song*, Clip*, long)",1,0,2,0,0,0
"sound_instrument.h",69,"non-virtual thunk to SoundInstrument::readTagFromFile(Deserializer&, char const*)",1,0,2,0,0,0
"sound_instrument.h",38,"non-virtual thunk to SoundInstrument::renderOutput(ModelStack*, StereoSample*, StereoSample*, long, long*, long, long, bool, bool)",1,1,2,2,6,12
"sound_instrument.h",53,"non-virtual thunk to SoundInstrument::resyncLFOs()",1,0,2,0,0,0
"sound_instrument.h",64,"non-virtual thunk to SoundInstrument::sendNote(ModelStackWithThreeMainThings*, bool, long, short const*, long, unsigned char, unsigned long, long, unsigned long)",1,0,2,0,0,0
"sound_instrument.h",55,"non-virtual thunk to SoundInstrument::setActiveClip(ModelStackWithTimelineCounter*, PgmChangeSend)",1,0,2,0,0,0
"sound_instrument.h",57,"non-virtual thunk to SoundInstrument::setupPatching(ModelStackWithTimelineCounter*)",1,0,2,0,0,0
"sound_instrument.h",77,"non-virtual thunk to SoundInstrument::setupWithoutActiveClip(ModelStack*)",1,0,2,0,0,0
"sound_instrument.h",54,"non-virtual thunk to SoundInstrument::toModControllable()",1,0,2,0,0,0
"sound_instrument.h",33,"non-virtual thunk to SoundInstrument::writeDataToFile(Serializer&, Clip*, Song*)",1,0,2,0,0,0
"sound_instrument.h",30,"non-virtual thunk to SoundInstrument::~SoundInstrument()",1,0,41,0,0,0
"sound_instrument.h",30,"non-virtual thunk to SoundInstrument::~SoundInstrument()",1,0,37,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 32>::emplace_back<char (&)[11]>(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 32>*, char[11]&) (always inlined)",0,0,0,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>::emplace_back<char (&)[20]>(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>*, char[20]&) (always inlined)",0,0,0,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>::emplace_back<char const*>(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>*, const char*) (always inlined)",0,0,0,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>::emplace_back<std::basic_string_view<char, std::char_traits<char> > >(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>*, class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>::emplace_back<std::basic_string_view<char, std::char_traits<char> >&>(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>*, class basic_string_view<char, std::char_traits<char> >&) (always inlined)",0,0,0,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>::full(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>*) (always inlined)",0,0,0,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>::non_trivial<char const*>(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>*, class initializer_list<char const*>) (always inlined)",0,0,0,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>::unsafe_set_size(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 3>*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"non_trivial<std::basic_string_view<char, std::char_traits<char> >, 7>::emplace_back<char const*&>(const struct non_trivial<std::basic_string_view<char, std::char_traits<char> >, 7>*, const char*&) (always inlined)",0,0,0,0,0,0
"non_audio_drum.cpp",31,"NonAudioDrum::allowNoteTails(const class NonAudioDrum*, class ModelStackWithSoundFlags*, bool)",1,0,2,0,0,0
"non_audio_drum.cpp",41,"NonAudioDrum::anyNoteIsOn(const class NonAudioDrum*)",1,0,2,0,0,0
"non_audio_drum.cpp",76,"NonAudioDrum::modChange(const class NonAudioDrum*, class ModelStackWithThreeMainThings*, long int, signed char*, unsigned char*, long int)",15,0,79,0,0,0
"non_audio_drum.cpp",59,"NonAudioDrum::modEncoderAction(const class NonAudioDrum*, class ModelStackWithThreeMainThings*, signed char, unsigned char)",4,0,40,0,0,0
,0,"NonAudioDrum::modEncoderAction(const class NonAudioDrum*, class ModelStackWithThreeMainThings*, signed char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"NonAudioDrum::NonAudioDrum(const class NonAudioDrum*, enum DrumType) (always inlined)",0,0,0,0,0,0
"non_audio_drum.cpp",115,"NonAudioDrum::readDrumTagFromFile(const class NonAudioDrum*, class Deserializer&, const char*)",4,0,35,0,0,0
"non_audio_drum.h",39,"NonAudioDrum::toModControllable(const class NonAudioDrum*)",1,0,2,0,0,0
"non_audio_drum.cpp",45,"NonAudioDrum::unassignAllVoices(const class NonAudioDrum*)",2,0,8,0,0,0
"non_audio_instrument.h",46,"NonAudioInstrument::beenEdited(const class NonAudioInstrument*, bool)",1,0,1,0,0,0
"non_audio_instrument.cpp",191,"NonAudioInstrument::doTickForwardForArp(const class NonAudioInstrument*, class ModelStack*, long int)",9,0,56,0,0,0
"non_audio_instrument.cpp",225,"NonAudioInstrument::getParamManager(const class NonAudioInstrument*, class Song*)",2,0,4,0,0,0
"non_audio_instrument.h",48,"NonAudioInstrument::getSlotXMLTag(const class NonAudioInstrument*)",1,0,3,0,0,0
"non_audio_instrument.cpp",250,"NonAudioInstrument::needsEarlyPlayback(const class NonAudioInstrument*)",1,0,10,0,0,0
,0,"NonAudioInstrument::NonAudioInstrument(const class NonAudioInstrument*, enum OutputType) (always inlined)",0,0,0,0,0,0
"melodic_instrument.cpp",644,"NonAudioInstrument::polyphonicExpressionEventOnChannelOrNote(const class NonAudioInstrument*, long int, long int, long int, enum MIDICharacteristic)",20,0,95,0,0,0
"non_audio_instrument.cpp",233,"NonAudioInstrument::readTagFromFile(const class NonAudioInstrument*, class Deserializer&, const char*)",6,0,37,0,0,0
"non_audio_instrument.cpp",34,"NonAudioInstrument::renderOutput(const class NonAudioInstrument*, class ModelStack*, class StereoSample*, class StereoSample*, long int, long int*, long int, long int, bool, bool)",10,0,58,0,0,0
"non_audio_instrument.cpp",71,"NonAudioInstrument::sendNote(const class NonAudioInstrument*, class ModelStackWithThreeMainThings*, bool, long int, const short int*, long int, unsigned char, long unsigned int, long int, long unsigned int)",10,0,50,0,0,0
"non_audio_instrument.h",56,"NonAudioInstrument::toModControllable(const class NonAudioInstrument*)",1,0,2,0,0,0
,0,"NonAudioInstrument::~NonAudioInstrument(const class NonAudioInstrument*) (always inlined)",0,0,0,0,0,0
"DX7Cartridge.cpp",103,"normparm(char, char, int)",5,0,20,0,0,0
,0,"normparm(char, char, int) (always inlined)",0,0,0,0,0,0
,0,"Note::getLift(const class Note*) (always inlined)",0,0,0,0,0,0
,0,"Note::getProbability(const class Note*) (always inlined)",0,0,0,0,0,0
,0,"Note::getVelocity(const class Note*) (always inlined)",0,0,0,0,0,0
,0,"Note::setLength(const class Note*, long int) (always inlined)",0,0,0,0,0,0
,0,"Note::setLift(const class Note*, long int) (always inlined)",0,0,0,0,0,0
,0,"Note::setProbability(const class Note*, long int) (always inlined)",0,0,0,0,0,0
,0,"Note::setVelocity(const class Note*, long int) (always inlined)",0,0,0,0,0,0
"functions.cpp",1835,"noteCodeToString(long int, char*, long int*)",11,0,53,0,0,0
"note_mode.h",44,"NoteMode::getOptions(const class NoteMode*)",4,0,63,0,0,0
"sound_editor.cpp",134,"NoteMode::isRelevant(const class NoteMode*, class ModControllableAudio*, long int)",1,0,6,0,0,0
,0,"NoteMode::NoteMode(const class NoteMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"note_mode.h",32,"NoteMode::readCurrentValue(const class NoteMode*)",2,0,6,0,0,0
,0,"NoteMode::readCurrentValue(const class NoteMode*) (always inlined)",0,0,0,0,0,0
"note_mode.h",34,"NoteMode::writeCurrentValue(const class NoteMode*)",8,0,44,0,0,0
"note_mode.h",29,"NoteMode::~NoteMode(const class NoteMode*)",2,0,6,0,0,0
"menu_item.h",54,"NoteMode::~NoteMode(const class NoteMode*)",1,0,1,0,0,0
,0,"NoteModeFromOctaveMode::NoteModeFromOctaveMode(const class NoteModeFromOctaveMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"note_mode.h",58,"NoteModeFromOctaveMode::readCurrentValue(const class NoteModeFromOctaveMode*)",4,0,30,0,0,0
"note_mode.h",54,"NoteModeFromOctaveMode::~NoteModeFromOctaveMode(const class NoteModeFromOctaveMode*)",2,0,6,0,0,0
"menu_item.h",54,"NoteModeFromOctaveMode::~NoteModeFromOctaveMode(const class NoteModeFromOctaveMode*)",1,0,1,0,0,0
,0,"NoteRow::addCorrespondingNotes(const class NoteRow*, long int, long int, unsigned char, class ModelStackWithNoteRow*, bool, class Action*) (always inlined)",0,0,0,0,0,0
"note_row.cpp",3755,"NoteRow::appendNoteRow(const class NoteRow*, class ModelStackWithNoteRow*, class ModelStackWithNoteRow*, long int, long int, long int)",82,0,417,0,0,0
"note_row.cpp",2181,"NoteRow::attemptLateStartOfNextNoteToPlay(const class NoteRow*, class ModelStackWithNoteRow*, class Note*)",35,0,206,0,0,0
"note_row.cpp",527,"NoteRow::attemptNoteAdd(const class NoteRow*, long int, long int, long int, long int, class ModelStackWithNoteRow*, class Action*)",25,0,119,0,0,0
,0,"NoteRow::attemptNoteAddReversed(const class NoteRow*, class ModelStackWithNoteRow*, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"note_row.cpp",1553,"NoteRow::changeNotesAcrossAllScreens(const class NoteRow*, long int, class ModelStackWithNoteRow*, class Action*, long int, long int)",27,0,135,0,0,0
"note_row.cpp",645,"NoteRow::clearArea(const class NoteRow*, long int, long int, class ModelStackWithNoteRow*, class Action*, long unsigned int, bool)",60,0,254,0,0,0
,0,"NoteRow::clearArea(const class NoteRow*, long int, long int, class ModelStackWithNoteRow*, class Action*, long unsigned int, bool) (always inlined)",0,0,0,0,0,0
"note_row.cpp",4048,"NoteRow::clearMPEUpUntilNextNote(const class NoteRow*, class ModelStackWithNoteRow*, long int, long int, bool)",37,0,141,0,0,0
,0,"NoteRow::complexSetNoteLength(const class NoteRow*, class Note*, long unsigned int, class ModelStackWithNoteRow*, class Action*) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::deleteNoteByIndex(const class NoteRow*, long int, class Action*, long int, class InstrumentClip*) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::deleteNoteByPos(const class NoteRow*, class ModelStackWithNoteRow*, long int, class Action*) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::deleteOldDrumNames(const class NoteRow*, bool) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::deleteParamManager(const class NoteRow*, bool) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::doesProbabilityExist(const class NoteRow*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::editNoteRepeatAcrossAllScreens(const class NoteRow*, long int, long int, class ModelStackWithNoteRow*, class Action*, long unsigned int, long int) (always inlined)",0,0,0,0,0,0
"note_row.cpp",2546,"NoteRow::generateRepeats(const class NoteRow*, class ModelStackWithNoteRow*, long unsigned int, long unsigned int, long int, class Action*)",111,0,571,0,0,0
,0,"NoteRow::getColourOffset(const class NoteRow*, class InstrumentClip*) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::getDefaultProbability(const class NoteRow*, class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
"note_row.cpp",3490,"NoteRow::getDistanceToNextNote(const class NoteRow*, long int, const class ModelStackWithNoteRow*, bool)",19,0,54,0,0,0
"model_stack.h",150,"NoteRow::getEffectiveSequenceDirectionMode(const class ModelStackWithNoteRow*, const class NoteRow*)",3,0,16,0,0,0
,0,"NoteRow::getEffectiveSequenceDirectionMode(const class NoteRow*, const class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
"note_row.cpp",3998,"NoteRow::getLivePos(const class NoteRow*, const class ModelStackWithNoteRow*)",12,0,44,0,0,0
,0,"NoteRow::getMPEValues(const class NoteRow*, class ModelStackWithNoteRow*, short int*) (always inlined)",0,0,0,0,0,0
"param_manager.h",67,"NoteRow::getMPEValues(const class NoteRow*, short int*, class ModelStackWithNoteRow*)",6,0,17,0,0,0
,0,"NoteRow::getNoteCode(const class NoteRow*) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::getSquareType(const class NoteRow*, long int, long int, class Note**, class Note**, class ModelStackWithNoteRow*, bool, long int, class Action*, bool, bool) (always inlined)",0,0,0,0,0,0
"learned_midi.h",59,"NoteRow::giveMidiCommandsToDrum(const class NoteRow*)",7,0,31,0,0,0
,0,"NoteRow::giveMidiCommandsToDrum(const class NoteRow*) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::grabMidiCommandsFromDrum(const class NoteRow*) (always inlined)",0,0,0,0,0,0
"note_row.cpp",4024,"NoteRow::hasIndependentPlayPos(const class NoteRow*)",1,0,9,0,0,0
,0,"NoteRow::hasIndependentPlayPos(const class NoteRow*) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::hasNoNotes(const class NoteRow*) (always inlined)",0,0,0,0,0,0
"note_row.cpp",2166,"NoteRow::isAuditioning(const class NoteRow*, class ModelStackWithNoteRow*)",6,0,30,0,0,0
,0,"NoteRow::isAuditioning(const class NoteRow*, class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::NoteRow(const class NoteRow*, short int) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::noteRowMayMakeSound(const class NoteRow*, bool) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::nudgeNotesAcrossAllScreens(const class NoteRow*, long int, class ModelStackWithNoteRow*, class Action*, long unsigned int, long int) (always inlined)",0,0,0,0,0,0
"note_row.cpp",3679,"NoteRow::paste(const class NoteRow*, class ModelStackWithNoteRow*, class CopiedNoteRow*, float, long int, class Action*)",18,0,108,0,0,0
"note_row.cpp",2281,"NoteRow::playNote(const class NoteRow*, bool, class ModelStackWithNoteRow*, class Note*, long int, long unsigned int, bool, struct PendingNoteOnList*)",46,0,410,0,0,0
,0,"NoteRow::quantize(const class NoteRow*, class ModelStackWithNoteRow*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::readFromFile(const class NoteRow*, class Deserializer&, long int*, class InstrumentClip*, class Song*, long int) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::recordNoteOff(const class NoteRow*, long unsigned int, class ModelStackWithNoteRow*, class Action*, long int) (always inlined)",0,0,0,0,0,0
"note_row.cpp",4093,"NoteRow::recordPolyphonicExpressionEvent(const class NoteRow*, class ModelStackWithNoteRow*, long int, long int, bool)",32,0,185,0,0,0
,0,"NoteRow::rememberDrumName(const class NoteRow*) (always inlined)",0,0,0,0,0,0
"note_row.cpp",1664,"NoteRow::renderRow(const class NoteRow*, class TimelineView*, class RGB, class RGB, class RGB, class RGB*, unsigned char*, bool, long unsigned int, bool, long int, long unsigned int, long int, long int, bool, long int)",49,0,268,0,0,0
"note_row.cpp",3972,"NoteRow::resumeOriginalNoteRowFromThisClone(const class NoteRow*, class ModelStackWithNoteRow*, class ModelStackWithNoteRow*)",12,0,72,0,0,0
"note_row.cpp",2869,"NoteRow::resumePlayback(const class NoteRow*, class ModelStackWithNoteRow*, bool)",14,0,63,0,0,0
"note_row.cpp",3318,"NoteRow::setDrum(const class NoteRow*, class Drum*, class Kit*, class ModelStackWithNoteRow*, class InstrumentClip*, class ParamManager*, bool)",58,0,301,0,0,0
"note_row.cpp",2413,"NoteRow::setLength(const class NoteRow*, class ModelStackWithNoteRow*, long int, class Action*, long int, bool)",15,0,69,0,0,0
,0,"NoteRow::setSequenceDirectionMode(const class NoteRow*, class ModelStackWithNoteRow*, enum SequenceDirection) (always inlined)",0,0,0,0,0,0
"note_row.cpp",3547,"NoteRow::shiftHorizontally(const class NoteRow*, long int, class ModelStackWithNoteRow*)",12,0,69,0,0,0
,0,"NoteRow::silentlyResumePlayback(const class NoteRow*, class ModelStackWithNoteRow*) (always inlined)",0,0,0,0,0,0
"note_row.cpp",1654,"NoteRow::stopCurrentlyPlayingNote(const class NoteRow*, class ModelStackWithNoteRow*, bool, class Note*)",2,0,5,0,0,0
"note_row.cpp",1657,"NoteRow::stopCurrentlyPlayingNote(const class NoteRow*, class ModelStackWithNoteRow*, bool, class Note*)",3,0,18,0,0,0
,0,"NoteRow::stopCurrentlyPlayingNote(const class NoteRow*, class ModelStackWithNoteRow*, bool, class Note*) (always inlined)",0,0,0,0,0,0
"note_row.cpp",2851,"NoteRow::toggleMute(const class NoteRow*, class ModelStackWithNoteRow*, bool)",8,0,29,0,0,0
,0,"NoteRow::toggleMute(const class NoteRow*, class ModelStackWithNoteRow*, bool) (always inlined)",0,0,0,0,0,0
,0,"NoteRow::trimNoteDataToNewClipLength(const class NoteRow*, long unsigned int, class InstrumentClip*, class Action*, long int) (always inlined)",0,0,0,0,0,0
"note_row.cpp",3990,"NoteRow::trimParamManager(const class NoteRow*, class ModelStackWithNoteRow*)",3,0,15,0,0,0
"note_row.cpp",2442,"NoteRow::trimToLength(const class NoteRow*, long unsigned int, class ModelStackWithNoteRow*, class Action*)",39,0,182,0,0,0
"note_row.cpp",63,"NoteRow::~NoteRow(const class NoteRow*)",9,0,21,0,0,0
"note_row_vector.cpp",45,"NoteRowVector::deleteNoteRowAtIndex(const class NoteRowVector*, long int, long int)",5,0,26,0,0,0
"resizeable_array.h",50,"NoteRowVector::getElement(const class NoteRowVector*, long int)",4,0,9,0,0,0
"note_row_vector.cpp",35,"NoteRowVector::insertNoteRowAtIndex(const class NoteRowVector*, long int)",8,0,47,0,0,0
"note_row_vector.cpp",52,"NoteRowVector::insertNoteRowAtY(const class NoteRowVector*, long int, long int*)",8,0,20,0,0,0
,0,"NoteRowVector::NoteRowVector(const class NoteRowVector*) (always inlined)",0,0,0,0,0,0
,0,"NoteRowVector::~NoteRowVector(const class NoteRowVector*) (always inlined)",0,0,0,0,0,0
,0,"NoteSet::count(const class NoteSet*) (always inlined)",0,0,0,0,0,0
,0,"NoteSet::has(const class NoteSet*, signed char) (always inlined)",0,0,0,0,0,0
,0,"NoteSet::NoteSet(const class NoteSet*) (always inlined)",0,0,0,0,0,0
,0,"NotesState::enableNote(const struct NotesState*, unsigned char, unsigned char, bool, short int*) (always inlined)",0,0,0,0,0,0
,0,"NotesState::noteEnabled(const struct NotesState*, unsigned char) (always inlined)",0,0,0,0,0,0
"notes_state.h",54,"NotesState::NotesState(const struct NotesState*)",2,0,12,0,0,0
"resizeable_array.h",56,"NoteVector::getLast(const class NoteVector*)",1,0,3,0,0,0
"note_vector.cpp",22,"NoteVector::NoteVector(const class NoteVector*)",1,0,4,0,0,0
,0,"NoteVector::~NoteVector(const class NoteVector*) (always inlined)",0,0,0,0,0,0
"ui.cpp",129,"nullifyUIs()",4,0,21,0,0,0
"number.cpp",29,"Number::drawBar(const class Number*, long int, long int, long int)",9,0,65,0,0,0
"number.h",31,"Number::getMinValue(const class Number*)",1,0,2,0,0,0
,0,"Number::Number(const class Number*, enum String, enum String) (always inlined)",0,0,0,0,0,0
,0,"NumericLayer::NumericLayer(const class NumericLayer*) (always inlined)",0,0,0,0,0,0
"numeric_layer.cpp",29,"NumericLayer::renderWithoutBlink(const class NumericLayer*, unsigned char*)",1,0,3,0,0,0
"numeric_layer_basic_text.cpp",49,"NumericLayerBasicText::callBack(const class NumericLayerBasicText*)",6,0,18,0,0,0
"numeric_layer_basic_text.cpp",32,"NumericLayerBasicText::isNowOnTop(const class NumericLayerBasicText*)",8,0,32,0,0,0
,0,"NumericLayerBasicText::isNowOnTop(const class NumericLayerBasicText*) (always inlined)",0,0,0,0,0,0
,0,"NumericLayerBasicText::NumericLayerBasicText(const class NumericLayerBasicText*) (always inlined)",0,0,0,0,0,0
"numeric_layer_basic_text.cpp",64,"NumericLayerBasicText::render(const class NumericLayerBasicText*, unsigned char*)",5,0,18,0,0,0
"numeric_layer_basic_text.cpp",75,"NumericLayerBasicText::renderWithoutBlink(const class NumericLayerBasicText*, unsigned char*)",2,0,8,0,0,0
,0,"NumericLayerBasicText::renderWithoutBlink(const class NumericLayerBasicText*, unsigned char*) (always inlined)",0,0,0,0,0,0
"numeric_layer_basic_text.cpp",27,"NumericLayerBasicText::~NumericLayerBasicText(const class NumericLayerBasicText*)",2,0,6,0,0,0
"numeric_layer_basic_text.cpp",29,"NumericLayerBasicText::~NumericLayerBasicText(const class NumericLayerBasicText*)",1,0,1,0,0,0
"numeric_layer_loading_animation.cpp",34,"NumericLayerLoadingAnimation::callBack(const class NumericLayerLoadingAnimation*)",4,0,14,0,0,0
"ui_timer_manager.cpp",227,"NumericLayerLoadingAnimation::isNowOnTop(const class NumericLayerLoadingAnimation*)",1,0,3,0,0,0
,0,"NumericLayerLoadingAnimation::NumericLayerLoadingAnimation(const class NumericLayerLoadingAnimation*) (always inlined)",0,0,0,0,0,0
"numeric_layer_loading_animation.cpp",46,"NumericLayerLoadingAnimation::render(const class NumericLayerLoadingAnimation*, unsigned char*)",10,0,39,0,0,0
"numeric_layer_loading_animation.cpp",26,"NumericLayerLoadingAnimation::~NumericLayerLoadingAnimation(const class NumericLayerLoadingAnimation*)",2,0,6,0,0,0
"numeric_layer_loading_animation.cpp",26,"NumericLayerLoadingAnimation::~NumericLayerLoadingAnimation(const class NumericLayerLoadingAnimation*)",1,0,1,0,0,0
"numeric_layer_scrolling_text.cpp",58,"NumericLayerScrollingText::callBack(const class NumericLayerScrollingText*)",7,0,42,0,0,0
,0,"NumericLayerScrollingText::callBack(const class NumericLayerScrollingText*) (always inlined)",0,0,0,0,0,0
"numeric_layer_scrolling_text.cpp",33,"NumericLayerScrollingText::isNowOnTop(const class NumericLayerScrollingText*)",4,0,24,0,0,0
,0,"NumericLayerScrollingText::NumericLayerScrollingText(const class NumericLayerScrollingText*) (always inlined)",0,0,0,0,0,0
"numeric_layer_scrolling_text.cpp",46,"NumericLayerScrollingText::render(const class NumericLayerScrollingText*, unsigned char*)",2,0,16,0,0,0
"numeric_layer_scrolling_text.cpp",28,"NumericLayerScrollingText::~NumericLayerScrollingText(const class NumericLayerScrollingText*)",2,0,6,0,0,0
"numeric_layer_scrolling_text.cpp",30,"NumericLayerScrollingText::~NumericLayerScrollingText(const class NumericLayerScrollingText*)",1,0,1,0,0,0
"numeric_layer_scroll_transition.cpp",41,"NumericLayerScrollTransition::callBack(const class NumericLayerScrollTransition*)",15,0,66,0,0,0
"ui_timer_manager.cpp",227,"NumericLayerScrollTransition::isNowOnTop(const class NumericLayerScrollTransition*)",1,0,3,0,0,0
,0,"NumericLayerScrollTransition::NumericLayerScrollTransition(const class NumericLayerScrollTransition*) (always inlined)",0,0,0,0,0,0
"numeric_layer_scroll_transition.cpp",111,"NumericLayerScrollTransition::render(const class NumericLayerScrollTransition*, unsigned char*)",1,0,3,0,0,0
"numeric_layer_scroll_transition.cpp",26,"NumericLayerScrollTransition::~NumericLayerScrollTransition(const class NumericLayerScrollTransition*)",2,0,6,0,0,0
"numeric_layer_scroll_transition.cpp",28,"NumericLayerScrollTransition::~NumericLayerScrollTransition(const class NumericLayerScrollTransition*)",1,0,1,0,0,0
"octave_mode.h",42,"OctaveMode::getOptions(const class OctaveMode*)",4,0,63,0,0,0
,0,"OctaveMode::OctaveMode(const class OctaveMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"octave_mode.h",33,"OctaveMode::readCurrentValue(const class OctaveMode*)",2,0,6,0,0,0
"octave_mode.h",35,"OctaveMode::writeCurrentValue(const class OctaveMode*)",8,0,48,0,0,0
"octave_mode.h",30,"OctaveMode::~OctaveMode(const class OctaveMode*)",2,0,6,0,0,0
"menu_item.h",54,"OctaveMode::~OctaveMode(const class OctaveMode*)",1,0,1,0,0,0
,0,"OctaveModeToNoteMode::OctaveModeToNoteMode(const class OctaveModeToNoteMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"octave_mode.h",56,"OctaveModeToNoteMode::readCurrentValue(const class OctaveModeToNoteMode*)",4,0,30,0,0,0
"octave_mode.h",61,"OctaveModeToNoteMode::selectButtonPress(const class OctaveModeToNoteMode*)",1,0,3,0,0,0
"octave_mode.h",52,"OctaveModeToNoteMode::~OctaveModeToNoteMode(const class OctaveModeToNoteMode*)",2,0,6,0,0,0
"menu_item.h",54,"OctaveModeToNoteMode::~OctaveModeToNoteMode(const class OctaveModeToNoteMode*)",1,0,1,0,0,0
"octaves.h",28,"Octaves::getMaxValue(const class Octaves*)",1,0,2,0,0,0
"octaves.h",27,"Octaves::getMinValue(const class Octaves*)",1,0,2,0,0,0
,0,"Octaves::Octaves(const class Octaves*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"octaves.h",25,"Octaves::readCurrentValue(const class Octaves*)",2,0,6,0,0,0
"octaves.h",26,"Octaves::writeCurrentValue(const class Octaves*)",2,0,6,0,0,0
"octaves.h",22,"Octaves::~Octaves(const class Octaves*)",2,0,6,0,0,0
"menu_item.h",54,"Octaves::~Octaves(const class Octaves*)",1,0,1,0,0,0
"offset.h",30,"Offset::isRelevant(const class Offset*, class ModControllableAudio*, long int)",2,0,24,0,0,0
,0,"Offset::Offset(const class Offset*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"offset.h",25,"Offset::~Offset(const class Offset*)",2,0,6,0,0,0
"menu_item.h",54,"Offset::~Offset(const class Offset*)",1,0,1,0,0,0
,0,"OffTime::OffTime(const class OffTime*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"off_time.h",29,"OffTime::readCurrentValue(const class OffTime*)",2,0,5,0,0,0
"value.h",42,"OffTime::writeCurrentValue(const class OffTime*)",1,0,5,0,0,0
"off_time.h",22,"OffTime::~OffTime(const class OffTime*)",2,0,6,0,0,0
"menu_item.h",54,"OffTime::~OffTime(const class OffTime*)",1,0,1,0,0,0
,0,"oldModeToArpMode(enum OldArpMode) (always inlined)",0,0,0,0,0,0
,0,"oldModeToArpNoteMode(enum OldArpMode) (always inlined)",0,0,0,0,0,0
,0,"oldModeToArpOctaveMode(enum OldArpMode) (always inlined)",0,0,0,0,0,0
"oled.h",130,"OLED::cancelPopup(const class OLED*)",1,0,1,0,0,0
"oled.cpp",122,"OLED::clearAreaExact(long int, long int, long int, long int, unsigned char[128]*)",16,0,86,0,0,0
"oled.cpp",109,"OLED::clearMainImage()",6,0,22,0,0,0
"oled.cpp",962,"OLED::consoleText(const class OLED*, const char*)",28,0,258,0,0,0
"oled.cpp",1148,"OLED::consoleTimerEvent(const class OLED*)",32,0,160,0,0,0
"oled.cpp",1361,"OLED::displayError(const class OLED*, enum Error)",5,0,32,0,0,0
"oled.h",136,"OLED::displayLoadingAnimationText(const class OLED*, const char*, bool, bool)",3,0,5,0,0,0
"oled.h",120,"OLED::displayPopup(const class OLED*, const char*, signed char, bool, unsigned char, long int, enum DisplayPopupType)",1,0,5,0,0,0
,0,"OLED::displayWorkingAnimation(const char*) (always inlined)",0,0,0,0,0,0
"oled.cpp",427,"OLED::drawChar(unsigned char, long int, long int, unsigned char*, long int, long int, long int, long int, long int)",15,0,60,0,0,0
,0,"OLED::drawChar(unsigned char, long int, long int, unsigned char*, long int, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"oled.cpp",567,"OLED::drawConsoleTopLine()",1,0,18,0,0,0
"oled.cpp",225,"OLED::drawGraphicMultiLine(const unsigned char*, long int, long int, long int, unsigned char*, long int, long int)",16,0,97,0,0,0
"oled.cpp",329,"OLED::drawHorizontalLine(long int, long int, long int, unsigned char[128]*)",3,0,15,0,0,0
"oled.cpp",819,"OLED::drawPermanentPopupLookingText(const char*)",8,0,43,0,0,0
"oled.cpp",288,"OLED::drawRectangle(long int, long int, long int, long int, unsigned char[128]*)",4,0,27,0,0,0
"oled.cpp",504,"OLED::drawScreenTitle(class basic_string_view<char, std::char_traits<char> >)",2,0,25,0,0,0
"oled.cpp",339,"OLED::drawString(class basic_string_view<char, std::char_traits<char> >, long int, long int, unsigned char*, long int, long int, long int, long int, long int)",15,0,51,0,0,0
"oled.cpp",382,"OLED::drawStringAlignRight(const char*, long int, long int, long int, long int, long int, unsigned char*)",5,0,20,0,0,0
"oled.cpp",375,"OLED::drawStringCentred(const char*, long int, unsigned char*, long int, long int, long int, long int)",5,0,20,0,0,0
"oled.cpp",389,"OLED::drawStringCentredShrinkIfNecessary(const char*, long int, long int, long int, long int, unsigned char*)",17,0,48,0,0,0
"oled.cpp",362,"OLED::drawStringFixedLength(const char*, long int, long int, long int, unsigned char*, long int, long int, long int)",8,0,30,0,0,0
"oled.cpp",296,"OLED::drawVerticalLine(long int, long int, long int, unsigned char[128]*)",11,0,39,0,0,0
"oled.cpp",1268,"OLED::freezeWithError(const class OLED*, const char*)",33,0,181,0,0,0
"oled.h",116,"OLED::getNumBrowserAndMenuLines(const class OLED*)",1,0,2,0,0,0
"oled.cpp",657,"OLED::hasPopup(const class OLED*)",1,0,7,0,0,0
,0,"OLED::hasPopup(const class OLED*) (always inlined)",0,0,0,0,0,0
"oled.h",141,"OLED::hasPopupOfType(const class OLED*, enum DisplayPopupType)",2,0,11,0,0,0
,0,"OLED::hasPopupOfType(const class OLED*, enum DisplayPopupType) (always inlined)",0,0,0,0,0,0
"oled.cpp",197,"OLED::invertArea(long int, long int, long int, long int, unsigned char[128]*)",7,0,37,0,0,0
"oled.h",131,"OLED::isLayerCurrentlyOnTop(const class OLED*, class NumericLayer*)",2,0,20,0,0,0
,0,"OLED::isPopupPresent() (always inlined)",0,0,0,0,0,0
,0,"OLED::isPopupPresentOfType(enum DisplayPopupType) (always inlined)",0,0,0,0,0,0
,0,"OLED::OLED(const class OLED*) (always inlined)",0,0,0,0,0,0
"oled.cpp",852,"OLED::popupText(const char*, bool, enum DisplayPopupType)",23,0,127,10,0,341
"oled.h",124,"OLED::popupText(const class OLED*, const char*, enum DisplayPopupType)",1,0,3,0,0,0
"oled.h",127,"OLED::popupTextTemporary(const class OLED*, const char*, enum DisplayPopupType)",1,0,3,0,0,0
"oled.h",138,"OLED::removeLoadingAnimation(const class OLED*)",1,0,3,0,0,0
"oled.cpp",649,"OLED::removePopup()",5,0,17,0,0,0
"oled.cpp",912,"OLED::removeWorkingAnimation(const class OLED*)",5,0,30,0,0,0
,0,"OLED::removeWorkingAnimation(const class OLED*) (always inlined)",0,0,0,0,0,0
,0,"OLED::renderEmulated7Seg(const struct array<unsigned char, 4>&) (always inlined)",0,0,0,0,0,0
,0,"OLED::scrollingAndBlinkingTimerEvent() (always inlined)",0,0,0,0,0,0
"oled.cpp",716,"OLED::sendMainImage()",9,0,54,0,0,0
"oled.cpp",1005,"OLED::setupBlink(long int, long int, long int, long int, bool)",4,0,25,0,0,0
,0,"OLED::setupConsole(long int) (always inlined)",0,0,0,0,0,0
,0,"OLED::setupPopup(long int, long int) (always inlined)",0,0,0,0,0,0
"oled.cpp",1040,"OLED::setupSideScroller(class basic_string_view<char, std::char_traits<char> >, long int, long int, long int, long int, long int, long int, bool, long int)",16,0,39,0,0,0
,0,"OLED::stopBlink() (always inlined)",0,0,0,0,0,0
"oled.cpp",1067,"OLED::stopScrollingAnimation()",4,0,13,0,0,0
,0,"OLED::stopScrollingAnimation() (always inlined)",0,0,0,0,0,0
"oled.cpp",1079,"OLED::timerRoutine(const class OLED*)",4,0,12,0,0,0
"display.h",32,"OLED::~OLED(const class OLED*)",1,0,1,0,0,0
"oled.h",27,"OLED::~OLED(const class OLED*)",2,0,6,0,0,0
"oled_low_level.c",198,"oledDeselectionComplete()",3,0,18,0,0,0
,0,"oledDMAInit() (always inlined)",0,0,0,0,0,0
,0,"oledLowLevelTimerCallback() (always inlined)",0,0,0,0,0,0
,0,"oledMainInit() (always inlined)",0,0,0,0,0,0
"oled_low_level.c",51,"oledRoutine()",7,0,39,8,2,20
,0,"oledRoutine() (always inlined)",0,0,0,0,0,0
"oled_low_level.c",74,"oledSelectingComplete()",10,0,35,0,0,0
"oled_low_level.c",144,"oledTransferComplete(long unsigned int)",3,0,19,0,0,0
,0,"one_of<ModFXType>(enum ModFXType, class initializer_list<ModFXType>) (always inlined)",0,0,0,0,0,0
,0,"one_of<OscType>(enum OscType, class initializer_list<OscType>) (always inlined)",0,0,0,0,0,0
,0,"OnePole(float&, float, float) (always inlined)",0,0,0,0,0,0
,0,"OnlyForSoundUnpatchedParam::OnlyForSoundUnpatchedParam(const class OnlyForSoundUnpatchedParam*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"sound_unpatched_param.h",22,"OnlyForSoundUnpatchedParam::~OnlyForSoundUnpatchedParam(const class OnlyForSoundUnpatchedParam*)",2,0,6,0,0,0
"menu_item.h",54,"OnlyForSoundUnpatchedParam::~OnlyForSoundUnpatchedParam(const class OnlyForSoundUnpatchedParam*)",1,0,1,0,0,0
"open_addressing_hash_table.cpp",46,"OpenAddressingHashTable::empty(const class OpenAddressingHashTable*, bool)",6,0,10,0,0,0
,0,"OpenAddressingHashTable::getBucketAddress(const class OpenAddressingHashTable*, long int) (always inlined)",0,0,0,0,0,0
"open_addressing_hash_table.cpp",69,"OpenAddressingHashTable::getBucketIndex(long unsigned int, const class OpenAddressingHashTable*)",5,0,10,0,0,0
"open_addressing_hash_table.cpp",87,"OpenAddressingHashTable::insert(const class OpenAddressingHashTable*, long unsigned int, bool*)",48,0,179,0,0,0
"open_addressing_hash_table.cpp",196,"OpenAddressingHashTable::lookup(const class OpenAddressingHashTable*, long unsigned int)",14,0,39,0,0,0
,0,"OpenAddressingHashTable::OpenAddressingHashTable(const class OpenAddressingHashTable*) (always inlined)",0,0,0,0,0,0
,0,"OpenAddressingHashTable::secondaryMemoryGetBucketAddress(const class OpenAddressingHashTable*, long int) (always inlined)",0,0,0,0,0,0
,0,"OpenAddressingHashTable::~OpenAddressingHashTable(const class OpenAddressingHashTable*) (always inlined)",0,0,0,0,0,0
"open_addressing_hash_table.cpp",345,"OpenAddressingHashTableWith32bitKey::doesKeyIndicateEmptyBucket(const class OpenAddressingHashTableWith32bitKey*, long unsigned int)",1,0,4,0,0,0
"open_addressing_hash_table.cpp",337,"OpenAddressingHashTableWith32bitKey::getKeyFromAddress(const class OpenAddressingHashTableWith32bitKey*, void*)",1,0,2,0,0,0
,0,"OpenAddressingHashTableWith32bitKey::getKeyFromAddress(const class OpenAddressingHashTableWith32bitKey*, void*) (always inlined)",0,0,0,0,0,0
,0,"OpenAddressingHashTableWith32bitKey::OpenAddressingHashTableWith32bitKey(const class OpenAddressingHashTableWith32bitKey*) (always inlined)",0,0,0,0,0,0
"open_addressing_hash_table.cpp",341,"OpenAddressingHashTableWith32bitKey::setKeyAtAddress(const class OpenAddressingHashTableWith32bitKey*, long unsigned int, void*)",1,0,2,0,0,0
,0,"OpenAddressingHashTableWith32bitKey::setKeyAtAddress(const class OpenAddressingHashTableWith32bitKey*, long unsigned int, void*) (always inlined)",0,0,0,0,0,0
"open_addressing_hash_table.h",51,"OpenAddressingHashTableWith32bitKey::~OpenAddressingHashTableWith32bitKey(const class OpenAddressingHashTableWith32bitKey*)",3,0,7,0,0,0
"open_addressing_hash_table.h",51,"OpenAddressingHashTableWith32bitKey::~OpenAddressingHashTableWith32bitKey(const class OpenAddressingHashTableWith32bitKey*)",3,0,10,0,0,0
,0,"OpenAddressingHashTableWith32bitKey::~OpenAddressingHashTableWith32bitKey(const class OpenAddressingHashTableWith32bitKey*) (always inlined)",0,0,0,0,0,0
"cartridge.cpp",37,"openFile(const char*, class DX7Cartridge*)",34,0,218,0,0,0
"ui.cpp",129,"openUI(class UI*)",14,0,51,0,0,0
,0,"openUSBHost() (always inlined)",0,0,0,0,0,0
,0,"openUSBPeripheral() (always inlined)",0,0,0,0,0,0
,0,"operator delete",0,0,1,0,0,0
"operators.cpp",12,"operator delete(void*)",1,0,1,0,0,0
"general_memory_allocator.h",99,"operator new(unsigned int)",3,0,21,0,0,0
,0,"operator new[]",0,0,1,0,0,0
,0,"operator!=(const class ParamDescriptor&, const class ParamDescriptor&) (always inlined)",0,0,0,0,0,0
,0,"operator*<__vector(2) float>(float, class Common<__vector(2) float>) (always inlined)",0,0,0,0,0,0
,0,"operator+(const class _Iterator<true>&, int) (always inlined)",0,0,0,0,0,0
,0,"operator-<MenuItem**, std::span<MenuItem*> >(const class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >&, const class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >&) (always inlined)",0,0,0,0,0,0
,0,"operator-<std::basic_string_view<char>*, std::vector<std::basic_string_view<char>, deluge::memory::fallback_allocator<std::basic_string_view<char> > > >(const class __normal_iterator<std::basic_string_view<char, std::char_traits<char> >*, std::vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > > >&, const class __normal_iterator<std::basic_string_view<char, std::char_traits<char> >*, std::vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > > >&) (always inlined)",0,0,0,0,0,0
,0,"operator<=><char, std::char_traits<char> >(class basic_string_view<char, std::char_traits<char> >, class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
,0,"operator==(const class _Iterator<true>&, const class _Iterator<true>&) (always inlined)",0,0,0,0,0,0
,0,"operator==<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample> > >(const struct pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> > >&, const struct pair<__gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> >, __gnu_cxx::__normal_iterator<StereoSample*, std::span<StereoSample, 4294967295> > >&) (always inlined)",0,0,0,0,0,0
,0,"operator==<char, std::char_traits<char> >(class basic_string_view<char, std::char_traits<char> >, class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
,0,"operator==<long int*, std::span<long int> >(const class __normal_iterator<long int*, std::span<long int, 4294967295> >&, const class __normal_iterator<long int*, std::span<long int, 4294967295> >&) (always inlined)",0,0,0,0,0,0
,0,"operator==<MenuItem**, std::vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> > >(const class __normal_iterator<MenuItem**, std::vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> > >&, const class __normal_iterator<MenuItem**, std::vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> > >&) (always inlined)",0,0,0,0,0,0
,0,"optional<DelayBuffer::ResampleConfig>::has_value(const class optional<DelayBuffer::ResampleConfig>*) (always inlined)",0,0,0,0,0,0
,0,"optional<DelayBuffer::ResampleConfig>::operator=(const class optional<DelayBuffer::ResampleConfig>*, struct nullopt_t) (always inlined)",0,0,0,0,0,0
,0,"optional<DelayBuffer::ResampleConfig>::operator=<DelayBuffer::ResampleConfig>(const class optional<DelayBuffer::ResampleConfig>*, struct ResampleConfig) (always inlined)",0,0,0,0,0,0
,0,"optional<FatFS::File>::operator=<FatFS::File&>(const class optional<FatFS::File>*, class File&) (always inlined)",0,0,0,0,0,0
,0,"optional<FatFS::File>::optional(const class optional<FatFS::File>*) (always inlined)",0,0,0,0,0,0
,0,"optional<FatFS::File>::~optional(const class optional<FatFS::File>*) (always inlined)",0,0,0,0,0,0
,0,"optional<RGB>::optional<RGB&>(const class optional<RGB>*, class RGB&) (always inlined)",0,0,0,0,0,0
"ordered_resizeable_array.cpp",259,"OrderedResizeableArray::deleteAtKey(const class OrderedResizeableArray*, long int)",3,0,12,0,0,0
,0,"OrderedResizeableArray::getKeyAtIndex(const class OrderedResizeableArray*, long int) (always inlined)",0,0,0,0,0,0
,0,"OrderedResizeableArray::getKeyAtMemoryLocation(const class OrderedResizeableArray*, void*) (always inlined)",0,0,0,0,0,0
"ordered_resizeable_array.cpp",241,"OrderedResizeableArray::insertAtKey(const class OrderedResizeableArray*, long int, bool)",10,0,36,0,0,0
,0,"OrderedResizeableArray::OrderedResizeableArray(const class OrderedResizeableArray*, long int, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"OrderedResizeableArray::search(const class OrderedResizeableArray*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"ordered_resizeable_array.cpp",38,"OrderedResizeableArray::search(const class OrderedResizeableArray*, long int, long int, long int, long int)",7,0,27,0,0,0
"ordered_resizeable_array.cpp",56,"OrderedResizeableArray::searchExact(const class OrderedResizeableArray*, long int)",7,0,31,0,0,0
,0,"OrderedResizeableArray::setKeyAtIndex(const class OrderedResizeableArray*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"OrderedResizeableArray::setKeyAtMemoryLocation(const class OrderedResizeableArray*, long int, void*) (always inlined)",0,0,0,0,0,0
,0,"OrderedResizeableArray::~OrderedResizeableArray(const class OrderedResizeableArray*, const int) (always inlined)",0,0,0,0,0,0
"ordered_resizeable_array.cpp",200,"OrderedResizeableArrayWith32bitKey::generateRepeats(const class OrderedResizeableArrayWith32bitKey*, long int, long int)",18,0,105,0,0,0
"resizeable_array.cpp",56,"OrderedResizeableArrayWith32bitKey::OrderedResizeableArrayWith32bitKey(const class OrderedResizeableArrayWith32bitKey*, long int, long int, long int)",9,0,16,0,0,0
"ordered_resizeable_array.cpp",76,"OrderedResizeableArrayWith32bitKey::searchDual(const class OrderedResizeableArrayWith32bitKey*, const long int* restrict, long int* restrict)",9,0,40,0,0,0
"ordered_resizeable_array.cpp",106,"OrderedResizeableArrayWith32bitKey::searchMultiple(const class OrderedResizeableArrayWith32bitKey*, long int* restrict, long int, long int)",22,0,104,0,0,0
"ordered_resizeable_array.cpp",536,"OrderedResizeableArrayWith32bitKey::shiftHorizontal(const class OrderedResizeableArrayWith32bitKey*, long int, long int)",34,0,105,0,0,0
,0,"OrderedResizeableArrayWith32bitKey::~OrderedResizeableArrayWith32bitKey(const class OrderedResizeableArrayWith32bitKey*, const int) (always inlined)",0,0,0,0,0,0
"ordered_resizeable_array_with_multi_word_key.cpp",110,"OrderedResizeableArrayWithMultiWordKey::deleteAtKeyMultiWord(const class OrderedResizeableArrayWithMultiWordKey*, long unsigned int* restrict)",6,0,29,0,0,0
,0,"OrderedResizeableArrayWithMultiWordKey::deleteAtKeyMultiWord(const class OrderedResizeableArrayWithMultiWordKey*, long unsigned int* restrict) (always inlined)",0,0,0,0,0,0
"ordered_resizeable_array_with_multi_word_key.cpp",90,"OrderedResizeableArrayWithMultiWordKey::insertAtKeyMultiWord(const class OrderedResizeableArrayWithMultiWordKey*, long unsigned int* restrict, long int, long int)",12,0,39,0,0,0
,0,"OrderedResizeableArrayWithMultiWordKey::OrderedResizeableArrayWithMultiWordKey(const class OrderedResizeableArrayWithMultiWordKey*, long int, long int) (always inlined)",0,0,0,0,0,0
"ordered_resizeable_array_with_multi_word_key.cpp",26,"OrderedResizeableArrayWithMultiWordKey::searchMultiWord(const class OrderedResizeableArrayWithMultiWordKey*, long unsigned int* restrict, long int, long int, long int)",16,0,44,0,0,0
"ordered_resizeable_array_with_multi_word_key.cpp",70,"OrderedResizeableArrayWithMultiWordKey::searchMultiWordExact(const class OrderedResizeableArrayWithMultiWordKey*, long unsigned int* restrict, long int*, long int)",9,0,38,0,0,0
,0,"OrderedResizeableArrayWithMultiWordKey::~OrderedResizeableArrayWithMultiWordKey(const class OrderedResizeableArrayWithMultiWordKey*, const int) (always inlined)",0,0,0,0,0,0
,0,"Output::clipHasInstance(const class Output*, class Clip*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Output::clipLengthChanged(const class Output*, class Clip*, long int)",8,0,37,0,0,0
,0,"Output::detachActiveClip(const class Output*, class Song*) (always inlined)",0,0,0,0,0,0
"output.h",109,"Output::doTickForwardForArp(const class Output*, class ModelStack*, long int)",1,0,2,0,0,0
"output.cpp",444,"Output::endAnyArrangementRecording(const class Output*, class Song*, long int, long unsigned int)",28,0,141,0,0,0
,0,"Output::endAnyArrangementRecording(const class Output*, class Song*, long int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"Output::endArrangementPlayback(const class Output*, class Song*, long int, long unsigned int) (always inlined)",0,0,0,0,0,0
"output.h",134,"Output::getNameXMLTag(const class Output*)",1,0,3,0,0,0
"output.cpp",181,"Output::getParamManager(const class Output*, class Song*)",5,0,26,5,7,35
,0,"Output::getParamManager(const class Output*, class Song*) (always inlined)",0,0,0,0,0,0
"output.h",99,"Output::getThingWithMostReverb(const class Output*, class Sound**, class ParamManager**, class GlobalEffectableForClip**, long int*)",1,0,1,0,0,0
"resizeable_array.h",56,"Output::isEmpty(const class Output*)",4,0,20,0,0,0
"output.h",121,"Output::loadAllAudioFiles(const class Output*, bool)",1,0,2,0,0,0
"output.h",150,"Output::offerBendRangeUpdate(const class Output*, class ModelStack*, class MIDIDevice*, long int, long int, long int)",1,0,1,0,0,0
"output.h",146,"Output::offerReceivedAftertouch(const class Output*, class ModelStackWithTimelineCounter*, class MIDIDevice*, long int, long int, long int, bool*)",1,0,1,0,0,0
"output.h",108,"Output::offerReceivedCCToLearnedParams(const class Output*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*)",1,0,1,0,0,0
"output.h",138,"Output::offerReceivedNote(const class Output*, class ModelStackWithTimelineCounter*, class MIDIDevice*, bool, long int, long int, long int, bool, bool*)",1,0,1,0,0,0
"output.h",141,"Output::offerReceivedPitchBend(const class Output*, class ModelStackWithTimelineCounter*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, bool*)",1,0,1,0,0,0
"output.h",104,"Output::offerReceivedPitchBendToLearnedParams(const class Output*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*)",1,0,2,0,0,0
,0,"Output::Output(const class Output*, enum OutputType) (always inlined)",0,0,0,0,0,0
,0,"Output::pickAnActiveClipForArrangementPos(const class Output*, class ModelStack*, long int, enum PgmChangeSend) (always inlined)",0,0,0,0,0,0
"output.cpp",72,"Output::pickAnActiveClipIfPossible(const class Output*, class ModelStack*, bool, enum PgmChangeSend, bool)",1,0,9,0,0,0
"output.cpp",75,"Output::pickAnActiveClipIfPossible(const class Output*, class ModelStack*, bool, enum PgmChangeSend, bool)",12,0,55,0,0,0
,0,"Output::pickAnActiveClipIfPossible(const class Output*, class ModelStack*, bool, enum PgmChangeSend, bool) (always inlined)",0,0,0,0,0,0
,0,"Output::possiblyBeginArrangementRecording(const class Output*, class Song*, long int) (always inlined)",0,0,0,0,0,0
"output.cpp",271,"Output::readFromFile(const class Output*, class Deserializer&, class Song*, class Clip*, long int)",5,0,32,0,0,0
"output.cpp",285,"Output::readTagFromFile(const class Output*, class Deserializer&, const char*)",32,0,201,0,0,0
"output.cpp",52,"Output::setActiveClip(const class Output*, class ModelStackWithTimelineCounter*, enum PgmChangeSend)",7,0,22,0,0,0
"output.cpp",48,"Output::setupWithoutActiveClip(const class Output*, class ModelStack*)",1,0,3,0,0,0
,0,"Output::setupWithoutActiveClip(const class Output*, class ModelStack*) (always inlined)",0,0,0,0,0,0
"output.h",111,"Output::wantsToBeginArrangementRecording(const class Output*)",1,0,2,0,0,0
,0,"Output::wantsToBeginArrangementRecording(const class Output*) (always inlined)",0,0,0,0,0,0
"output.cpp",217,"Output::writeDataToFile(class Song*, class Clip*, const class Output*, class Serializer&, class Clip*, class Song*)",2,0,7,0,0,0
,0,"Output::writeDataToFile(const class Output*, class Serializer&, class Clip*, class Song*) (always inlined)",0,0,0,0,0,0
"output.cpp",218,"Output::writeDataToFile(const class Output*, class Serializer&, class Song*, class Clip*)",22,0,124,0,0,0
"output.cpp",197,"Output::writeToFile(const class Output*, class StorageManager&, class Clip*, class Song*)",9,0,41,0,0,0
"output.cpp",44,"Output::~Output(const class Output*)",3,0,8,0,0,0
"overwrite_file.cpp",44,"OverwriteFile::acceptCurrentOption(const class OverwriteFile*)",1,0,7,0,0,0
"display.h",92,"OverwriteFile::getOptions(const class OverwriteFile*)",5,0,39,0,0,0
,0,"OverwriteFile::getOptions(const class OverwriteFile*) (always inlined)",0,0,0,0,0,0
"overwrite_file.cpp",28,"OverwriteFile::getTitle(const class OverwriteFile*)",1,0,2,0,0,0
"overwrite_file.h",25,"OverwriteFile::~OverwriteFile(const class OverwriteFile*)",2,0,6,0,0,0
"context_menu.h",31,"OverwriteFile::~OverwriteFile(const class OverwriteFile*)",1,0,1,0,0,0
"pack.c",8,"pack_8bit_to_7bit(unsigned char*, long int, unsigned char*, long int)",8,0,56,0,0,0
"pack.c",94,"pack_8to7_rle(unsigned char*, unsigned char*, long int, long int)",42,0,164,0,0,0
,0,"pack_dense(unsigned char*, long int, unsigned char*, long int) (always inlined)",0,0,0,0,0,0
,0,"Pad::Pad(const class Pad*, unsigned char) (always inlined)",0,0,0,0,0,0
"pad_brightness.h",31,"PadBrightness::getMaxValue(const class PadBrightness*)",1,0,2,0,0,0
"pad_brightness.h",30,"PadBrightness::getMinValue(const class PadBrightness*)",1,0,2,0,0,0
,0,"PadBrightness::PadBrightness(const class PadBrightness*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"pad_brightness.h",32,"PadBrightness::readCurrentValue(const class PadBrightness*)",2,0,6,0,0,0
"pad_brightness.h",28,"PadBrightness::selectEncoderAction(const class PadBrightness*, long int)",1,0,2,0,0,0
,0,"PadBrightness::to_internal(const class PadBrightness*, long int) (always inlined)",0,0,0,0,0,0
,0,"PadBrightness::to_ui(const class PadBrightness*, long int) (always inlined)",0,0,0,0,0,0
"pad_brightness.h",40,"PadBrightness::writeCurrentValue(const class PadBrightness*)",3,0,8,0,0,0
"pad_brightness.h",23,"PadBrightness::~PadBrightness(const class PadBrightness*)",2,0,6,0,0,0
"menu_item.h",54,"PadBrightness::~PadBrightness(const class PadBrightness*)",1,0,1,0,0,0
,0,"pair<long unsigned int, long unsigned int>::pair<long unsigned int&, long unsigned int&>(const struct pair<long unsigned int, long unsigned int>*, long unsigned int&, long unsigned int&) (always inlined)",0,0,0,0,0,0
"value.h",42,"Pan::drawValue(const class Pan*)",8,0,50,0,0,0
"value.h",42,"Pan::drawValue(const class Pan*)",8,0,50,0,0,0
"pan.cpp",30,"Pan::drawValue(const class Pan*)",12,0,83,0,0,0
"value.h",42,"Pan::getFinalValue(const class Pan*)",3,0,13,0,0,0
"value.h",42,"Pan::getFinalValue(const class Pan*)",3,0,13,0,0,0
"pan.h",27,"Pan::getMaxValue(const class Pan*)",1,0,2,0,0,0
"pan.h",28,"Pan::getMinValue(const class Pan*)",1,0,2,0,0,0
,0,"Pan::Pan(const class Pan*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"pan.cpp",54,"Pan::readCurrentValue(const class Pan*)",3,0,27,0,0,0
"pan.h",44,"Pan::readCurrentValue(const class Pan*)",2,0,11,0,0,0
"pan.cpp",59,"Pan::readCurrentValue(const class Pan*)",4,0,39,0,0,0
"value.h",42,"Pan::writeCurrentValue(const class Pan*)",1,0,6,0,0,0
"menu_item.h",54,"Pan::~Pan(const class Pan*)",1,0,1,0,0,0
"menu_item.h",54,"Pan::~Pan(const class Pan*)",1,0,1,0,0,0
"menu_item.h",54,"Pan::~Pan(const class Pan*)",1,0,1,0,0,0
"pan.h",23,"Pan::~Pan(const class Pan*)",2,0,6,0,0,0
"pan.h",26,"Pan::~Pan(const class Pan*)",2,0,6,0,0,0
"pan.h",21,"Pan::~Pan(const class Pan*)",2,0,6,0,0,0
"param.cpp",49,"Param::getModelStackWithParam(const class Param*, void*)",1,0,3,0,0,0
"param.h",34,"Param::getP(const class Param*)",1,0,2,0,0,0
,0,"Param::Param(const class Param*, long int) (always inlined)",0,0,0,0,0,0
"param_collection.h",75,"ParamCollection::doesParamIdAllowAutomation(const class ParamCollection*, const class ModelStackWithParamId*)",1,0,2,0,0,0
"param_collection.cpp",64,"ParamCollection::knobPosToParamValue(const class ParamCollection*, long int, class ModelStackWithAutoParam*)",3,0,5,0,0,0
"param_collection.cpp",52,"ParamCollection::mayParamInterpolate(const class ParamCollection*, long int)",1,0,2,0,0,0
"param_collection.cpp",38,"ParamCollection::notifyParamModifiedInSomeWay(const class ParamCollection*, const class ModelStackWithAutoParam*, long int, bool, bool, bool)",10,0,35,0,0,0
"param_collection.cpp",75,"ParamCollection::notifyPingpongOccurred(const class ParamCollection*, class ModelStackWithParamCollection*)",1,0,3,0,0,0
,0,"ParamCollection::notifyPingpongOccurred(const class ParamCollection*, class ModelStackWithParamCollection*) (always inlined)",0,0,0,0,0,0
"param_collection.cpp",24,"ParamCollection::ParamCollection(const class ParamCollection*, long int, class ParamCollectionSummary*)",3,0,7,0,0,0
"param_collection.cpp",56,"ParamCollection::paramValueToKnobPos(const class ParamCollection*, long int, class ModelStackWithAutoParam*)",2,0,6,0,0,0
"param_collection.cpp",71,"ParamCollection::setPlayPos(const class ParamCollection*, long unsigned int, class ModelStackWithParamCollection*, bool)",1,0,3,0,0,0
,0,"ParamCollection::setPlayPos(const class ParamCollection*, long unsigned int, class ModelStackWithParamCollection*, bool) (always inlined)",0,0,0,0,0,0
"param_collection.h",74,"ParamCollection::shouldParamIndicateMiddleValue(const class ParamCollection*, const class ModelStackWithParamId*)",1,0,2,0,0,0
,0,"ParamCollectionSummary::cloneFlagsFrom(const class ParamCollectionSummary*, const class ParamCollectionSummary*) (always inlined)",0,0,0,0,0,0
,0,"ParamCollectionSummary::containsAutomation(const class ParamCollectionSummary*) (always inlined)",0,0,0,0,0,0
,0,"ParamCollectionSummary::resetAutomationRecord(const class ParamCollectionSummary*, long int) (always inlined)",0,0,0,0,0,0
,0,"ParamCollectionSummary::resetInterpolationRecord(const class ParamCollectionSummary*, long int) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::addSource(const class ParamDescriptor*, enum PatchSource) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::changeParam(const class ParamDescriptor*, long int) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::getBottomLevelSource(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::getDestination(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::getJustTheParam(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::getSecondSourceFromTop(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::getTopLevelSource(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::hasJustOneSource(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::hasSecondSource(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::isJustAParam(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::isNull(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::isSetToParamWithNoSource(const class ParamDescriptor*, long int) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::ParamDescriptor(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::setToHaveParamAndSource(const class ParamDescriptor*, long int, enum PatchSource) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::setToHaveParamAndTwoSources(const class ParamDescriptor*, long int, enum PatchSource, enum PatchSource) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::setToHaveParamOnly(const class ParamDescriptor*, long int) (always inlined)",0,0,0,0,0,0
,0,"ParamDescriptor::setToNull(const class ParamDescriptor*) (always inlined)",0,0,0,0,0,0
"param_manager.cpp",167,"ParamManager::cloneParamCollectionsFrom(const class ParamManager*, const class ParamManager*, bool, bool, long int)",28,0,171,0,0,0
,0,"ParamManager::containsAnyMainParamCollections(const class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ParamManager::containsAnyParamCollectionsIncludingExpression(const class ParamManager*) (always inlined)",0,0,0,0,0,0
"param_manager.cpp",277,"ParamManager::destructAndForgetParamCollections(const class ParamManager*)",6,0,20,0,0,0
"param_manager.h",67,"ParamManager::ensureExpressionParamSetExists(const class ParamManager*, bool)",9,0,76,0,0,0
,0,"ParamManager::forgetParamCollections(const class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ParamManager::getExpressionParamSet(const class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ParamManager::getExpressionParamSetOffset(const class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ParamManager::getExpressionParamSetSummary(const class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ParamManager::getMIDIParamCollection(const class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ParamManager::getMIDIParamCollectionSummary(const class ParamManager*) (always inlined)",0,0,0,0,0,0
"param_manager.cpp",305,"ParamManager::getOrCreateExpressionParamSet(const class ParamManager*, bool)",2,0,9,0,0,0
"param_manager.h",144,"ParamManager::getPatchCableSet(const class ParamManager*)",3,0,14,0,0,0
,0,"ParamManager::getPatchCableSet(const class ParamManager*) (always inlined)",0,0,0,0,0,0
"param_manager.cpp",314,"ParamManager::getPatchCableSet(const class ParamManager*, const class ModelStackWithThreeMainThings*)",4,0,21,0,0,0
,0,"ParamManager::getPatchCableSetAllowJibberish(const class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ParamManager::getPatchCableSetSummary(const class ParamManager*) (always inlined)",0,0,0,0,0,0
"param_manager.h",117,"ParamManager::getPatchedParamSet(const class ParamManager*)",3,0,14,0,0,0
,0,"ParamManager::getPatchedParamSet(const class ParamManager*) (always inlined)",0,0,0,0,0,0
"param_manager.h",126,"ParamManager::getPatchedParamSetSummary(const class ParamManager*)",3,0,15,0,0,0
,0,"ParamManager::getPatchedParamSetSummary(const class ParamManager*) (always inlined)",0,0,0,0,0,0
"param_manager.h",99,"ParamManager::getUnpatchedParamSet(const class ParamManager*)",3,0,14,0,0,0
,0,"ParamManager::getUnpatchedParamSet(const class ParamManager*) (always inlined)",0,0,0,0,0,0
"param_manager.h",108,"ParamManager::getUnpatchedParamSetSummary(const class ParamManager*)",3,0,15,0,0,0
,0,"ParamManager::getUnpatchedParamSetSummary(const class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"ParamManager::notifyParamModifiedInSomeWay(const class ParamManager*, const class ModelStackWithAutoParam*, long int, bool, bool) (always inlined)",0,0,0,0,0,0
"param_manager.cpp",32,"ParamManager::ParamManager(const class ParamManager*)",6,0,23,0,0,0
"general_memory_allocator.h",99,"ParamManager::setupMIDI(const class ParamManager*)",10,0,61,0,0,0
"general_memory_allocator.h",99,"ParamManager::setupUnpatched(const class ParamManager*)",8,0,35,0,0,0
"general_memory_allocator.h",99,"ParamManager::setupWithPatching(const class ParamManager*)",16,0,125,0,0,0
"param_manager.cpp",115,"ParamManager::stealParamCollectionsFrom(const class ParamManager*, class ParamManager*, bool)",19,0,113,0,0,0
"param_manager.cpp",51,"ParamManager::toForTimeline(const class ParamManager*)",2,0,11,0,0,0
"param_manager.cpp",45,"ParamManager::~ParamManager(const class ParamManager*)",2,0,7,0,0,0
"param_manager.cpp",513,"ParamManagerForTimeline::appendParamManager(const class ParamManagerForTimeline*, class ModelStackWithThreeMainThings*, class ModelStackWithThreeMainThings*, long int, long int, bool)",11,0,52,0,0,0
"param_manager.cpp",474,"ParamManagerForTimeline::deleteAllAutomation(const class ParamManagerForTimeline*, class Action*, class ModelStackWithThreeMainThings*)",7,0,24,0,0,0
"param_manager.cpp",330,"ParamManagerForTimeline::ensureSomeParamCollections(const class ParamManagerForTimeline*)",1,0,10,0,0,0
,0,"ParamManagerForTimeline::ensureSomeParamCollections(const class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
"param_manager.cpp",392,"ParamManagerForTimeline::expectEvent(const class ParamManagerForTimeline*, const class ModelStackWithThreeMainThings*)",6,0,23,0,0,0
"param_manager.cpp",603,"ParamManagerForTimeline::expectNoFurtherTicks(const class ParamManagerForTimeline*, class ModelStackWithThreeMainThings*)",7,0,22,0,0,0
"param_manager.cpp",502,"ParamManagerForTimeline::generateRepeats(const class ParamManagerForTimeline*, class ModelStackWithThreeMainThings*, long unsigned int, long unsigned int, bool)",3,0,26,0,0,0
"param_manager.cpp",436,"ParamManagerForTimeline::grabValuesFromPos(const class ParamManagerForTimeline*, long unsigned int, class ModelStackWithThreeMainThings*)",7,0,24,0,0,0
"param_manager.cpp",406,"ParamManagerForTimeline::mightContainAutomation(const class ParamManagerForTimeline*)",1,0,14,0,0,0
"param_manager.cpp",590,"ParamManagerForTimeline::notifyPingpongOccurred(const class ParamManagerForTimeline*, class ModelStackWithThreeMainThings*)",8,0,23,0,0,0
,0,"ParamManagerForTimeline::nudgeAutomationHorizontallyAtPos(const class ParamManagerForTimeline*, long int, long int, long int, class Action*, class ModelStackWithThreeMainThings*, long int) (always inlined)",0,0,0,0,0,0
"param_manager.cpp",321,"ParamManagerForTimeline::ParamManagerForTimeline(const class ParamManagerForTimeline*)",2,0,10,0,0,0
"param_manager.cpp",365,"ParamManagerForTimeline::processCurrentPos(const class ParamManagerForTimeline*, class ModelStackWithThreeMainThings*, long int, bool, bool, bool)",12,0,55,0,0,0
"param_manager.cpp",419,"ParamManagerForTimeline::setPlayPos(const class ParamManagerForTimeline*, long unsigned int, class ModelStackWithThreeMainThings*, bool)",9,0,30,0,0,0
,0,"ParamManagerForTimeline::shiftHorizontally(const class ParamManagerForTimeline*, class ModelStackWithThreeMainThings*, long int, long int) (always inlined)",0,0,0,0,0,0
"param_manager.cpp",541,"ParamManagerForTimeline::tickSamples(const class ParamManagerForTimeline*, long int, class ModelStackWithThreeMainThings*)",7,0,21,0,0,0
"param_manager.cpp",56,"ParamManagerForTimeline::toForTimeline(const class ParamManagerForTimeline*)",1,0,1,0,0,0
"param_manager.cpp",488,"ParamManagerForTimeline::trimToLength(const class ParamManagerForTimeline*, long unsigned int, class ModelStackWithThreeMainThings*, class Action*, bool)",7,0,31,0,0,0
,0,"ParamManagerForTimeline::~ParamManagerForTimeline(const class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
,0,"paramNameForFile(const enum Kind, const unsigned char) (always inlined)",0,0,0,0,0,0
,0,"paramNameForFileConst(const enum Kind, const unsigned char) (always inlined)",0,0,0,0,0,0
,0,"paramNeedsLPF(unsigned char, bool) (always inlined)",0,0,0,0,0,0
"param_node_vector.cpp",24,"ParamNodeVector::ParamNodeVector(const class ParamNodeVector*)",1,0,4,0,0,0
,0,"ParamNodeVector::~ParamNodeVector(const class ParamNodeVector*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",227,"ParamSet::appendParamCollection(const class ParamSet*, class ModelStackWithParamCollection*, class ModelStackWithParamCollection*, long int, long int, bool)",6,0,39,0,0,0
,0,"ParamSet::backUpAllAutomatedParamsToAction(const class ParamSet*, class Action*, class ModelStackWithParamCollection*) (always inlined)",0,0,0,0,0,0
,0,"ParamSet::backUpParamToAction(const class ParamSet*, long int, class Action*, class ModelStackWithParamCollection*) (always inlined)",0,0,0,0,0,0
"param_set.h",87,"ParamSet::beenCloned(const class ParamSet*, bool, long int)",3,0,19,0,0,0
,0,"ParamSet::checkWhetherParamHasInterpolationNow(const class ParamSet*, const class ModelStackWithParamCollection*, long int) (always inlined)",0,0,0,0,0,0
,0,"ParamSet::copyOverridingFrom(const class ParamSet*, class ParamSet*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",281,"ParamSet::deleteAllAutomation(const class ParamSet*, class Action*, class ModelStackWithParamCollection*)",7,0,42,0,0,0
,0,"ParamSet::deleteAutomationForParamBasicForSetup(const class ParamSet*, class ModelStackWithParamCollection*, long int) (always inlined)",0,0,0,0,0,0
"param_set.cpp",306,"ParamSet::deleteTime(const class ParamSet*, class ModelStackWithParamCollection*, long int, long int)",32,0,156,0,0,0
"param_set.cpp",219,"ParamSet::generateRepeats(const class ParamSet*, class ModelStackWithParamCollection*, long unsigned int, long unsigned int, bool)",4,0,35,0,0,0
"model_stack.h",462,"ParamSet::getAutoParamFromId(const class ParamSet*, class ModelStackWithParamId*, bool)",2,0,7,0,0,0
,0,"ParamSet::getNumParams(const class ParamSet*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",203,"ParamSet::grabValuesFromPos(const class ParamSet*, long unsigned int, class ModelStackWithParamCollection*)",9,0,42,0,0,0
"param_set.cpp",297,"ParamSet::insertTime(const class ParamSet*, class ModelStackWithParamCollection*, long int, long int)",8,0,51,0,0,0
"param_set.cpp",61,"ParamSet::notifyParamModifiedInSomeWay(const class ParamSet*, const class ModelStackWithAutoParam*, long int, bool, bool, bool)",5,0,32,0,0,0
"param_collection.cpp",74,"ParamSet::notifyPingpongOccurred(const class ParamSet*, class ModelStackWithParamCollection*)",6,0,27,0,0,0
"param_set.cpp",320,"ParamSet::nudgeNonInterpolatingNodesAtPos(const class ParamSet*, long int, long int, long int, class Action*, class ModelStackWithParamCollection*)",9,0,50,0,0,0
,0,"ParamSet::paramHasAutomationNow(const class ParamSet*, class ParamCollectionSummary*, long int) (always inlined)",0,0,0,0,0,0
"param_set.cpp",87,"ParamSet::paramHasNoAutomationNow(const class ParamSet*, const class ModelStackWithParamCollection*, long int)",3,0,13,0,0,0
,0,"ParamSet::ParamSet(const class ParamSet*, long int, class ParamCollectionSummary*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",192,"ParamSet::playbackHasEnded(const class ParamSet*, class ModelStackWithParamCollection*)",5,0,30,0,0,0
"param_set.cpp",111,"ParamSet::processCurrentPos(const class ParamSet*, class ModelStackWithParamCollection*, long int, bool, bool, bool)",11,0,80,0,0,0
"param_set.cpp",185,"ParamSet::readParam(const class ParamSet*, class Deserializer&, class ParamCollectionSummary*, long int, long int)",4,0,23,0,0,0
,0,"ParamSet::readParam(const class ParamSet*, class Deserializer&, class ParamCollectionSummary*, long int, long int) (always inlined)",0,0,0,0,0,0
"param_set.cpp",271,"ParamSet::remotelySwapParamState(const class ParamSet*, class AutoParamState*, class ModelStackWithParamId*)",3,0,8,0,0,0
"param_set.cpp",150,"ParamSet::setPlayPos(const class ParamSet*, long unsigned int, class ModelStackWithParamCollection*, bool)",9,0,60,0,0,0
"param_set.cpp",262,"ParamSet::shiftHorizontally(const class ParamSet*, class ModelStackWithParamCollection*, long int, long int)",4,0,28,0,0,0
,0,"ParamSet::shiftParamVolumeByDB(const class ParamSet*, long int, float) (always inlined)",0,0,0,0,0,0
"param_set.cpp",136,"ParamSet::tickSamples(const class ParamSet*, long int, class ModelStackWithParamCollection*)",9,0,47,0,0,0
"param_set.cpp",240,"ParamSet::trimToLength(const class ParamSet*, long unsigned int, class ModelStackWithParamCollection*, class Action*, bool)",10,0,50,0,0,0
"param_set.cpp",170,"ParamSet::writeParamAsAttribute(const class ParamSet*, class Serializer&, const char*, long int, bool, bool, long int*)",10,0,57,0,0,0
,0,"PatchCable::initAmount(const class PatchCable*, long int) (always inlined)",0,0,0,0,0,0
,0,"PatchCable::makeUnusable(const class PatchCable*) (always inlined)",0,0,0,0,0,0
,0,"PatchCable::PatchCable(const class PatchCable*) (always inlined)",0,0,0,0,0,0
,0,"PatchCable::setup(const class PatchCable*, enum PatchSource, unsigned char, long int) (always inlined)",0,0,0,0,0,0
,0,"PatchCable::~PatchCable(const class PatchCable*) (always inlined)",0,0,0,0,0,0
"patch_cables.cpp",17,"PatchCables::beginSession(const class PatchCables*, class MenuItem*)",6,0,15,0,0,0
,0,"PatchCables::blinkShortcutsSoon(const class PatchCables*) (always inlined)",0,0,0,0,0,0
"patch_cables.cpp",98,"PatchCables::drawPixelsForOled(const class PatchCables*)",3,0,15,0,0,0
,0,"PatchCables::PatchCables(const class PatchCables*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"patch_cables.cpp",31,"PatchCables::readValueAgain(const class PatchCables*)",34,0,227,0,0,0
,0,"PatchCables::renderOptions(const class PatchCables*) (always inlined)",0,0,0,0,0,0
"patch_cables.cpp",195,"PatchCables::selectButtonPress(const class PatchCables*)",14,0,51,0,0,0
"patch_cables.cpp",112,"PatchCables::selectEncoderAction(const class PatchCables*, long int)",12,0,66,0,0,0
"patch_cables.cpp",184,"PatchCables::shouldBlinkPatchingSourceShortcut(const class PatchCables*, enum PatchSource, unsigned char*)",4,0,13,0,0,0
"patch_cables.cpp",151,"PatchCables::timerCallback(const class PatchCables*)",15,0,69,0,0,0
"patch_cables.h",8,"PatchCables::~PatchCables(const class PatchCables*)",6,0,28,0,0,0
"patch_cables.h",8,"PatchCables::~PatchCables(const class PatchCables*)",6,0,25,0,0,0
,0,"PatchCables::~PatchCables(const class PatchCables*) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",632,"PatchCableSet::appendParamCollection(const class PatchCableSet*, class ModelStackWithParamCollection*, class ModelStackWithParamCollection*, long int, long int, bool)",8,0,42,0,0,0
"patch_cable_set.cpp",738,"PatchCableSet::beenCloned(const class PatchCableSet*, bool, long int)",19,0,98,0,0,0
"patch_cable_set.cpp",1081,"PatchCableSet::deleteAllAutomation(const class PatchCableSet*, class Action*, class ModelStackWithParamCollection*)",14,0,47,0,0,0
"patch_cable_set.cpp",463,"PatchCableSet::deletePatchCable(const class PatchCableSet*, const class ModelStackWithParamCollection*, unsigned char)",9,0,48,0,0,0
,0,"PatchCableSet::deletePatchCable(const class PatchCableSet*, const class ModelStackWithParamCollection*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PatchCableSet::dissectParamId(long unsigned int, class ParamDescriptor*, enum PatchSource*) (always inlined)",0,0,0,0,0,0
,0,"PatchCableSet::doesDestinationDescriptorHaveAnyCables(const class PatchCableSet*, class ParamDescriptor) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",99,"PatchCableSet::doesParamHaveSomethingPatchedToIt(const class PatchCableSet*, long int)",1,0,6,0,0,0
,0,"PatchCableSet::freeDestinationMemory(const class PatchCableSet*, bool) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",622,"PatchCableSet::generateRepeats(const class PatchCableSet*, class ModelStackWithParamCollection*, long unsigned int, long unsigned int, bool)",4,0,23,0,0,0
"patch_cable_set.cpp",704,"PatchCableSet::getAutoParamFromId(const class PatchCableSet*, class ModelStackWithParamId*, bool)",8,0,28,0,0,0
"patch_cable_set.cpp",114,"PatchCableSet::getDestinationForParam(const class PatchCableSet*, long int)",3,0,20,0,0,0
,0,"PatchCableSet::getModifiedPatchCableAmount(const class PatchCableSet*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"PatchCableSet::getParam(const class PatchCableSet*, const class ModelStackWithParamCollection*, enum PatchSource, class ParamDescriptor, bool) (always inlined)",0,0,0,0,0,0
,0,"PatchCableSet::getParamId(class ParamDescriptor, enum PatchSource) (always inlined)",0,0,0,0,0,0
"patch_cable_set.h",104,"PatchCableSet::getParamKind(const class PatchCableSet*)",1,0,2,0,0,0
,0,"PatchCableSet::getPatchCableFromVelocityToLevel(const class PatchCableSet*) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",406,"PatchCableSet::getPatchCableIndex(const class PatchCableSet*, enum PatchSource, class ParamDescriptor, const class ModelStackWithParamCollection*, bool)",13,0,65,0,0,0
"patch_cable_set.cpp",605,"PatchCableSet::grabValuesFromPos(const class PatchCableSet*, long unsigned int, class ModelStackWithParamCollection*)",12,0,56,0,0,0
"patch_cable_set.cpp",1160,"PatchCableSet::grabVelocityToLevelFromMIDIDeviceDefinitely(const class PatchCableSet*, class MIDIDevice*)",5,0,20,0,0,0
"learned_midi.h",59,"PatchCableSet::grabVelocityToLevelFromMIDIInput(const class PatchCableSet*, class LearnedMIDI*)",2,0,9,0,0,0
,0,"PatchCableSet::grabVelocityToLevelFromMIDIInput(const class PatchCableSet*, class LearnedMIDI*) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",380,"PatchCableSet::isAnySourcePatchedToParamVolumeInspecific(const class PatchCableSet*, class ParamDescriptor)",3,0,58,0,0,0
"patch_cable_set.cpp",357,"PatchCableSet::isSourcePatchedToDestinationDescriptorVolumeInspecific(const class PatchCableSet*, enum PatchSource, class ParamDescriptor)",6,0,44,0,0,0
,0,"PatchCableSet::isSourcePatchedToSomething(const class PatchCableSet*, enum PatchSource) (always inlined)",0,0,0,0,0,0
,0,"PatchCableSet::isSourcePatchedToSomethingManuallyCheckCables(const class PatchCableSet*, enum PatchSource) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",1133,"PatchCableSet::knobPosToParamValue(const class PatchCableSet*, long int, class ModelStackWithAutoParam*)",3,0,6,0,0,0
"patch_cable_set.cpp",1007,"PatchCableSet::notifyParamModifiedInSomeWay(const class PatchCableSet*, const class ModelStackWithAutoParam*, long int, bool, bool, bool)",24,0,107,0,0,0
"patch_cable_set.cpp",1141,"PatchCableSet::notifyPingpongOccurred(const class PatchCableSet*, class ModelStackWithParamCollection*)",6,0,20,0,0,0
"patch_cable_set.cpp",1100,"PatchCableSet::nudgeNonInterpolatingNodesAtPos(const class PatchCableSet*, long int, long int, long int, class Action*, class ModelStackWithParamCollection*)",15,0,82,0,0,0
"patch_cable_set.cpp",1128,"PatchCableSet::paramValueToKnobPos(const class PatchCableSet*, long int, class ModelStackWithAutoParam*)",1,0,3,0,0,0
"param_descriptor.h",97,"PatchCableSet::patchCableIsUsable(const class PatchCableSet*, unsigned char, const class ModelStackWithThreeMainThings*)",5,0,19,0,0,0
,0,"PatchCableSet::PatchCableSet(const class PatchCableSet*, class ParamCollectionSummary*) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",594,"PatchCableSet::playbackHasEnded(const class PatchCableSet*, class ModelStackWithParamCollection*)",6,0,19,0,0,0
"patch_cable_set.cpp",710,"PatchCableSet::processCurrentPos(const class PatchCableSet*, class ModelStackWithParamCollection*, long int, bool, bool, bool)",18,0,76,0,0,0
,0,"PatchCableSet::processCurrentPos(const class PatchCableSet*, class ModelStackWithParamCollection*, long int, bool, bool, bool) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",798,"PatchCableSet::readPatchCablesFromFile(const class PatchCableSet*, class Deserializer&, long int)",62,0,498,0,0,0
"patch_cable_set.cpp",1068,"PatchCableSet::remotelySwapParamState(const class PatchCableSet*, class AutoParamState*, class ModelStackWithParamId*)",9,0,30,0,0,0
,0,"PatchCableSet::removeAllPatchingToParam(const class PatchCableSet*, class ModelStackWithParamCollection*, unsigned char) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",576,"PatchCableSet::setPlayPos(const class PatchCableSet*, long unsigned int, class ModelStackWithParamCollection*, bool)",12,0,44,0,0,0
"patch_cable_set.cpp",136,"PatchCableSet::setupPatching(const class PatchCableSet*, const class ModelStackWithParamCollection*)",72,0,417,0,0,0
"patch_cable_set.cpp",686,"PatchCableSet::shiftHorizontally(const class PatchCableSet*, class ModelStackWithParamCollection*, long int, long int)",4,0,21,0,0,0
"patch_cable_set.cpp",105,"PatchCableSet::swapCables(const class PatchCableSet*, long int, long int)",3,0,25,0,0,0
"patch_cable_set.cpp",560,"PatchCableSet::tickSamples(const class PatchCableSet*, long int, class ModelStackWithParamCollection*)",13,0,55,0,0,0
"patch_cable_set.cpp",655,"PatchCableSet::trimToLength(const class PatchCableSet*, long unsigned int, class ModelStackWithParamCollection*, class Action*, bool)",15,0,79,0,0,0
,0,"PatchCableSet::writePatchCablesToFile(const class PatchCableSet*, class Serializer&, bool) (always inlined)",0,0,0,0,0,0
"patch_cable_set.cpp",77,"PatchCableSet::~PatchCableSet(const class PatchCableSet*)",2,0,8,0,0,0
"patch_cable_set.cpp",77,"PatchCableSet::~PatchCableSet(const class PatchCableSet*)",6,0,20,0,0,0
"patch_cable_strength.cpp",44,"PatchCableStrength::beginSession(const class PatchCableStrength*, class MenuItem*)",2,0,10,0,0,0
"patch_cable_strength.cpp",254,"PatchCableStrength::buttonAction(const class PatchCableStrength*, unsigned char, bool, bool)",1,0,2,0,0,0
"patch_cable_strength.cpp",200,"PatchCableStrength::checkPermissionToBeginSession(const class PatchCableStrength*, class ModControllableAudio*, long int, class MultiRange**)",6,0,35,0,0,0
"patch_cable_strength.h",35,"PatchCableStrength::getDefaultEditPos(const class PatchCableStrength*)",1,0,2,0,0,0
"patch_cable_strength.cpp",230,"PatchCableStrength::getIndexOfPatchedParamToBlink(const class PatchCableStrength*)",1,0,9,0,0,0
"patch_cable_strength.h",33,"PatchCableStrength::getMaxValue(const class PatchCableStrength*)",1,0,2,0,0,0
"patch_cable_strength.h",32,"PatchCableStrength::getMinValue(const class PatchCableStrength*)",1,0,3,0,0,0
"patch_cable_strength.cpp",168,"PatchCableStrength::getModelStack(const class PatchCableStrength*, void*, bool)",7,0,35,0,0,0
"patch_cable_strength.cpp",163,"PatchCableStrength::getModelStackWithParam(const class PatchCableStrength*, void*)",1,0,2,0,0,0
"patch_cable_strength.cpp",242,"PatchCableStrength::getParamIndex(const class PatchCableStrength*)",1,0,6,0,0,0
"patch_cable_strength.cpp",238,"PatchCableStrength::getParamKind(const class PatchCableStrength*)",1,0,2,0,0,0
"patch_cable_strength.cpp",246,"PatchCableStrength::getPatchSource(const class PatchCableStrength*)",1,0,3,0,0,0
"patch_cable_strength.cpp",258,"PatchCableStrength::horizontalEncoderAction(const class PatchCableStrength*, long int)",5,0,20,0,0,0
"patch_cable_strength.h",55,"PatchCableStrength::learnKnob(const class PatchCableStrength*, class MIDIDevice*, long int, long int, long int)",1,0,2,0,0,0
,0,"PatchCableStrength::PatchCableStrength(const class PatchCableStrength*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"patch_cable_strength.cpp",149,"PatchCableStrength::readCurrentValue(const class PatchCableStrength*)",6,0,48,0,0,0
"patch_cable_strength.cpp",54,"PatchCableStrength::renderOLED(const class PatchCableStrength*)",24,0,209,0,0,0
"patch_cable_strength.cpp",250,"PatchCableStrength::selectButtonPress(const class PatchCableStrength*)",1,0,2,0,0,0
"patch_cable_strength.h",52,"PatchCableStrength::unlearnAction(const class PatchCableStrength*)",1,0,2,0,0,0
"patch_cable_strength.cpp",180,"PatchCableStrength::writeCurrentValue(const class PatchCableStrength*)",7,0,46,0,0,0
"patched_param.cpp",53,"PatchedParam::getLearningThing(const class PatchedParam*)",2,0,6,0,0,0
"patched_param.cpp",85,"PatchedParam::getModelStack(const class PatchedParam*, void*)",2,0,15,0,0,0
"patched_param.h",25,"PatchedParam::getP(const class PatchedParam*)",2,0,7,0,0,0
,0,"PatchedParam::getP(const class PatchedParam*) (always inlined)",0,0,0,0,0,0
"patched_param.cpp",66,"PatchedParam::getParamIndex(const class PatchedParam*)",1,0,5,0,0,0
"patched_param.cpp",62,"PatchedParam::getParamKind(const class PatchedParam*)",1,0,2,0,0,0
"patched_param.cpp",58,"PatchedParam::getParamSet(const class PatchedParam*)",2,0,16,0,0,0
,0,"PatchedParam::PatchedParam(const class PatchedParam*, long int) (always inlined)",0,0,0,0,0,0
"patched_param.cpp",79,"PatchedParam::patchingSourceShortcutPress(const class PatchedParam*, enum PatchSource, bool)",3,0,13,0,0,0
"buttons.cpp",261,"PatchedParam::selectButtonPress(const class PatchedParam*)",4,0,17,0,0,0
"patched_param.cpp",71,"PatchedParam::shouldBlinkPatchingSourceShortcut(const class PatchedParam*, enum PatchSource, unsigned char*)",4,0,28,0,0,0
"patched_param.cpp",44,"PatchedParam::shouldDrawDotOnName(const class PatchedParam*)",4,0,26,0,0,0
"array",276,"PatchedParamSet::beenCloned(const class PatchedParamSet*, bool, long int)",4,0,9,0,0,0
"param_set.h",125,"PatchedParamSet::getParamKind(const class PatchedParamSet*)",1,0,2,0,0,0
"param_set.cpp",509,"PatchedParamSet::knobPosToParamValue(const class PatchedParamSet*, long int, class ModelStackWithAutoParam*)",4,0,16,0,0,0
"param_set.cpp",447,"PatchedParamSet::notifyParamModifiedInSomeWay(const class PatchedParamSet*, const class ModelStackWithAutoParam*, long int, bool, bool, bool)",19,0,144,0,0,0
"param_set.cpp",498,"PatchedParamSet::paramValueToKnobPos(const class PatchedParamSet*, long int, class ModelStackWithAutoParam*)",3,0,14,0,0,0
,0,"PatchedParamSet::PatchedParamSet(const class PatchedParamSet*, class ParamCollectionSummary*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",524,"PatchedParamSet::shouldParamIndicateMiddleValue(const class PatchedParamSet*, const class ModelStackWithParamId*)",1,0,11,0,0,0
"param_set.h",116,"PatchedParamSet::~PatchedParamSet(const class PatchedParamSet*)",3,0,17,0,0,0
"param_set.h",116,"PatchedParamSet::~PatchedParamSet(const class PatchedParamSet*)",3,0,15,0,0,0
,0,"PatchedParamSet::~PatchedParamSet(const class PatchedParamSet*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::applyRangeAdjustment(const class Patcher*, long int*, class PatchCable*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::cableToExpParam(const class Patcher*, long int, long int, long int*, class PatchCable*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::cableToExpParamWithoutRangeAdjustment(const class Patcher*, long int, long int, long int*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::cableToLinearParam(const class Patcher*, long int, long int, long int*, class PatchCable*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::cableToLinearParamWithoutRangeAdjustment(const class Patcher*, long int, long int, long int*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::combineCablesExp(const class Patcher*, const struct Destination*, long unsigned int, class Sound*, class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::combineCablesLinear(const class Patcher*, const struct Destination*, long unsigned int, class Sound*, class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::combineCablesLinearForRangeParam(const class Patcher*, const struct Destination*, class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::getParamFinalValuesPointer(const class Patcher*) (always inlined)",0,0,0,0,0,0
,0,"Patcher::getSourceValue(const class Patcher*, enum PatchSource) (always inlined)",0,0,0,0,0,0
,0,"Patcher::Patcher(const class Patcher*, const struct PatchableInfo*) (always inlined)",0,0,0,0,0,0
"patcher.cpp",315,"Patcher::performInitialPatching(const class Patcher*, class Sound*, class ParamManager*)",57,0,529,0,0,0
"patcher.cpp",74,"Patcher::performPatching(const class Patcher*, long unsigned int, class Sound*, class ParamManagerForTimeline*)",62,0,436,0,0,0
"patcher.cpp",40,"Patcher::recalculateFinalValueForParamWithNoCables(const class Patcher*, long int, class Sound*, class ParamManagerForTimeline*)",19,0,127,0,0,0
"per_finger.h",42,"PerFinger::isRelevant(const class PerFinger*, class ModControllableAudio*, long int)",2,0,12,0,0,0
,0,"PerFinger::PerFinger(const class PerFinger*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",134,"PerFinger::readCurrentValue(const class PerFinger*)",3,0,19,0,0,0
"sound_editor.cpp",134,"PerFinger::writeCurrentValue(const class PerFinger*)",3,0,14,0,0,0
"per_finger.h",25,"PerFinger::~PerFinger(const class PerFinger*)",2,0,6,0,0,0
"menu_item.h",54,"PerFinger::~PerFinger(const class PerFinger*)",1,0,1,0,0,0
,0,"PerformanceSessionView::anyChangesToLog(const class PerformanceSessionView*) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1233,"PerformanceSessionView::backupPerformanceLayout(const class PerformanceSessionView*)",4,0,25,0,0,0
"performance_session_view.cpp",696,"PerformanceSessionView::buttonAction(const class PerformanceSessionView*, unsigned char, bool, bool)",134,0,686,0,0,0
,0,"PerformanceSessionView::calculateKnobPosForSelectEncoderTurn(const class PerformanceSessionView*, long int, long int) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",256,"PerformanceSessionView::focusRegained(const class PerformanceSessionView*)",15,0,47,0,0,0
"performance_session_view.cpp",1547,"PerformanceSessionView::getMaxLength(const class PerformanceSessionView*)",1,0,9,0,0,0
"performance_session_view.cpp",1542,"PerformanceSessionView::getMaxZoom(const class PerformanceSessionView*)",1,0,9,0,0,0
"performance_session_view.cpp",1408,"PerformanceSessionView::getParameterValue(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*, enum Kind, long int, long int, bool)",15,0,82,0,0,0
"performance_session_view.h",68,"PerformanceSessionView::getUIType(const class PerformanceSessionView*)",1,0,2,0,0,0
"performance_session_view.cpp",280,"PerformanceSessionView::graphicsRoutine(const class PerformanceSessionView*)",18,0,78,0,0,0
"performance_session_view.cpp",1528,"PerformanceSessionView::horizontalEncoderAction(const class PerformanceSessionView*, long int)",1,0,2,0,0,0
,0,"PerformanceSessionView::initFXPress(const class PerformanceSessionView*, struct FXColumnPress&) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",2007,"PerformanceSessionView::initializeHeldFX(const class PerformanceSessionView*, long int)",13,0,58,0,0,0
,0,"PerformanceSessionView::initializeHeldFX(const class PerformanceSessionView*, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::initLayout(const class PerformanceSessionView*, struct ParamsForPerformance&) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::initPadPress(const class PerformanceSessionView*, struct PadPress&) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::isPadShortcut(const class PerformanceSessionView*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::isParamAssignedToFXColumn(const class PerformanceSessionView*, enum Kind, long int) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1852,"PerformanceSessionView::loadDefaultLayout(const class PerformanceSessionView*)",7,0,51,0,0,0
,0,"PerformanceSessionView::loadPerformanceViewLayout(const class PerformanceSessionView*) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1264,"PerformanceSessionView::logPerformanceViewPress(const class PerformanceSessionView*, long int, bool)",9,0,101,0,0,0
,0,"PerformanceSessionView::logPerformanceViewPress(const class PerformanceSessionView*, long int, bool) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1608,"PerformanceSessionView::modButtonAction(const class PerformanceSessionView*, unsigned char, bool)",2,0,3,0,0,0
"performance_session_view.cpp",1552,"PerformanceSessionView::modEncoderAction(const class PerformanceSessionView*, long int, long int)",11,0,45,0,0,0
"performance_session_view.cpp",1574,"PerformanceSessionView::modEncoderButtonAction(const class PerformanceSessionView*, unsigned char, bool)",16,0,64,0,0,0
,0,"PerformanceSessionView::normalPadAction(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",246,"PerformanceSessionView::opened(const class PerformanceSessionView*)",4,0,21,0,0,0
"performance_session_view.cpp",911,"PerformanceSessionView::padAction(const class PerformanceSessionView*, long int, long int, long int)",95,0,539,0,0,0
,0,"PerformanceSessionView::padPressAction(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*, enum Kind, long int, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1133,"PerformanceSessionView::padReleaseAction(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*, enum Kind, long int, long int, bool)",12,0,94,0,0,0
,0,"PerformanceSessionView::padReleaseAction(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*, enum Kind, long int, long int, bool) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::paramEditorPadAction(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::possiblyRefreshPerformanceViewDisplay(const class PerformanceSessionView*, enum Kind, long int, long int) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",628,"PerformanceSessionView::possiblyRefreshPerformanceViewDisplay(enum Kind, long int, long int, const class PerformanceSessionView*)",11,0,36,0,0,0
,0,"PerformanceSessionView::readDefaultFXHoldStatusFromFile(const class PerformanceSessionView*, class StorageManager&, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::readDefaultFXParamAndRowValuesFromFile(const class PerformanceSessionView*, class StorageManager&, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::readDefaultFXParamFromFile(const class PerformanceSessionView*, class StorageManager&, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::readDefaultFXRowNumberValuesFromFile(const class PerformanceSessionView*, class StorageManager&, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::readDefaultFXValuesFromFile(const class PerformanceSessionView*, class StorageManager&) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::readDefaultsFromBackedUpFile(const class PerformanceSessionView*) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1815,"PerformanceSessionView::readDefaultsFromFile(const class PerformanceSessionView*, class StorageManager&)",74,0,367,0,0,0
,0,"PerformanceSessionView::redrawNumericDisplay(const class PerformanceSessionView*) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1338,"PerformanceSessionView::releaseStutter(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*)",3,0,15,0,0,0
,0,"PerformanceSessionView::releaseStutter(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1327,"PerformanceSessionView::releaseViewOnExit(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*)",4,0,11,0,0,0
"performance_session_view.cpp",518,"PerformanceSessionView::renderFXDisplay(const class PerformanceSessionView*, enum Kind, long int, long int)",27,0,172,0,0,0
"performance_session_view.cpp",333,"PerformanceSessionView::renderMainPads(const class PerformanceSessionView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",21,0,146,0,0,0
,0,"PerformanceSessionView::renderMainPads(const class PerformanceSessionView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",647,"PerformanceSessionView::renderOLED(const class PerformanceSessionView*, unsigned char[128]*)",2,0,8,0,0,0
,0,"PerformanceSessionView::renderRow(const class PerformanceSessionView*, class RGB*, long int) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",430,"PerformanceSessionView::renderSidebar(const class PerformanceSessionView*, long unsigned int, class RGB[18]*, unsigned char[18]*)",4,0,23,0,0,0
,0,"PerformanceSessionView::renderSidebar(const class PerformanceSessionView*, long unsigned int, class RGB[18]*, unsigned char[18]*) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",446,"PerformanceSessionView::renderViewDisplay(const class PerformanceSessionView*)",17,0,99,0,0,0
"performance_session_view.cpp",1313,"PerformanceSessionView::resetFXColumn(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*, long int)",5,0,26,0,0,0
,0,"PerformanceSessionView::resetPadPressInfo(const class PerformanceSessionView*) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1290,"PerformanceSessionView::resetPerformanceView(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*)",15,0,60,0,0,0
,0,"PerformanceSessionView::restorePreviousHoldPress(const class PerformanceSessionView*, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::savePerformanceViewLayout(const class PerformanceSessionView*) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",1462,"PerformanceSessionView::selectEncoderAction(const class PerformanceSessionView*, signed char)",20,0,107,0,0,0
"performance_session_view.cpp",663,"PerformanceSessionView::setCentralLEDStates(const class PerformanceSessionView*)",13,0,54,0,0,0
"performance_session_view.cpp",1353,"PerformanceSessionView::setParameterValue(const class PerformanceSessionView*, class ModelStackWithThreeMainThings*, enum Kind, long int, long int, long int, bool)",19,0,127,0,0,0
,0,"PerformanceSessionView::shouldRestorePreviousHoldPress(const class PerformanceSessionView*, long int) (always inlined)",0,0,0,0,0,0
"performance_session_view.cpp",317,"PerformanceSessionView::timerCallback(const class PerformanceSessionView*)",4,0,17,0,0,0
"performance_session_view.cpp",1614,"PerformanceSessionView::updateLayoutChangeStatus(const class PerformanceSessionView*)",14,0,67,0,0,0
"performance_session_view.cpp",1532,"PerformanceSessionView::verticalEncoderAction(const class PerformanceSessionView*, long int, bool)",3,0,12,0,0,0
,0,"PerformanceSessionView::verticalEncoderAction(const class PerformanceSessionView*, long int, bool) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::writeDefaultFXHoldStatusToFile(const class PerformanceSessionView*, class Serializer&, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::writeDefaultFXParamToFile(const class PerformanceSessionView*, class Serializer&, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::writeDefaultFXRowValuesToFile(const class PerformanceSessionView*, class Serializer&, long int) (always inlined)",0,0,0,0,0,0
,0,"PerformanceSessionView::writeDefaultFXValuesToFile(const class PerformanceSessionView*, class Serializer&) (always inlined)",0,0,0,0,0,0
,0,"performBlink() (always inlined)",0,0,0,0,0,0
"peripheral_init_basic.c",86,"Peripheral_Basic_Init()",8,8,24,24,1,24
,0,"PGM::PGM(const class PGM*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"pgm.h",24,"PGM::readCurrentValue(const class PGM*)",2,0,6,0,0,0
"pgm.h",26,"PGM::writeCurrentValue(const class PGM*)",4,0,12,0,0,0
"pgm.h",21,"PGM::~PGM(const class PGM*)",2,0,6,0,0,0
"menu_item.h",54,"PGM::~PGM(const class PGM*)",1,0,1,0,0,0
,0,"PhaseIncrementFineTuner::detune(const class PhaseIncrementFineTuner*, long int) (always inlined)",0,0,0,0,0,0
,0,"PhaseIncrementFineTuner::PhaseIncrementFineTuner(const class PhaseIncrementFineTuner*) (always inlined)",0,0,0,0,0,0
,0,"PhaseIncrementFineTuner::setNoDetune(const class PhaseIncrementFineTuner*) (always inlined)",0,0,0,0,0,0
"phase_increment_fine_tuner.cpp",26,"PhaseIncrementFineTuner::setup(const class PhaseIncrementFineTuner*, long int)",1,0,10,0,0,0
,0,"PIC::deselectOLED() (always inlined)",0,0,0,0,0,0
,0,"PIC::doneSendingRows() (always inlined)",0,0,0,0,0,0
,0,"PIC::doVerticalScroll(bool, const struct array<RGB, 18>&) (always inlined)",0,0,0,0,0,0
,0,"PIC::enableOLED() (always inlined)",0,0,0,0,0,0
,0,"PIC::flashMainPadWithColourIdx(unsigned int, long int) (always inlined)",0,0,0,0,0,0
"pic.h",206,"PIC::flush()",1,1,2,2,2,4
,0,"PIC::flush() (always inlined)",0,0,0,0,0,0
,0,"PIC::requestFirmwareVersion() (always inlined)",0,0,0,0,0,0
,0,"PIC::resendButtonStates() (always inlined)",0,0,0,0,0,0
,0,"PIC::selectOLED() (always inlined)",0,0,0,0,0,0
,0,"PIC::send(const class RGB&) (always inlined)",0,0,0,0,0,0
,0,"PIC::send<RGB, 18>(enum Message, const struct array<RGB, 18>&) (always inlined)",0,0,0,0,0,0
,0,"PIC::send<unsigned char, 4>(enum Message, const struct array<unsigned char, 4>&) (always inlined)",0,0,0,0,0,0
"pic.h",265,"PIC::send<unsigned char>(enum Message, unsigned char)",5,0,15,0,0,0
,0,"PIC::send<unsigned char>(enum Message, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PIC::sendScrollRow(unsigned int, class RGB) (always inlined)",0,0,0,0,0,0
,0,"PIC::setColourForTwoColumns(unsigned int, const struct array<RGB, 16>&) (always inlined)",0,0,0,0,0,0
,0,"PIC::setDCLow() (always inlined)",0,0,0,0,0,0
,0,"PIC::setDebounce(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PIC::setDimmerInterval(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PIC::setFlashLength(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PIC::setGoldKnobIndicator(bool, const struct array<unsigned char, 4>&) (always inlined)",0,0,0,0,0,0
,0,"PIC::setLEDOff(unsigned int) (always inlined)",0,0,0,0,0,0
,0,"PIC::setLEDOn(unsigned int) (always inlined)",0,0,0,0,0,0
,0,"PIC::setMinInterruptInterval(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PIC::setRefreshTime(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PIC::setUARTSpeed() (always inlined)",0,0,0,0,0,0
,0,"PIC::setupForPads() (always inlined)",0,0,0,0,0,0
,0,"PIC::setupHorizontalScroll(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PIC::update7SEG(const struct array<unsigned char, 4>&) (always inlined)",0,0,0,0,0,0
,0,"PIC::waitForFlush() (always inlined)",0,0,0,0,0,0
"uart.c",268,"PIC_TX_INT_TrnEnd(long unsigned int)",6,0,16,0,0,0
,0,"pick_lfn(short unsigned int*, unsigned char*) (always inlined)",0,0,0,0,0,0
,0,"PingPong::PingPong(const class PingPong*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"ping_pong.h",27,"PingPong::readCurrentValue(const class PingPong*)",2,0,6,0,0,0
"ping_pong.h",28,"PingPong::writeCurrentValue(const class PingPong*)",2,0,6,0,0,0
"ping_pong.h",24,"PingPong::~PingPong(const class PingPong*)",2,0,6,0,0,0
"menu_item.h",54,"PingPong::~PingPong(const class PingPong*)",1,0,1,0,0,0
"pitchenv.cpp",46,"PitchEnv::getsample(const class PitchEnv*, const class EnvParams&, int)",12,0,52,0,0,0
"pitchenv.cpp",22,"PitchEnv::init(double)",1,0,12,0,0,0
,0,"PitchEnv::isDown(const class PitchEnv*) (always inlined)",0,0,0,0,0,0
"pitchenv.cpp",66,"PitchEnv::keydown(const class PitchEnv*, const class EnvParams&, bool)",7,0,30,0,0,0
"pitchenv.cpp",40,"PitchEnv::set(const class PitchEnv*, const class EnvParams&)",4,0,28,0,0,0
"sample_browser.cpp",1073,"pitchGreaterOrEqual(class Sample*, class Sample*)",1,0,8,0,0,0
"pitch_speed.h",57,"PitchSpeed::getOptions(const class PitchSpeed*)",4,0,45,0,0,0
,0,"PitchSpeed::PitchSpeed(const class PitchSpeed*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"pitch_speed.h",32,"PitchSpeed::readCurrentValue(const class PitchSpeed*)",2,0,6,0,0,0
"pitch_speed.h",36,"PitchSpeed::writeCurrentValue(const class PitchSpeed*)",5,0,40,0,0,0
"pitch_speed.h",26,"PitchSpeed::~PitchSpeed(const class PitchSpeed*)",2,0,6,0,0,0
"menu_item.h",54,"PitchSpeed::~PitchSpeed(const class PitchSpeed*)",1,0,1,0,0,0
"playback_handler.cpp",722,"PlaybackHandler::actionSwungTick(const class PlaybackHandler*)",56,0,209,0,0,0
,0,"PlaybackHandler::actionTimerTick(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",593,"PlaybackHandler::actionTimerTickPart2(const class PlaybackHandler*)",47,0,192,0,0,0
"playback_handler.cpp",2911,"PlaybackHandler::aftertouchReceived(class MIDIDevice*, long int, long int, long int, bool*, const class PlaybackHandler*)",19,0,75,0,0,0
,0,"PlaybackHandler::analogClockRisingEdge(const class PlaybackHandler*, long unsigned int) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",2129,"PlaybackHandler::calculateBPM(float, const class PlaybackHandler*)",7,0,26,0,0,0
,0,"PlaybackHandler::clockMessageReceived(const class PlaybackHandler*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::continueMessageReceived(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::currentlySendingMIDIOutputClocks(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",380,"PlaybackHandler::decideOnCurrentPlaybackMode(const class PlaybackHandler*)",10,0,50,0,0,0
"playback_handler.cpp",1816,"PlaybackHandler::displaySwingAmount(const class PlaybackHandler*)",12,0,56,0,0,0
"playback_handler.cpp",2139,"PlaybackHandler::displayTempoBPM(float, const class PlaybackHandler*)",37,0,176,0,0,0
"playback_handler.cpp",2122,"PlaybackHandler::displayTempoByCalculation(const class PlaybackHandler*)",4,0,5,0,0,0
,0,"PlaybackHandler::displayTempoFromParams(const class PlaybackHandler*, long int, signed char) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",717,"PlaybackHandler::doMIDIClockOutTick(const class PlaybackHandler*)",3,0,10,0,0,0
"playback_handler.cpp",1188,"PlaybackHandler::doSongSwap(bool, const class PlaybackHandler*)",54,0,264,0,0,0
"playback_handler.cpp",663,"PlaybackHandler::doTriggerClockOutTick(const class PlaybackHandler*)",8,0,25,0,0,0
"playback_handler.cpp",468,"PlaybackHandler::endPlayback(const class PlaybackHandler*)",29,0,86,0,0,0
"playback_handler.cpp",2714,"PlaybackHandler::expectEvent(const class PlaybackHandler*)",9,0,22,0,0,0
,0,"PlaybackHandler::expectEvent(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",2346,"PlaybackHandler::finishTempolessRecording(bool, long int, bool, const class PlaybackHandler*)",51,0,242,0,0,0
"playback_handler.cpp",2259,"PlaybackHandler::forceResetPlayPos(class Song*, const class PlaybackHandler*)",7,0,22,0,0,0
,0,"PlaybackHandler::forceResetPlayPos(const class PlaybackHandler*, class Song*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",2940,"PlaybackHandler::getActualArrangementRecordPos(const class PlaybackHandler*)",3,0,8,0,0,0
"playback_handler.cpp",945,"PlaybackHandler::getActualSwungTickCount(long unsigned int*, const class PlaybackHandler*)",57,0,238,0,0,0
,0,"PlaybackHandler::getAnalogOutTicksToInternalTicksRatio(const class PlaybackHandler*, long unsigned int*, long unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::getArrangementRecordPosAtLastActionedSwungTick(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",1029,"PlaybackHandler::getCurrentInternalTickCount(long unsigned int*, const class PlaybackHandler*)",18,0,65,0,0,0
"playback_handler.cpp",1087,"PlaybackHandler::getCurrentInternalTickFloatFollowingExternalClock(const class PlaybackHandler*)",22,0,94,0,0,0
"playback_handler.cpp",2089,"PlaybackHandler::getCurrentTempoParams(long int*, signed char*, const class PlaybackHandler*)",12,0,54,0,0,0
"playback_handler.cpp",1767,"PlaybackHandler::getInternalTicksToInputTicksRatio(long unsigned int*, long unsigned int*, const class PlaybackHandler*)",10,0,29,0,0,0
"playback_handler.cpp",1156,"PlaybackHandler::getInternalTickTime(long long int, const class PlaybackHandler*)",11,0,68,0,0,0
,0,"PlaybackHandler::getMIDIClockOutTicksToInternalTicksRatio(const class PlaybackHandler*, long unsigned int*, long unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::getNumSwungTicksInSinceLastActionedSwungTick(const class PlaybackHandler*, long unsigned int*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",934,"PlaybackHandler::getNumSwungTicksInSinceLastActionedSwungTick(long unsigned int*, const class PlaybackHandler*)",7,0,16,0,0,0
,0,"PlaybackHandler::getNumSwungTicksInSinceLastTimerTick(const class PlaybackHandler*, long unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::getTimeLeftInCountIn(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.h",212,"PlaybackHandler::getTimePerInternalTick(const class PlaybackHandler*)",5,0,15,0,0,0
,0,"PlaybackHandler::getTimePerInternalTick(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::getTimePerInternalTickBig(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",551,"PlaybackHandler::getTimePerInternalTickFloat(const class PlaybackHandler*)",6,0,20,0,0,0
,0,"PlaybackHandler::getTimePerInternalTickFloat(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.h",212,"PlaybackHandler::getTimePerInternalTickInverse(bool, const class PlaybackHandler*)",7,3,15,9,4,40
"playback_handler.cpp",2274,"PlaybackHandler::grabTempoFromClip(class Clip*, const class PlaybackHandler*)",22,0,93,0,0,0
"playback_handler.cpp",1564,"PlaybackHandler::inputTick(bool, long unsigned int, const class PlaybackHandler*)",62,0,253,0,0,0
,0,"PlaybackHandler::inputTick(const class PlaybackHandler*, bool, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::isCurrentlyRecording(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::isEitherClockActive(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::isExternalClockActive(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::isInternalClockActive(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::loopCommand(const class PlaybackHandler*, enum OverDubType) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::midiCCReceived(const class PlaybackHandler*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, bool*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",2662,"PlaybackHandler::noteMessageReceived(class MIDIDevice*, bool, long int, long int, long int, bool*, const class PlaybackHandler*)",27,0,147,0,0,0
"playback_handler.cpp",2610,"PlaybackHandler::offerNoteToLearnedThings(class MIDIDevice*, bool, long int, long int, const class PlaybackHandler*)",95,0,600,0,0,0
,0,"PlaybackHandler::pitchBendReceived(const class PlaybackHandler*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, bool*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::playButtonPressed(const class PlaybackHandler*, long int) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",170,"PlaybackHandler::playButtonPressed(long int, const class PlaybackHandler*)",36,0,154,0,0,0
,0,"PlaybackHandler::positionPointerReceived(const class PlaybackHandler*, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::programChangeReceived(const class PlaybackHandler*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",232,"PlaybackHandler::recordButtonPressed(const class PlaybackHandler*)",19,0,71,0,0,0
,0,"PlaybackHandler::recordButtonPressed(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",1735,"PlaybackHandler::resetTimePerInternalTickMovingAverage(const class PlaybackHandler*)",5,0,22,0,0,0
,0,"PlaybackHandler::resetTimePerInternalTickMovingAverage(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"cv_engine.cpp",332,"PlaybackHandler::resyncAnalogOutTicksToInternalTicks(const class PlaybackHandler*)",10,0,31,0,0,0
,0,"PlaybackHandler::resyncAnalogOutTicksToInternalTicks(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",2244,"PlaybackHandler::resyncInternalTicksToInputTicks(class Song*, const class PlaybackHandler*)",7,0,23,0,0,0
,0,"PlaybackHandler::resyncInternalTicksToInputTicks(const class PlaybackHandler*, class Song*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::resyncMIDIClockOutTicksToInternalTicks(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",693,"PlaybackHandler::scheduleMIDIClockOutTick(const class PlaybackHandler*)",14,0,62,0,0,0
,0,"PlaybackHandler::scheduleMIDIClockOutTickParamsKnown(const class PlaybackHandler*, long unsigned int, long long unsigned int, long long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::scheduleNextTimerTick(const class PlaybackHandler*, long unsigned int) (always inlined)",0,0,0,0,0,0
"playback_handler.h",213,"PlaybackHandler::scheduleSwungTick(const class PlaybackHandler*)",4,0,7,0,0,0
"playback_handler.cpp",1501,"PlaybackHandler::scheduleSwungTickFromExternalClock(const class PlaybackHandler*)",26,0,105,0,0,0
"playback_handler.cpp",844,"PlaybackHandler::scheduleSwungTickFromInternalClock(const class PlaybackHandler*)",22,0,122,0,0,0
"playback_handler.cpp",1752,"PlaybackHandler::scheduleTriggerClockOutTick(const class PlaybackHandler*)",14,0,53,0,0,0
,0,"PlaybackHandler::scheduleTriggerClockOutTickParamsKnown(const class PlaybackHandler*, long unsigned int, long long unsigned int, long long unsigned int) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",2003,"PlaybackHandler::sendOutPositionViaMIDI(long int, bool, const class PlaybackHandler*)",22,0,91,0,0,0
"playback_handler.cpp",2214,"PlaybackHandler::setLedStates(const class PlaybackHandler*)",11,0,46,0,0,0
,0,"PlaybackHandler::setTempoFromAudioClipLength(const class PlaybackHandler*, long long unsigned int, class Action*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",402,"PlaybackHandler::setupPlayback(long int, long int, bool, bool, long int, const class PlaybackHandler*)",35,0,97,0,0,0
"playback_handler.cpp",1311,"PlaybackHandler::setupPlaybackUsingExternalClock(bool, bool, const class PlaybackHandler*)",29,0,108,0,0,0
"playback_handler.cpp",280,"PlaybackHandler::setupPlaybackUsingInternalClock(bool, long int, const class PlaybackHandler*)",2,0,8,0,0,0
,0,"PlaybackHandler::setupPlaybackUsingInternalClock(const class PlaybackHandler*, long int, bool) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",279,"PlaybackHandler::setupPlaybackUsingInternalClock(long int, bool, const class PlaybackHandler*)",31,0,141,0,0,0
"playback_handler.cpp",2435,"PlaybackHandler::shouldRecordNotesNow(const class PlaybackHandler*)",11,0,43,0,0,0
"playback_handler.cpp",1435,"PlaybackHandler::startIgnoringMidiClockInputIfNecessary(const class PlaybackHandler*)",7,0,34,0,0,0
,0,"PlaybackHandler::startIgnoringMidiClockInputIfNecessary(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::startMessageReceived(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::stopAnyRecording(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::stopMessageReceived(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",2742,"PlaybackHandler::switchToArrangement(const class PlaybackHandler*)",16,0,54,0,0,0
"playback_handler.cpp",2764,"PlaybackHandler::switchToSession(const class PlaybackHandler*)",17,0,40,0,0,0
,0,"PlaybackHandler::switchToSession(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::tapTempoAutoSwitchOff(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
"playback_handler.cpp",2467,"PlaybackHandler::tapTempoButtonPress(const class PlaybackHandler*)",17,0,80,0,0,0
"playback_handler.cpp",1843,"PlaybackHandler::tempoEncoderAction(signed char, bool, bool, const class PlaybackHandler*)",87,0,316,0,0,0
,0,"PlaybackHandler::timerTicksToOutputTicks(const class PlaybackHandler*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::toggleMetronomeStatus(const class PlaybackHandler*) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::tryGlobalMIDICommands(const class PlaybackHandler*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"PlaybackHandler::tryGlobalMIDICommandsOff(const class PlaybackHandler*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
"playback_mode.cpp",32,"PlaybackMode::hasPlaybackActive(const class PlaybackMode*)",1,0,14,0,0,0
,0,"PolyMonoConversion::PolyMonoConversion(const class PolyMonoConversion*, enum String, class initializer_list<MenuItem*>) (always inlined)",0,0,0,0,0,0
"MPE.h",23,"PolyMonoConversion::~PolyMonoConversion(const class PolyMonoConversion*)",7,0,28,0,0,0
"MPE.h",23,"PolyMonoConversion::~PolyMonoConversion(const class PolyMonoConversion*)",7,0,25,0,0,0
,0,"PolyMonoConversion::~PolyMonoConversion(const class PolyMonoConversion*) (always inlined)",0,0,0,0,0,0
,0,"polynomialOscillatorApproximation(long int) (always inlined)",0,0,0,0,0,0
"polyphony.h",80,"PolyphonyType::getOptions(const class PolyphonyType*)",8,0,69,0,0,0
,0,"PolyphonyType::PolyphonyType(const class PolyphonyType*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"polyphony.h",56,"PolyphonyType::readCurrentValue(const class PolyphonyType*)",2,0,6,0,0,0
"value.h",45,"PolyphonyType::selectButtonPress(const class PolyphonyType*)",1,0,8,0,0,0
"polyphony.h",58,"PolyphonyType::writeCurrentValue(const class PolyphonyType*)",7,0,26,0,0,0
"polyphony.h",53,"PolyphonyType::~PolyphonyType(const class PolyphonyType*)",2,0,6,0,0,0
"menu_item.h",54,"PolyphonyType::~PolyphonyType(const class PolyphonyType*)",1,0,1,0,0,0
,0,"popcount<short unsigned int>(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"pow",0,0,467,0,0,0
,0,"powf",0,0,241,0,0,0
"ppqn.h",25,"PPQN::getMaxValue(const class PPQN*)",1,0,2,0,0,0
,0,"PPQN::PPQN(const class PPQN*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"ppqn.h",26,"PPQN::readCurrentValue(const class PPQN*)",2,0,5,0,0,0
"ppqn.h",27,"PPQN::readCurrentValue(const class PPQN*)",2,0,5,0,0,0
"value.h",42,"PPQN::writeCurrentValue(const class PPQN*)",2,0,5,0,0,0
"value.h",42,"PPQN::writeCurrentValue(const class PPQN*)",3,0,14,0,0,0
"menu_item.h",54,"PPQN::~PPQN(const class PPQN*)",1,0,1,0,0,0
"menu_item.h",54,"PPQN::~PPQN(const class PPQN*)",1,0,1,0,0,0
"ppqn.h",23,"PPQN::~PPQN(const class PPQN*)",2,0,6,0,0,0
"ppqn.h",24,"PPQN::~PPQN(const class PPQN*)",2,0,6,0,0,0
"pad_leds.cpp",277,"prepareColour(long int, long int, class RGB)",10,0,108,0,0,0
"value.h",42,"Preset::drawInteger(const class Preset*, long int, long int, long int)",5,0,26,0,0,0
"value.h",42,"Preset::drawValue(const class Preset*)",4,0,37,0,0,0
"preset.h",58,"Preset::isRelevant(const class Preset*, class ModControllableAudio*, long int)",1,0,6,0,0,0
,0,"Preset::Preset(const class Preset*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"Preset::selectEncoderAction(const class Preset*, long int)",6,0,11,0,0,0
"preset_mode.h",63,"PresetMode::getOptions(const class PresetMode*)",4,0,63,0,0,0
,0,"PresetMode::PresetMode(const class PresetMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"preset_mode.h",34,"PresetMode::readCurrentValue(const class PresetMode*)",2,0,6,0,0,0
"preset_mode.h",75,"PresetMode::selectButtonPress(const class PresetMode*)",1,0,8,0,0,0
"preset_mode.h",36,"PresetMode::writeCurrentValue(const class PresetMode*)",23,0,97,0,0,0
"preset_mode.h",31,"PresetMode::~PresetMode(const class PresetMode*)",2,0,6,0,0,0
"menu_item.h",54,"PresetMode::~PresetMode(const class PresetMode*)",1,0,1,0,0,0
"column_controls.cpp",131,"prevControlFunction(enum ColumnControlFunction, enum ColumnControlFunction)",6,0,23,0,0,0
,0,"previewSample(class String*, struct FilePointer*, bool) (always inlined)",0,0,0,0,0,0
,0,"print(const char*) (always inlined)",0,0,0,0,0,0
,0,"println(const char*) (always inlined)",0,0,0,0,0,0
,0,"printPointers(long unsigned int, long unsigned int, long unsigned int, long unsigned int, _Bool) (always inlined)",0,0,0,0,0,0
"priority.h",30,"Priority::getOptions(const class Priority*)",4,0,51,0,0,0
,0,"Priority::Priority(const class Priority*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"priority.h",27,"Priority::readCurrentValue(const class Priority*)",2,0,6,0,0,0
"priority.h",28,"Priority::writeCurrentValue(const class Priority*)",2,0,6,0,0,0
"priority.h",24,"Priority::~Priority(const class Priority*)",2,0,6,0,0,0
"menu_item.h",54,"Priority::~Priority(const class Priority*)",1,0,1,0,0,0
"value.h",42,"PulseWidth::getFinalValue(const class PulseWidth*)",3,0,12,0,0,0
"sound.h",199,"PulseWidth::isRelevant(const class PulseWidth*, class ModControllableAudio*, long int)",3,0,17,0,0,0
,0,"PulseWidth::PulseWidth(const class PulseWidth*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"pulse_width.h",45,"PulseWidth::readCurrentValue(const class PulseWidth*)",4,0,30,0,0,0
"pulse_width.h",25,"PulseWidth::~PulseWidth(const class PulseWidth*)",4,0,20,0,0,0
"pulse_width.h",25,"PulseWidth::~PulseWidth(const class PulseWidth*)",4,0,17,0,0,0
,0,"PulseWidth::~PulseWidth(const class PulseWidth*) (always inlined)",0,0,0,0,0,0
"ff.c",1238,"put_fat(struct FATFS*, long unsigned int, long unsigned int)",27,0,98,0,0,0
,0,"put_fat(struct FATFS*, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"put_lfn(const short unsigned int*, unsigned char*, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"put_utf(long unsigned int, char*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"Quantize::Quantize(const class Quantize*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"quantize.h",27,"Quantize::readCurrentValue(const class Quantize*)",2,0,5,0,0,0
"quantize.h",26,"Quantize::size(const class Quantize*)",1,0,2,0,0,0
"value.h",42,"Quantize::writeCurrentValue(const class Quantize*)",1,0,5,0,0,0
"quantize.h",22,"Quantize::~Quantize(const class Quantize*)",2,0,6,0,0,0
"menu_item.h",54,"Quantize::~Quantize(const class Quantize*)",1,0,1,0,0,0
"fixedpoint.h",83,"quickLog(long unsigned int)",6,0,10,0,0,0
,0,"QuickSorter::getElementAddress(const class QuickSorter*, long int) (always inlined)",0,0,0,0,0,0
,0,"QuickSorter::getKey(const class QuickSorter*, long int) (always inlined)",0,0,0,0,0,0
,0,"QuickSorter::partition(const class QuickSorter*, long int, long int) (always inlined)",0,0,0,0,0,0
"quick_sorter.cpp",76,"QuickSorter::quickSort(const class QuickSorter*, long int, long int)",6,0,49,0,0,0
,0,"QuickSorter::QuickSorter(const class QuickSorter*, long int, long int, void*) (always inlined)",0,0,0,0,0,0
,0,"QuickSorter::sort(const class QuickSorter*, long int) (always inlined)",0,0,0,0,0,0
"quick_sorter.cpp",40,"QuickSorter::swap(const class QuickSorter*, long int, long int)",5,0,25,0,0,0
"qwerty_ui.cpp",149,"QwertyUI::displayText(const class QwertyUI*, bool)",16,0,134,0,0,0
"pad_leds.cpp",232,"QwertyUI::drawKeys(const class QwertyUI*)",21,0,95,0,0,0
"d_string.h",88,"QwertyUI::drawTextForOLEDEditing(const class QwertyUI*, long int, long int, long int, long int, unsigned char[128]*)",10,0,101,0,0,0
"qwerty_ui.cpp",409,"QwertyUI::horizontalEncoderAction(const class QwertyUI*, long int)",8,0,34,0,0,0
"qwerty_ui.cpp",48,"QwertyUI::opened(const class QwertyUI*)",4,0,15,0,0,0
"qwerty_ui.cpp",225,"QwertyUI::padAction(const class QwertyUI*, long int, long int, long int)",56,0,258,0,0,0
"qwerty_ui.cpp",399,"QwertyUI::processBackspace(const class QwertyUI*)",4,0,22,0,0,0
,0,"QwertyUI::processBackspace(const class QwertyUI*) (always inlined)",0,0,0,0,0,0
,0,"QwertyUI::QwertyUI(const class QwertyUI*) (always inlined)",0,0,0,0,0,0
"qwerty_ui.h",32,"QwertyUI::renderMainPads(const class QwertyUI*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",1,0,2,0,0,0
"qwerty_ui.cpp",438,"QwertyUI::timerCallback(const class QwertyUI*)",4,0,21,0,0,0
"l1_cache_init.S",50,"R_CACHE_L1Init",56,16,57,16,0,18412
,0,"R_INTC_Disable(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"R_INTC_Enable(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"R_INTC_Init() (always inlined)",0,0,0,0,0,0
,0,"R_INTC_RegistIntFunc(short unsigned int, void(long unsigned int)*) (always inlined)",0,0,0,0,0,0
,0,"R_INTC_SetMaskLevel(unsigned char) (always inlined)",0,0,0,0,0,0
"intc.c",295,"R_INTC_SetPriority(short unsigned int, unsigned char)",11,0,22,0,0,0
,0,"R_RSPI_Create(unsigned char, long unsigned int, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"rza_io_regrw.c",147,"R_RSPI_SendBasic32(long unsigned int, unsigned char)",5,0,10,0,0,0
"rza_io_regrw.c",147,"R_RSPI_SendBasic8(unsigned char, unsigned char)",5,0,10,0,0,0
,0,"R_RSPI_Start(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"R_RSPI_WaitEnd(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"R_SFLASH_Exmode_Init(long unsigned int, long unsigned int, struct st_spibsc_cfg_t*) (always inlined)",0,0,0,0,0,0
,0,"R_SFLASH_Exmode_Setting(long unsigned int, long unsigned int, struct st_spibsc_cfg_t*) (always inlined)",0,0,0,0,0,0
,0,"R_SFLASH_Set_Config(long unsigned int, struct st_spibsc_cfg_t*) (always inlined)",0,0,0,0,0,0
,0,"R_SFLASH_Spibsc_Transfer(long unsigned int, struct st_spibsc_spimd_reg_t*) (always inlined)",0,0,0,0,0,0
,0,"R_SFLASH_WaitTend(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"R_USB_Close(struct usb_ctrl*) (always inlined)",0,0,0,0,0,0
"r_usb_hmidi_api.c",122,"R_USB_HmidiClassCheck(struct usb_utr*, short unsigned int**)",15,0,52,0,0,0
,0,"R_USB_HmidiDriverStart(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"R_USB_HmidiGetPipetbl(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"R_USB_HmidiSetPipeRegistration(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_usbif_api.c",171,"R_USB_Open(struct usb_ctrl*, struct usb_cfg*)",169,0,618,0,0,0
,0,"ramTestLED(bool) (always inlined)",0,0,0,0,0,0
"functions.cpp",1398,"random(long int)",1,0,15,0,0,0
"range.cpp",32,"Range::beginSession(const class Range*, class MenuItem*)",3,0,13,0,0,0
,0,"Range::cancelEditingIfItsOn(const class Range*) (always inlined)",0,0,0,0,0,0
"range.cpp",177,"Range::drawPixelsForOled(const class Range*)",11,0,67,0,0,0
"range.h",42,"Range::drawValue(const class Range*)",1,0,3,0,0,0
"display.h",92,"Range::drawValue(const class Range*, long int, bool)",7,0,54,0,0,0
"display.h",92,"Range::drawValueForEditingRange(const class Range*, bool)",13,0,102,0,0,0
"range.cpp",35,"Range::getDestinationDescriptor(const class Range*)",1,0,10,0,0,0
"range.cpp",29,"Range::getLearningThing(const class Range*)",1,0,12,0,0,0
"range.cpp",39,"Range::getS(const class Range*)",1,0,4,0,0,0
"range.h",27,"Range::getTitle(const class Range*)",1,0,6,0,0,0
"buttons.cpp",261,"Range::horizontalEncoderAction(const class Range*, long int)",12,0,58,0,0,0
"range.h",41,"Range::mayEditRangeEdge(const class Range*, enum RangeEdit)",1,0,2,0,0,0
"range.cpp",59,"Range::patchingSourceShortcutPress(const class Range*, enum PatchSource, bool)",1,0,2,0,0,0
,0,"Range::Range(const class Range*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"range.cpp",33,"Range::selectButtonPress(const class Range*)",1,0,2,0,0,0
"range.cpp",39,"Range::shouldBlinkPatchingSourceShortcut(const class Range*, enum PatchSource, unsigned char*)",4,0,15,0,0,0
"menu_item.h",54,"Range::~Range(const class Range*)",1,0,1,0,0,0
"menu_item.h",54,"Range::~Range(const class Range*)",1,0,1,0,0,0
"range.h",21,"Range::~Range(const class Range*)",2,0,6,0,0,0
"range.h",22,"Range::~Range(const class Range*)",2,0,6,0,0,0
,0,"RatchetAmount::RatchetAmount(const class RatchetAmount*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"ratchet_amount.h",28,"RatchetAmount::readCurrentValue(const class RatchetAmount*)",2,0,10,0,0,0
"ratchet_amount.h",33,"RatchetAmount::writeCurrentValue(const class RatchetAmount*)",2,0,9,0,0,0
"ratchet_amount.h",24,"RatchetAmount::~RatchetAmount(const class RatchetAmount*)",2,0,6,0,0,0
"menu_item.h",54,"RatchetAmount::~RatchetAmount(const class RatchetAmount*)",1,0,1,0,0,0
,0,"RatchetProbability::RatchetProbability(const class RatchetProbability*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"ratchet_probability.h",28,"RatchetProbability::readCurrentValue(const class RatchetProbability*)",2,0,10,0,0,0
"ratchet_probability.h",33,"RatchetProbability::writeCurrentValue(const class RatchetProbability*)",2,0,9,0,0,0
"ratchet_probability.h",24,"RatchetProbability::~RatchetProbability(const class RatchetProbability*)",2,0,6,0,0,0
"menu_item.h",54,"RatchetProbability::~RatchetProbability(const class RatchetProbability*)",1,0,1,0,0,0
"rate.h",29,"Rate::isRelevant(const class Rate*, class ModControllableAudio*, long int)",1,0,7,0,0,0
"rate.h",26,"Rate::isRelevant(const class Rate*, class ModControllableAudio*, long int)",1,0,7,0,0,0
,0,"Rate::Rate(const class Rate*, enum String, enum String, long int, unsigned char) (always inlined)",0,0,0,0,0,0
"rate.h",28,"Rate::readCurrentValue(const class Rate*)",2,0,10,0,0,0
"value.h",42,"Rate::writeCurrentValue(const class Rate*)",2,0,13,0,0,0
"menu_item.h",54,"Rate::~Rate(const class Rate*)",1,0,1,0,0,0
"menu_item.h",54,"Rate::~Rate(const class Rate*)",1,0,1,0,0,0
"menu_item.h",54,"Rate::~Rate(const class Rate*)",1,0,1,0,0,0
"rate.h",22,"Rate::~Rate(const class Rate*)",2,0,6,0,0,0
"rate.h",22,"Rate::~Rate(const class Rate*)",2,0,6,0,0,0
"rate.h",24,"Rate::~Rate(const class Rate*)",2,0,6,0,0,0
"rms_feedback.h",123,"Ratio::getDisplayValue(const class Ratio*)",1,0,7,0,0,0
"compressor_values.h",61,"Ratio::getUnit(const class Ratio*)",1,0,3,0,0,0
,0,"Ratio::Ratio(const class Ratio*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"compressor_values.h",51,"Ratio::readCurrentValue(const class Ratio*)",2,0,9,0,0,0
"value.h",42,"Ratio::writeCurrentValue(const class Ratio*)",8,0,19,0,0,0
"menu_item.h",54,"Ratio::~Ratio(const class Ratio*)",1,0,1,0,0,0
"compressor_values.h",46,"Ratio::~Ratio(const class Ratio*)",2,0,6,0,0,0
,0,"read_bank(unsigned char*, unsigned char*, long unsigned int, long unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"read_config(unsigned char*, unsigned char*, long unsigned int, long unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
"spibsc_flash_userdef.c",336,"read_status(unsigned char*, unsigned char*, unsigned char, long unsigned int, long unsigned int)",11,0,32,0,0,0
,0,"readAHostedDeviceFromFile(class Deserializer&) (always inlined)",0,0,0,0,0,0
"deluge.cpp",235,"readButtonsAndPads()",52,4,196,23,4,108
"deluge.cpp",394,"readButtonsAndPadsOnce()",1,1,1,1,4,4
"midi_device_manager.cpp",327,"readDeviceReferenceFromFile(class Deserializer&)",19,0,142,0,0,0
"midi_device_manager.cpp",529,"readDevicesFromFile(class StorageManager&)",50,0,223,0,0,0
,0,"readDevicesFromFile(class StorageManager&) (always inlined)",0,0,0,0,0,0
"encoders.cpp",62,"readEncoders()",20,3,107,26,71,7785
"gpio.c",61,"readInput(unsigned char, unsigned char)",4,4,11,11,740,8136
,0,"readInput(unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"rza_io_regrw.c",173,"readInputsForHardwareTest(bool[16]*)",46,0,193,0,0,0
,0,"readSettings() (always inlined)",0,0,0,0,0,0
"ui.cpp",65,"reassessGreyout(bool)",19,0,105,0,0,0
"ui.cpp",280,"recordTransitionBegin(long unsigned int)",2,0,19,0,0,0
,0,"recordTransitionBegin(long unsigned int) (always inlined)",0,0,0,0,0,0
"midi_device_manager.cpp",208,"recountSmallestMPEZones()",6,0,49,0,0,0
"midi_device_manager.cpp",190,"recountSmallestMPEZonesForDevice(class MIDIDevice*)",9,0,16,0,0,0
,0,"recountSmallestMPEZonesForDevice(class MIDIDevice*) (always inlined)",0,0,0,0,0,0
,0,"registerSideChainHit(long int) (always inlined)",0,0,0,0,0,0
"deluge.cpp",572,"registerTasks()",15,0,107,0,0,0
"regular.cpp",38,"Regular::beginSession(const class Regular*, class MenuItem*)",4,0,11,0,0,0
"regular.cpp",58,"Regular::checkPermissionToBeginSession(const class Regular*, class ModControllableAudio*, long int, class MultiRange**)",6,0,35,0,0,0
"regular.cpp",48,"Regular::getDestinationDescriptor(const class Regular*)",1,0,5,0,0,0
,0,"Regular::getLearningThing(const class Regular*) (always inlined)",0,0,0,0,0,0
"regular.cpp",52,"Regular::getS(const class Regular*)",1,0,4,0,0,0
,0,"Regular::getS(const class Regular*) (always inlined)",0,0,0,0,0,0
"regular.h",29,"Regular::getTitle(const class Regular*)",1,0,6,0,0,0
"regular.cpp",49,"Regular::patchingSourceShortcutPress(const class Regular*, enum PatchSource, bool)",2,0,4,0,0,0
"regular.cpp",95,"Regular::patchingSourceShortcutPress(const class Regular*, enum PatchSource, bool)",3,0,8,0,0,0
,0,"Regular::Regular(const class Regular*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"buttons.cpp",261,"Regular::selectButtonPress(const class Regular*)",2,0,9,0,0,0
"regular.cpp",33,"Regular::selectButtonPress(const class Regular*)",1,0,2,0,0,0
"regular.cpp",52,"Regular::shouldBlinkPatchingSourceShortcut(const class Regular*, enum PatchSource, unsigned char*)",6,0,41,0,0,0
,0,"Regular::shouldBlinkPatchingSourceShortcut(const class Regular*, enum PatchSource, unsigned char*) (always inlined)",0,0,0,0,0,0
"menu_item.h",54,"Regular::~Regular(const class Regular*)",1,0,1,0,0,0
"menu_item.h",54,"Regular::~Regular(const class Regular*)",1,0,1,0,0,0
"regular.h",22,"Regular::~Regular(const class Regular*)",2,0,6,0,0,0
"regular.h",23,"Regular::~Regular(const class Regular*)",2,0,6,0,0,0
"value.h",42,"RelativeToSong::getNoteLengthName(const class RelativeToSong*, class StringBuf&)",1,0,9,0,0,0
,0,"RelativeToSong::RelativeToSong(const class RelativeToSong*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"rms_feedback.h",93,"Release::getDisplayValue(const class Release*)",1,0,7,0,0,0
"release.h",28,"Release::readCurrentValue(const class Release*)",3,0,29,0,0,0
"compressor_values.h",33,"Release::readCurrentValue(const class Release*)",2,0,9,0,0,0
,0,"Release::Release(const class Release*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"Release::writeCurrentValue(const class Release*)",2,0,17,0,0,0
"value.h",42,"Release::writeCurrentValue(const class Release*)",7,0,26,0,0,0
"release.h",24,"Release::~Release(const class Release*)",2,0,6,0,0,0
"menu_item.h",54,"Release::~Release(const class Release*)",1,0,1,0,0,0
"menu_item.h",54,"Release::~Release(const class Release*)",1,0,1,0,0,0
"compressor_values.h",28,"Release::~Release(const class Release*)",2,0,6,0,0,0
,0,"relocateSDRAMSection(long unsigned int*, long unsigned int*) (always inlined)",0,0,0,0,0,0
"ff.c",1425,"remove_chain(struct FFOBJID*, long unsigned int, long unsigned int)",10,0,50,0,0,0
"rename_drum_ui.cpp",65,"RenameDrumUI::buttonAction(const class RenameDrumUI*, unsigned char, bool, bool)",8,0,31,0,0,0
"rename_drum_ui.cpp",98,"RenameDrumUI::enterKeyPress(const class RenameDrumUI*)",11,0,68,0,0,0
"d_string.h",94,"RenameDrumUI::enterKeyPress(const class RenameDrumUI*)",1,0,6,0,0,0
"rename_drum_ui.cpp",110,"RenameDrumUI::exitUI(const class RenameDrumUI*)",2,0,12,0,0,0
,0,"RenameDrumUI::getDrum(const class RenameDrumUI*) (always inlined)",0,0,0,0,0,0
"rename_drum_ui.cpp",53,"RenameDrumUI::getGreyoutColsAndRows(const class RenameDrumUI*, long unsigned int*, long unsigned int*)",2,0,4,0,0,0
"rename_drum_ui.h",35,"RenameDrumUI::getUIType(const class RenameDrumUI*)",1,0,2,0,0,0
"rename_drum_ui.cpp",38,"RenameDrumUI::opened(const class RenameDrumUI*)",6,0,19,0,0,0
"rename_drum_ui.cpp",117,"RenameDrumUI::padAction(const class RenameDrumUI*, long int, long int, long int)",7,0,23,0,0,0
"buttons.cpp",261,"RenameDrumUI::verticalEncoderAction(const class RenameDrumUI*, long int, bool)",2,0,19,0,0,0
"rename_output_ui.cpp",66,"RenameOutputUI::buttonAction(const class RenameOutputUI*, unsigned char, bool, bool)",8,0,31,0,0,0
"rename_output_ui.cpp",99,"RenameOutputUI::enterKeyPress(const class RenameOutputUI*)",9,0,52,0,0,0
"d_string.h",94,"RenameOutputUI::enterKeyPress(const class RenameOutputUI*)",1,0,6,0,0,0
,0,"RenameOutputUI::enterKeyPress(const class RenameOutputUI*) (always inlined)",0,0,0,0,0,0
"rename_output_ui.cpp",111,"RenameOutputUI::exitUI(const class RenameOutputUI*)",2,0,12,0,0,0
"rename_output_ui.h",37,"RenameOutputUI::getUIType(const class RenameOutputUI*)",1,0,2,0,0,0
"display.h",92,"RenameOutputUI::opened(const class RenameOutputUI*)",10,0,32,0,0,0
"rename_output_ui.cpp",118,"RenameOutputUI::padAction(const class RenameOutputUI*, long int, long int, long int)",5,0,18,0,0,0
"buttons.cpp",261,"RenameOutputUI::verticalEncoderAction(const class RenameOutputUI*, long int, bool)",2,0,19,0,0,0
"display.h",92,"RenameUI::displayText(const class RenameUI*, bool)",3,0,7,0,0,0
"rename_ui.cpp",47,"RenameUI::renderOLED(const class RenameUI*, unsigned char[128]*)",5,0,39,0,0,0
,0,"renderAlgorithm(unsigned char*) (always inlined)",0,0,0,0,0,0
,0,"renderAudioClipCollapseAnimation(long int) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",1394,"renderAudioClipExpandOrCollapse()",26,0,192,0,0,0
"pad_leds.cpp",495,"renderAudioClipExplodeAnimation(long int, bool)",15,0,168,0,0,0
"pad_leds.cpp",1394,"renderClipExpandOrCollapse()",23,0,91,0,0,0
,0,"renderCrudeSawWaveWithAmplitude(long int*, long int*, long unsigned int, long unsigned int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"renderCrudeSawWaveWithoutAmplitude(long int*, long int*, long unsigned int, long unsigned int, long int) (always inlined)",0,0,0,0,0,0
,0,"renderEnvelope(unsigned char*, int, int) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",552,"renderExplodeAnimation(long int, bool)",25,0,293,0,0,0
"pad_leds.cpp",1372,"renderFade(long int)",7,0,45,0,0,0
"ui.cpp",284,"renderingNeededRegardlessOfUI(long unsigned int, long unsigned int)",1,0,9,0,0,0
"pad_leds.cpp",309,"renderInstrumentClipCollapseAnimation(long int, long int, long int)",64,0,501,0,0,0
,0,"renderLFO(unsigned char*, int) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",1394,"renderNoteRowExpandOrCollapse()",8,0,43,0,0,0
,0,"renderNoteRowExpandOrCollapse() (always inlined)",0,0,0,0,0,0
,0,"renderPulseWave(const short int* restrict, long int, long int, long int* restrict, long int*, long unsigned int, long unsigned int, bool, long unsigned int, long int) (always inlined)",0,0,0,0,0,0
,0,"renderScaling(unsigned char*, int, int) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",1285,"renderScroll()",21,0,208,0,0,0
,0,"renderScroll() (always inlined)",0,0,0,0,0,0
,0,"renderSensParams(unsigned char*, int, int) (always inlined)",0,0,0,0,0,0
,0,"renderTuning(unsigned char*, int, int) (always inlined)",0,0,0,0,0,0
"ui.cpp",261,"renderUIsForOled()",7,0,38,0,0,0
,0,"renderWave(const short int* restrict, long int, long int, long int* restrict, long int*, long unsigned int, long unsigned int, bool, long unsigned int, long int) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",1394,"renderZoom()",16,0,262,0,0,0
"pad_leds.cpp",1248,"renderZoomedSquare(long int, long int, long unsigned int, long unsigned int, long unsigned int*, unsigned char*, bool*, long int)",14,0,49,0,0,0
,0,"renderZoomWithProgress(long int, long unsigned int, unsigned char* restrict, unsigned char* restrict, long int, long int, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"repeat.h",86,"Repeat::getOptions(const class Repeat*)",4,0,56,0,0,0
"repeat.h",37,"Repeat::readCurrentValue(const class Repeat*)",2,0,6,0,0,0
,0,"Repeat::Repeat(const class Repeat*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"repeat.h",39,"Repeat::writeCurrentValue(const class Repeat*)",21,0,75,0,0,0
"repeat.h",30,"Repeat::~Repeat(const class Repeat*)",4,0,17,0,0,0
"repeat.h",30,"Repeat::~Repeat(const class Repeat*)",4,0,14,0,0,0
,0,"Repeat::~Repeat(const class Repeat*) (always inlined)",0,0,0,0,0,0
,0,"replace_char(const char*, char, char) (always inlined)",0,0,0,0,0,0
,0,"request7SegDisplay(class MIDIDevice*, unsigned char*, long int) (always inlined)",0,0,0,0,0,0
,0,"requestOLEDDisplay(class MIDIDevice*, unsigned char*, long int) (always inlined)",0,0,0,0,0,0
,0,"resetAutomationSettings() (always inlined)",0,0,0,0,0,0
,0,"resetMidiFollowSettings() (always inlined)",0,0,0,0,0,0
"resetprg.c",105,"resetprg()",253,0,2639,111,0,4136339
"cv_engine.cpp",202,"resetSettings()",26,0,200,0,0,0
"resizeable_array.cpp",637,"ResizeableArray::attemptMemoryExpansion(const class ResizeableArray*, long int, long int, bool, void*)",29,0,126,0,0,0
,0,"ResizeableArray::attemptMemoryShorten(const class ResizeableArray*) (always inlined)",0,0,0,0,0,0
"resizeable_array.cpp",113,"ResizeableArray::beenCloned(const class ResizeableArray*)",4,0,13,0,0,0
"resizeable_array.cpp",128,"ResizeableArray::cloneFrom(const class ResizeableArray*, const class ResizeableArray*)",5,0,16,0,0,0
"resizeable_array.cpp",142,"ResizeableArray::copyElementsFromOldMemory(const class ResizeableArray*, void* restrict, long int, long int)",18,0,69,0,0,0
"resizeable_array.cpp",718,"ResizeableArray::copyToNewMemory(const class ResizeableArray*, void* restrict, long unsigned int, void* restrict, long unsigned int, long unsigned int, long unsigned int)",7,0,37,0,0,0
"resizeable_array.cpp",238,"ResizeableArray::deleteAtIndex(const class ResizeableArray*, long int, long int, bool)",69,0,313,0,0,0
"resizeable_array.cpp",92,"ResizeableArray::empty(const class ResizeableArray*)",10,0,21,0,0,0
"resizeable_array.cpp",467,"ResizeableArray::ensureEnoughSpaceAllocated(const class ResizeableArray*, long int)",57,0,339,0,0,0
"resizeable_array.cpp",40,"ResizeableArray::exitLock(const class ResizeableArray*)",3,0,17,0,0,0
"resizeable_array.cpp",34,"ResizeableArray::freezeOnLock(const class ResizeableArray*)",3,0,18,0,0,0
,0,"ResizeableArray::getNumElements(const class ResizeableArray*) (always inlined)",0,0,0,0,0,0
"resizeable_array.cpp",79,"ResizeableArray::init(const class ResizeableArray*)",6,0,13,0,0,0
"resizeable_array.cpp",899,"ResizeableArray::insertAtIndex(const class ResizeableArray*, long int, long int, void*)",75,0,398,0,0,0
"resizeable_array.cpp",758,"ResizeableArray::moveElementsLeft(const class ResizeableArray*, long int, long int, long int)",16,0,72,0,0,0
,0,"ResizeableArray::moveElementsLeftNoWrap(const class ResizeableArray*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"resizeable_array.cpp",825,"ResizeableArray::moveElementsRight(const class ResizeableArray*, long int, long int, long int)",16,0,76,0,0,0
,0,"ResizeableArray::moveElementsRightNoWrap(const class ResizeableArray*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"resizeable_array.cpp",1192,"ResizeableArray::repositionElement(const class ResizeableArray*, long int, long int)",10,0,46,0,0,0
,0,"ResizeableArray::ResizeableArray(const class ResizeableArray*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"ResizeableArray::setMemory(const class ResizeableArray*, void*, long int) (always inlined)",0,0,0,0,0,0
,0,"ResizeableArray::setStaticMemory(const class ResizeableArray*, void*, long int) (always inlined)",0,0,0,0,0,0
"resizeable_array.cpp",1180,"ResizeableArray::swapElements(const class ResizeableArray*, long int, long int)",7,0,46,0,0,0
"resizeable_array.cpp",186,"ResizeableArray::swapStateWith(const class ResizeableArray*, class ResizeableArray*)",10,0,25,0,0,0
"resizeable_array.cpp",67,"ResizeableArray::~ResizeableArray(const class ResizeableArray*)",4,0,11,0,0,0
"resizeable_array.h",50,"ResizeablePointerArray::getPointerAtIndex(const class ResizeablePointerArray*, long int)",4,0,10,0,0,0
"resizeable_pointer_array.cpp",25,"ResizeablePointerArray::insertPointerAtIndex(const class ResizeablePointerArray*, void*, long int)",7,0,20,0,0,0
,0,"ResizeablePointerArray::insertPointerAtIndex(const class ResizeablePointerArray*, void*, long int) (always inlined)",0,0,0,0,0,0
,0,"ResizeablePointerArray::ResizeablePointerArray(const class ResizeablePointerArray*) (always inlined)",0,0,0,0,0,0
,0,"ResizeablePointerArray::setPointerAtIndex(const class ResizeablePointerArray*, void*, long int) (always inlined)",0,0,0,0,0,0
,0,"ResizeablePointerArray::~ResizeablePointerArray(const class ResizeablePointerArray*) (always inlined)",0,0,0,0,0,0
,0,"restore_non_core_regs",0,0,34,0,0,0
"value.h",42,"RetriggerPhase::drawPixelsForOled(const class RetriggerPhase*)",3,0,17,0,0,0
"value.h",42,"RetriggerPhase::drawValue(const class RetriggerPhase*)",4,0,29,0,0,0
"retrigger_phase.h",34,"RetriggerPhase::getMaxValue(const class RetriggerPhase*)",1,0,2,0,0,0
"retrigger_phase.h",33,"RetriggerPhase::getMinValue(const class RetriggerPhase*)",1,0,5,0,0,0
,0,"RetriggerPhase::getValueAddress(const class RetriggerPhase*) (always inlined)",0,0,0,0,0,0
"value.h",42,"RetriggerPhase::horizontalEncoderAction(const class RetriggerPhase*, long int)",2,0,5,0,0,0
"retrigger_phase.h",86,"RetriggerPhase::isRelevant(const class RetriggerPhase*, class ModControllableAudio*, long int)",4,0,19,0,0,0
"retrigger_phase.h",39,"RetriggerPhase::readCurrentValue(const class RetriggerPhase*)",8,0,25,0,0,0
,0,"RetriggerPhase::RetriggerPhase(const class RetriggerPhase*, enum String, enum String, bool) (always inlined)",0,0,0,0,0,0
"value.h",42,"RetriggerPhase::writeCurrentValue(const class RetriggerPhase*)",5,0,21,0,0,0
"retrigger_phase.h",26,"RetriggerPhase::~RetriggerPhase(const class RetriggerPhase*)",4,0,17,0,0,0
"retrigger_phase.h",26,"RetriggerPhase::~RetriggerPhase(const class RetriggerPhase*)",4,0,14,0,0,0
,0,"RetriggerPhase::~RetriggerPhase(const class RetriggerPhase*) (always inlined)",0,0,0,0,0,0
"reverb.hpp",71,"Reverb::getDamping(const class Reverb*)",1,0,5,0,0,0
,0,"Reverb::getDamping(const class Reverb*) (always inlined)",0,0,0,0,0,0
"reverb.hpp",84,"Reverb::getHPF(const class Reverb*)",1,0,5,0,0,0
,0,"Reverb::getHPF(const class Reverb*) (always inlined)",0,0,0,0,0,0
,0,"Reverb::getModel(const class Reverb*) (always inlined)",0,0,0,0,0,0
"reverb.hpp",64,"Reverb::getRoomSize(const class Reverb*)",1,0,5,0,0,0
,0,"Reverb::getRoomSize(const class Reverb*) (always inlined)",0,0,0,0,0,0
"reverb.hpp",78,"Reverb::getWidth(const class Reverb*)",1,0,5,0,0,0
,0,"Reverb::getWidth(const class Reverb*) (always inlined)",0,0,0,0,0,0
"reverb.hpp",45,"Reverb::process(const class Reverb*, class span<long int, 4294967295>, class span<StereoSample, 4294967295>)",5,0,32,0,0,0
,0,"Reverb::reverb_as<deluge::dsp::reverb::Freeverb>(const class Reverb*) (always inlined)",0,0,0,0,0,0
,0,"Reverb::reverb_as<deluge::dsp::reverb::Mutable>(const class Reverb*) (always inlined)",0,0,0,0,0,0
"reverb.hpp",67,"Reverb::setDamping(const class Reverb*, float)",2,0,6,0,0,0
"reverb.hpp",81,"Reverb::setHPF(const class Reverb*, float)",2,0,6,0,0,0
,0,"Reverb::setHPF(const class Reverb*, float) (always inlined)",0,0,0,0,0,0
,0,"Reverb::setModel(const class Reverb*, enum Model) (always inlined)",0,0,0,0,0,0
"reverb.hpp",25,"Reverb::setModel(enum Model, const class Reverb*)",30,0,175,0,0,0
"reverb.hpp",60,"Reverb::setRoomSize(const class Reverb*, float)",2,0,6,0,0,0
"reverb.hpp",74,"Reverb::setWidth(const class Reverb*, float)",2,0,6,0,0,0
"reverb.hpp",23,"Reverb::~Reverb(const class Reverb*)",5,0,30,0,0,0
"reverb.hpp",23,"Reverb::~Reverb(const class Reverb*)",5,0,26,0,0,0
,0,"Reverb::~Reverb(const class Reverb*) (always inlined)",0,0,0,0,0,0
"sound.h",199,"Reverse::isRelevant(const class Reverse*, class ModControllableAudio*, long int)",1,0,11,0,0,0
"reverse.h",34,"Reverse::readCurrentValue(const class Reverse*)",2,0,6,0,0,0
"reverse.h",32,"Reverse::readCurrentValue(const class Reverse*)",2,0,6,0,0,0
,0,"Reverse::Reverse(const class Reverse*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"reverse.h",39,"Reverse::writeCurrentValue(const class Reverse*)",8,0,41,0,0,0
"reverse.h",34,"Reverse::writeCurrentValue(const class Reverse*)",16,0,61,0,0,0
"menu_item.h",54,"Reverse::~Reverse(const class Reverse*)",1,0,1,0,0,0
"reverse.h",26,"Reverse::~Reverse(const class Reverse*)",4,0,17,0,0,0
"reverse.h",26,"Reverse::~Reverse(const class Reverse*)",4,0,14,0,0,0
"reverse.h",28,"Reverse::~Reverse(const class Reverse*)",2,0,6,0,0,0
,0,"Reverse::~Reverse(const class Reverse*) (always inlined)",0,0,0,0,0,0
,0,"reverse<std::basic_string_view<char>*>(class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"RGB::adjust(const class RGB*, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"RGB::average(class RGB, class RGB) (always inlined)",0,0,0,0,0,0
,0,"RGB::blend(class RGB, class RGB, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"RGB::blend2(class RGB, class RGB, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"RGB::blendChannel(long unsigned int, long unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"RGB::blendChannel2(long unsigned int, long unsigned int, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"RGB::dim(const class RGB*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"RGB::dull(const class RGB*) (always inlined)",0,0,0,0,0,0
,0,"RGB::forBlur(const class RGB*) (always inlined)",0,0,0,0,0,0
,0,"RGB::forTail(const class RGB*) (always inlined)",0,0,0,0,0,0
"rgb.cpp",5,"RGB::fromHue(long int)",10,0,69,0,0,0
"rgb.cpp",37,"RGB::fromHuePastel(long int)",10,0,78,0,0,0
,0,"RGB::greyOut(const class RGB*, long int) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform2<PadLEDs::renderFade(int32_t)::<lambda(auto:62, auto:63)> >(class RGB, class RGB, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform2<RGB::average(RGB, RGB)::<lambda(RGB::channel_type, RGB::channel_type)> >(class RGB, class RGB, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform2<RGB::blend(RGB, RGB, uint16_t)::<lambda(RGB::channel_type, RGB::channel_type)> >(class RGB, class RGB, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform2<RGB::blend2(RGB, RGB, uint16_t, uint16_t)::<lambda(RGB::channel_type, RGB::channel_type)> >(class RGB, class RGB, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<deluge::gui::ui::keyboard::layout::KeyboardLayoutVelocityDrums::renderPads(RGB (*)[18])::<lambda(uint8_t)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<InstrumentClipView::drawAuditionSquare(uint8_t, RGB*)::<lambda(RGB::channel_type)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<RGB::adjust(uint8_t, uint8_t) const::<lambda(RGB::channel_type)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<RGB::dim(uint8_t) const::<lambda(RGB::channel_type)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<RGB::dull() const::<lambda(RGB::channel_type)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<RGB::forBlur() const::<lambda(RGB::channel_type)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<RGB::forTail() const::<lambda(RGB::channel_type)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<RGB::greyOut(int32_t)::<lambda(RGB::channel_type)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<SampleMarkerEditor::renderMarkerInCol(int32_t, RGB (*)[18], MarkerType, int32_t, int32_t, bool)::<lambda(uint8_t)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<SessionView::gridRenderClipColor(Clip*)::<lambda(auto:62)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
,0,"RGB::transform<WaveformRenderer::renderAsSingleRow(Sample*, int64_t, uint64_t, RGB*, WaveformRenderData*, SampleRecorder*, RGB, bool, int32_t, int32_t)::<lambda(auto:19)> >(const class RGB*, struct) (always inlined)",0,0,0,0,0,0
"value.h",42,"Rhythm::drawInteger(const class Rhythm*, long int, long int, long int)",3,0,27,0,0,0
"array",208,"Rhythm::drawInteger(const class Rhythm*, long int, long int, long int)",1,0,17,0,0,0
"rhythm.h",33,"Rhythm::drawValue(const class Rhythm*)",2,0,18,0,0,0
"rhythm.h",44,"Rhythm::drawValue(const class Rhythm*)",2,0,18,0,0,0
"rhythm.h",32,"Rhythm::readCurrentValue(const class Rhythm*)",2,0,10,0,0,0
,0,"Rhythm::Rhythm(const class Rhythm*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"rhythm.h",37,"Rhythm::writeCurrentValue(const class Rhythm*)",2,0,9,0,0,0
"menu_item.h",54,"Rhythm::~Rhythm(const class Rhythm*)",1,0,1,0,0,0
"menu_item.h",54,"Rhythm::~Rhythm(const class Rhythm*)",1,0,1,0,0,0
"rhythm.h",26,"Rhythm::~Rhythm(const class Rhythm*)",2,0,6,0,0,0
"rhythm.h",28,"Rhythm::~Rhythm(const class Rhythm*)",2,0,6,0,0,0
"rms_feedback.cpp",133,"RMSFeedbackCompressor::calcRMS(const class RMSFeedbackCompressor*, struct StereoSample*, short unsigned int)",14,10,60,53,115,73850
,0,"RMSFeedbackCompressor::getAttack(const class RMSFeedbackCompressor*) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::getAttackMS(const class RMSFeedbackCompressor*) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::getRatio(const class RMSFeedbackCompressor*) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::getRatioForDisplay(const class RMSFeedbackCompressor*) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::getRelease(const class RMSFeedbackCompressor*) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::getReleaseMS(const class RMSFeedbackCompressor*) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::getSidechain(const class RMSFeedbackCompressor*) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::getSidechainForDisplay(const class RMSFeedbackCompressor*) (always inlined)",0,0,0,0,0,0
"rms_feedback.cpp",59,"RMSFeedbackCompressor::render(const class RMSFeedbackCompressor*, struct StereoSample*, short unsigned int, long int, long int, long int)",23,21,217,205,18,205548
"rms_feedback.cpp",54,"RMSFeedbackCompressor::renderVolNeutral(const class RMSFeedbackCompressor*, struct StereoSample*, short unsigned int, long int)",1,0,9,0,0,0
"rms_feedback.cpp",21,"RMSFeedbackCompressor::RMSFeedbackCompressor(const class RMSFeedbackCompressor*)",7,0,38,0,0,0
,0,"RMSFeedbackCompressor::runEnvelope(const class RMSFeedbackCompressor*, float, float, float) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::setAttack(const class RMSFeedbackCompressor*, long int) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::setBaseGain(const class RMSFeedbackCompressor*, float) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::setRatio(const class RMSFeedbackCompressor*, long int) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::setRelease(const class RMSFeedbackCompressor*, long int) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::setSidechain(const class RMSFeedbackCompressor*, long int) (always inlined)",0,0,0,0,0,0
,0,"RMSFeedbackCompressor::setThreshold(const class RMSFeedbackCompressor*, long int) (always inlined)",0,0,0,0,0,0
"rms_feedback.cpp",39,"RMSFeedbackCompressor::updateER(const class RMSFeedbackCompressor*, float, long int)",6,5,34,33,18,918
"room_size.h",32,"RoomSize::getName(const class RoomSize*)",3,0,11,0,0,0
"room_size.h",41,"RoomSize::getTitle(const class RoomSize*)",3,0,11,0,0,0
"room_size.h",28,"RoomSize::readCurrentValue(const class RoomSize*)",4,0,14,0,0,0
,0,"RoomSize::RoomSize(const class RoomSize*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"RoomSize::writeCurrentValue(const class RoomSize*)",3,0,10,0,0,0
"room_size.h",25,"RoomSize::~RoomSize(const class RoomSize*)",2,0,6,0,0,0
"menu_item.h",54,"RoomSize::~RoomSize(const class RoomSize*)",1,0,1,0,0,0
"root_ui.cpp",26,"RootUI::getAffectEntire(const class RootUI*)",1,0,5,0,0,0
"root_ui.h",34,"RootUI::getGreyedOutRowsNotRepresentingOutput(const class RootUI*, class Output*)",1,0,2,0,0,0
"root_ui.h",42,"RootUI::getUIType(const class RootUI*)",1,0,2,0,0,0
"root_ui.h",35,"RootUI::noteRowChanged(const class RootUI*, class InstrumentClip*, class NoteRow*)",1,0,1,0,0,0
,0,"RootUI::RootUI(const class RootUI*) (always inlined)",0,0,0,0,0,0
"root_ui.h",32,"RootUI::supportsTriplets(const class RootUI*)",1,0,2,0,0,0
"ui.cpp",138,"rootUIIsClipMinderScreen()",3,0,16,0,0,0
,0,"round",0,0,55,0,0,0
,0,"round(float) (always inlined)",0,0,0,0,0,0
,0,"round<long long unsigned int>(long long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"roundf",0,0,29,0,0,0
"audio_engine.cpp",945,"routine()",225,55,1538,553,175,66035
"audio_engine.cpp",939,"routine()",1,0,6,4,180,717
,0,"routine() (always inlined)",0,0,0,0,0,0
,0,"routine_() (always inlined)",0,0,0,0,0,0
"deluge.cpp",967,"routineForSD()",13,0,32,0,0,0
,0,"routineForSD() (always inlined)",0,0,0,0,0,0
"audio_engine.cpp",372,"routineWithClusterLoading(bool)",6,0,16,0,0,0
,0,"routineWithClusterLoading(bool) (always inlined)",0,0,0,0,0,0
,0,"rshift_round(long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"rshift_round_signed(long int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"RuntimeFeatureSettings::getStartupSong(const class RuntimeFeatureSettings*) (always inlined)",0,0,0,0,0,0
,0,"RuntimeFeatureSettings::readSettingsFromFile(const class RuntimeFeatureSettings*, class StorageManager&) (always inlined)",0,0,0,0,0,0
,0,"RuntimeFeatureSettings::set(const class RuntimeFeatureSettings*, enum RuntimeFeatureSettingType, long unsigned int) (always inlined)",0,0,0,0,0,0
"runtime_feature_settings.cpp",238,"RuntimeFeatureSettings::writeSettingsToFile(class StorageManager&, const class RuntimeFeatureSettings*)",35,0,154,0,0,0
,0,"RuntimeFeatureSettings::writeSettingsToFile(const class RuntimeFeatureSettings*, class StorageManager&) (always inlined)",0,0,0,0,0,0
,0,"RZA_IO_RegRead_16(volatile short unsigned int*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"RZA_IO_RegRead_32(volatile long unsigned int*, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"RZA_IO_RegRead_8(volatile unsigned char*, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"RZA_IO_RegWrite_16(volatile short unsigned int*, short unsigned int, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"RZA_IO_RegWrite_32(volatile long unsigned int*, long unsigned int, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"Sample::convertDataOnAnyClustersIfNecessary(const class Sample*) (always inlined)",0,0,0,0,0,0
,0,"Sample::convertOneData(const class Sample*, long int*) (always inlined)",0,0,0,0,0,0
,0,"Sample::deletePercCache(const class Sample*, bool) (always inlined)",0,0,0,0,0,0
,0,"Sample::determinePitch(const class Sample*, bool, float, float, bool) (always inlined)",0,0,0,0,0,0
,0,"Sample::fillPercCache(const class Sample*, class TimeStretcher*, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"sample.cpp",1726,"Sample::finalizeAfterLoad(const class Sample*, long unsigned int)",15,0,111,0,0,0
"sample.cpp",734,"Sample::getAveragesForCrossfade(const class Sample*, long int*, long int, long int, long int, long int)",37,0,241,0,0,0
"sample.cpp",1013,"Sample::getFirstClusterIndexWithAudioData(const class Sample*)",1,0,6,0,0,0
,0,"Sample::getFirstClusterIndexWithAudioData(const class Sample*) (always inlined)",0,0,0,0,0,0
"sample.cpp",1017,"Sample::getFirstClusterIndexWithNoAudioData(const class Sample*)",2,0,24,0,0,0
,0,"Sample::getFirstClusterIndexWithNoAudioData(const class Sample*) (always inlined)",0,0,0,0,0,0
,0,"Sample::getFoundValueCentrePoint(const class Sample*) (always inlined)",0,0,0,0,0,0
"sample.cpp",1060,"Sample::getLengthInMSec(const class Sample*)",1,0,22,0,0,0
"sample.cpp",1716,"Sample::getMaxPeakFromZero(const class Sample*)",5,0,11,0,0,0
,0,"Sample::getOrCreateCache(const class Sample*, class SampleHolder*, long int, long int, bool, bool, bool*) (always inlined)",0,0,0,0,0,0
,0,"Sample::getValueSpan(const class Sample*) (always inlined)",0,0,0,0,0,0
,0,"Sample::initialize(const class Sample*, long int) (always inlined)",0,0,0,0,0,0
,0,"Sample::investigateFundamentalPitch(const class Sample*, long int, long int, long int*, long long unsigned int*, float*, float*, long int, bool) (always inlined)",0,0,0,0,0,0
"sample.cpp",158,"Sample::markAsUnloadable(const class Sample*)",6,0,23,0,0,0
"resizeable_array.h",56,"Sample::numReasonsDecreasedToZero(const class Sample*, const char*)",22,0,155,0,0,0
,0,"Sample::percCacheClusterStolen(const class Sample*, class Cluster*) (always inlined)",0,0,0,0,0,0
"sample.cpp",842,"Sample::prepareToReadPercCache(const class Sample*, long int, long int, long int*, long int*)",26,0,126,0,0,0
"sample.cpp",63,"Sample::Sample(const class Sample*)",28,0,63,0,0,0
,0,"Sample::workOutBitMask(const class Sample*) (always inlined)",0,0,0,0,0,0
"sample.cpp",1026,"Sample::workOutMIDINote(const class Sample*, bool, float, float, bool)",17,0,938,0,0,0
"sample.cpp",101,"Sample::~Sample(const class Sample*)",2,0,8,0,0,0
"sample.cpp",101,"Sample::~Sample(const class Sample*)",13,0,108,0,0,0
"sample_browser.cpp",1050,"SampleBrowser::audioFileIsNowSet(const class SampleBrowser*)",15,0,39,0,0,0
"sample_browser.cpp",1042,"SampleBrowser::autoDetectSideChainSending(class SoundDrum*, const char*, class Source*, const class SampleBrowser*)",2,0,18,0,0,0
,0,"SampleBrowser::autoDetectSideChainSending(const class SampleBrowser*, class SoundDrum*, class Source*, const char*) (always inlined)",0,0,0,0,0,0
"sample_browser.cpp",391,"SampleBrowser::backButtonAction(const class SampleBrowser*)",2,0,6,0,0,0
"sample_browser.cpp",400,"SampleBrowser::buttonAction(const class SampleBrowser*, unsigned char, bool, bool)",33,0,169,0,0,0
"sound_editor.cpp",134,"SampleBrowser::canImportWholeKit(const class SampleBrowser*)",1,0,26,0,0,0
"sample_browser.cpp",2036,"SampleBrowser::canSeeViewUnderneath(const class SampleBrowser*)",1,0,9,0,0,0
,0,"SampleBrowser::claimAudioFileForAudioClip(const class SampleBrowser*) (always inlined)",0,0,0,0,0,0
"sample_browser.cpp",705,"SampleBrowser::claimAudioFileForInstrument(const class SampleBrowser*, bool)",6,0,35,0,0,0
"song.cpp",244,"SampleBrowser::claimCurrentFile(const class SampleBrowser*, long int, long int, long int)",87,0,484,0,0,0
"sample_browser.cpp",230,"SampleBrowser::currentFileChanged(const class SampleBrowser*, long int)",8,0,35,0,0,0
"sample_browser.cpp",325,"SampleBrowser::enterKeyPress(const class SampleBrowser*)",21,0,128,0,0,0
"sample_browser.cpp",254,"SampleBrowser::exitAction(const class SampleBrowser*)",15,0,142,0,0,0
"sample_browser.cpp",246,"SampleBrowser::exitAndNeverDeleteDrum(const class SampleBrowser*)",2,0,12,0,0,0
"sample_browser.cpp",195,"SampleBrowser::focusRegained(const class SampleBrowser*)",1,0,4,0,0,0
"resizeable_array.h",56,"SampleBrowser::folderContentsReady(const class SampleBrowser*, long int)",12,0,85,0,0,0
"sample_browser.cpp",507,"SampleBrowser::getGreyoutColsAndRows(const class SampleBrowser*, long unsigned int*, long unsigned int*)",2,0,22,0,0,0
"sample_browser.cpp",1982,"SampleBrowser::horizontalEncoderAction(const class SampleBrowser*, long int)",17,0,113,0,0,0
,0,"SampleBrowser::importFolderAsKit(const class SampleBrowser*) (always inlined)",0,0,0,0,0,0
,0,"SampleBrowser::importFolderAsMultisamples(const class SampleBrowser*) (always inlined)",0,0,0,0,0,0
"sample_browser.cpp",1148,"SampleBrowser::loadAllSamplesInFolder(bool, long int*, class Sample***, bool*, long int*, const class SampleBrowser*)",167,0,769,0,0,0
"sample_browser.cpp",91,"SampleBrowser::opened(const class SampleBrowser*)",38,0,154,0,0,0
"sample_browser.cpp",653,"SampleBrowser::padAction(const class SampleBrowser*, long int, long int, long int)",20,0,83,0,0,0
"sample_browser.cpp",184,"SampleBrowser::possiblySetUpBlinking(const class SampleBrowser*)",4,0,37,0,0,0
,0,"SampleBrowser::possiblySetUpBlinking(const class SampleBrowser*) (always inlined)",0,0,0,0,0,0
"sample_browser.cpp",528,"SampleBrowser::previewIfPossible(const class SampleBrowser*, long int)",55,0,255,0,0,0
"sample_browser.cpp",2042,"SampleBrowser::renderMainPads(const class SampleBrowser*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",1,0,7,0,0,0
"sample_browser.cpp",639,"SampleBrowser::scrollFinished(const class SampleBrowser*)",1,0,2,0,0,0
"sample_browser.cpp",274,"SampleBrowser::timerCallback(const class SampleBrowser*)",14,0,86,0,0,0
"sample_browser.cpp",2025,"SampleBrowser::verticalEncoderAction(const class SampleBrowser*, long int, bool)",3,0,25,0,0,0
,0,"SampleCache::clusterStolen(const class SampleCache*, long int) (always inlined)",0,0,0,0,0,0
"sample_cache.cpp",218,"SampleCache::getCluster(const class SampleCache*, long int)",30,0,164,0,0,0
"sample_cache.cpp",224,"SampleCache::getNumExistentClusters(const class SampleCache*, long int)",7,0,37,0,0,0
,0,"SampleCache::prioritizeNotStealingCluster(const class SampleCache*, long int) (always inlined)",0,0,0,0,0,0
,0,"SampleCache::SampleCache(const class SampleCache*, class Sample*, long int, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"SampleCache::setupNewCluster(const class SampleCache*, long int) (always inlined)",0,0,0,0,0,0
,0,"SampleCache::setWriteBytePos(const class SampleCache*, long int) (always inlined)",0,0,0,0,0,0
"sample_cache.cpp",93,"SampleCache::unlinkClusters(const class SampleCache*, long int, bool)",5,0,36,0,0,0
,0,"SampleCache::~SampleCache(const class SampleCache*) (always inlined)",0,0,0,0,0,0
"sample_cluster.cpp",69,"SampleCluster::getCluster(const class SampleCluster*, class Sample*, long unsigned int, long int, long unsigned int, enum Error*)",49,0,253,0,0,0
,0,"SampleCluster::SampleCluster(const class SampleCluster*) (always inlined)",0,0,0,0,0,0
"sample_cluster.cpp",27,"SampleCluster::~SampleCluster(const class SampleCluster*)",12,0,41,0,0,0
"resizeable_array.h",56,"SampleClusterArray::insertSampleClustersAtEnd(const class SampleClusterArray*, long int)",8,0,31,0,0,0
,0,"SampleClusterArray::SampleClusterArray(const class SampleClusterArray*) (always inlined)",0,0,0,0,0,0
,0,"SampleClusterArray::~SampleClusterArray(const class SampleClusterArray*) (always inlined)",0,0,0,0,0,0
"sample_controls.cpp",29,"SampleControls::getInterpolationBufferSize(long int, const class SampleControls*)",9,0,18,0,0,0
,0,"SampleControls::SampleControls(const class SampleControls*) (always inlined)",0,0,0,0,0,0
"sample_holder.cpp",160,"SampleHolder::claimClusterReasons(const class SampleHolder*, bool, long int)",7,0,48,0,0,0
"sample_holder.cpp",191,"SampleHolder::claimClusterReasonsForMarker(const class SampleHolder*, class Cluster**, long unsigned int, long int, long int)",15,0,91,0,0,0
,0,"SampleHolder::getDurationInSamples(const class SampleHolder*, bool) (always inlined)",0,0,0,0,0,0
"stl_algobase.h",233,"SampleHolder::getEndPos(const class SampleHolder*, bool)",1,0,11,0,0,0
,0,"SampleHolder::getEndPos(const class SampleHolder*, bool) (always inlined)",0,0,0,0,0,0
"sample_holder.cpp",92,"SampleHolder::getLengthInSamplesAtSystemSampleRate(const class SampleHolder*, bool)",5,0,21,0,0,0
,0,"SampleHolder::getLoopLengthAtSystemSampleRate(const class SampleHolder*, bool) (always inlined)",0,0,0,0,0,0
"sample_holder.h",60,"SampleHolder::sampleBeenSet(const class SampleHolder*, bool, bool)",1,0,1,0,0,0
,0,"SampleHolder::SampleHolder(const class SampleHolder*) (always inlined)",0,0,0,0,0,0
"sample_holder.cpp",115,"SampleHolder::setAudioFile(const class SampleHolder*, class AudioFile*, bool, bool, long int)",18,0,86,0,0,0
"sample_holder.cpp",69,"SampleHolder::unassignAllClusterReasons(const class SampleHolder*, bool)",5,0,36,0,0,0
"sample_holder.cpp",40,"SampleHolder::~SampleHolder(const class SampleHolder*)",2,0,8,0,0,0
"sample_holder.cpp",40,"SampleHolder::~SampleHolder(const class SampleHolder*)",6,0,29,0,0,0
,0,"SampleHolderForClip::beenClonedFrom(const class SampleHolderForClip*, const class SampleHolderForClip*, bool) (always inlined)",0,0,0,0,0,0
"sample_holder_for_clip.cpp",40,"SampleHolderForClip::recalculateNeutralPhaseIncrement(const class SampleHolderForClip*)",9,0,52,0,0,0
"sample_holder_for_clip.cpp",66,"SampleHolderForClip::sampleBeenSet(const class SampleHolderForClip*, bool, bool)",5,0,28,0,0,0
,0,"SampleHolderForClip::sampleBeenSet(const class SampleHolderForClip*, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"SampleHolderForClip::SampleHolderForClip(const class SampleHolderForClip*) (always inlined)",0,0,0,0,0,0
"sample_holder_for_clip.cpp",33,"SampleHolderForClip::setAudioFile(const class SampleHolderForClip*, class AudioFile*, bool, bool, long int)",2,0,10,0,0,0
"sample_holder_for_clip.cpp",27,"SampleHolderForClip::~SampleHolderForClip(const class SampleHolderForClip*)",1,0,10,0,0,0
"sample_holder_for_clip.cpp",27,"SampleHolderForClip::~SampleHolderForClip(const class SampleHolderForClip*)",2,0,7,0,0,0
,0,"SampleHolderForClip::~SampleHolderForClip(const class SampleHolderForClip*) (always inlined)",0,0,0,0,0,0
"sample_holder_for_voice.cpp",71,"SampleHolderForVoice::claimClusterReasons(const class SampleHolderForVoice*, bool, long int)",15,0,85,0,0,0
,0,"SampleHolderForVoice::loopLength(const class SampleHolderForVoice*) (always inlined)",0,0,0,0,0,0
"sample_holder_for_voice.cpp",173,"SampleHolderForVoice::sampleBeenSet(const class SampleHolderForVoice*, bool, bool)",34,0,153,0,0,0
,0,"SampleHolderForVoice::SampleHolderForVoice(const class SampleHolderForVoice*) (always inlined)",0,0,0,0,0,0
"sample_holder_for_voice.cpp",140,"SampleHolderForVoice::setTransposeAccordingToSamplePitch(const class SampleHolderForVoice*, bool, bool, bool, bool)",17,0,77,0,0,0
"sample_holder_for_voice.cpp",54,"SampleHolderForVoice::unassignAllClusterReasons(const class SampleHolderForVoice*, bool)",6,0,37,0,0,0
"sample_holder_for_voice.cpp",43,"SampleHolderForVoice::~SampleHolderForVoice(const class SampleHolderForVoice*)",2,0,8,0,0,0
"sample_holder_for_voice.cpp",43,"SampleHolderForVoice::~SampleHolderForVoice(const class SampleHolderForVoice*)",4,0,25,0,0,0
"sample_low_level_reader.cpp",317,"SampleLowLevelReader::assignClusters(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int, long int)",5,0,45,0,0,0
"sample_low_level_reader.cpp",883,"SampleLowLevelReader::bufferIndividualSampleForInterpolation(const class SampleLowLevelReader*, long int, long int, char* restrict, long unsigned int)",9,0,26,0,0,0
"sample_low_level_reader.cpp",908,"SampleLowLevelReader::bufferZeroForInterpolation(const class SampleLowLevelReader*, long int)",5,0,28,0,0,0
"sample_low_level_reader.cpp",424,"SampleLowLevelReader::changeClusterIfNecessary(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, bool, long int)",32,0,195,0,0,0
"sample_low_level_reader.cpp",1283,"SampleLowLevelReader::cloneFrom(const class SampleLowLevelReader*, class SampleLowLevelReader*, bool)",10,0,59,0,0,0
"sample_low_level_reader.cpp",571,"SampleLowLevelReader::considerUpcomingWindow(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int*, long int, bool, long int, bool, long int)",99,0,581,0,0,0
"sample_low_level_reader.cpp",507,"SampleLowLevelReader::fillInterpolationBufferForward(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int, bool, long int, long int)",9,0,60,0,0,0
,0,"SampleLowLevelReader::fillInterpolationBufferRetrospectively(const class SampleLowLevelReader*, class Sample*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"sample_low_level_reader.cpp",57,"SampleLowLevelReader::getPlayByteLowLevel(const class SampleLowLevelReader*, class Sample*, class SamplePlaybackGuide*, bool)",6,0,30,0,0,0
"sample_low_level_reader.cpp",542,"SampleLowLevelReader::jumpBackSamples(const class SampleLowLevelReader*, class Sample*, long int, long int)",4,0,31,0,0,0
,0,"SampleLowLevelReader::jumpBackSamples(const class SampleLowLevelReader*, class Sample*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"SampleLowLevelReader::jumpForwardLinear(const class SampleLowLevelReader*, long int, long int, long unsigned int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"SampleLowLevelReader::jumpForwardZeroes(const class SampleLowLevelReader*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"SampleLowLevelReader::misalignPlaybackParameters(const class SampleLowLevelReader*, class Sample*) (always inlined)",0,0,0,0,0,0
,0,"SampleLowLevelReader::moveOnToNextCluster(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int) (always inlined)",0,0,0,0,0,0
"sample_low_level_reader.cpp",1238,"SampleLowLevelReader::readSamplesForTimeStretching(const class SampleLowLevelReader*, long int*, class SamplePlaybackGuide*, class Sample*, long int, long int, long int, long int, long int, long int, bool, long int, long int, class TimeStretcher*, long int, long int, long int, bool)",12,0,84,0,0,0
"sample_low_level_reader.cpp",1186,"SampleLowLevelReader::readSamplesNative(const class SampleLowLevelReader*, long int** restrict, long int, long int, long int, long int, long int* restrict, long int, class TimeStretcher*, bool, class Sample*)",23,0,68,0,0,0
"sample_low_level_reader.cpp",998,"SampleLowLevelReader::readSamplesResampled(const class SampleLowLevelReader*, long int** restrict, long int, long int, long int, long int, long int, long int*, long int, long int, bool, char** restrict, bool* restrict, long int, class TimeStretcher*, bool, class Sample*)",108,0,444,0,0,0
,0,"SampleLowLevelReader::realignPlaybackParameters(const class SampleLowLevelReader*, class Sample*) (always inlined)",0,0,0,0,0,0
"sample_low_level_reader.cpp",106,"SampleLowLevelReader::reassessReassessmentLocation(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int)",23,0,91,0,0,0
"sample_low_level_reader.cpp",33,"SampleLowLevelReader::SampleLowLevelReader(const class SampleLowLevelReader*)",3,0,6,0,0,0
"sample_low_level_reader.cpp",260,"SampleLowLevelReader::setupClusersForInitialPlay(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, bool, long int, long int)",4,0,14,0,0,0
"sample_low_level_reader.cpp",268,"SampleLowLevelReader::setupClusersForInitialPlay(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int, bool, long int)",4,0,37,0,0,0
,0,"SampleLowLevelReader::setupClusersForInitialPlay(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int, bool, long int) (always inlined)",0,0,0,0,0,0
"sample_low_level_reader.cpp",289,"SampleLowLevelReader::setupClustersForPlayFromByte(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int, long int)",9,0,61,0,0,0
"sample_low_level_reader.cpp",76,"SampleLowLevelReader::setupForPlayPosMovedIntoNewCluster(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*, long int, long int)",6,0,25,0,0,0
"sample_low_level_reader.cpp",154,"SampleLowLevelReader::setupReassessmentLocation(const class SampleLowLevelReader*, class SamplePlaybackGuide*, class Sample*)",34,0,155,0,0,0
"sample_low_level_reader.h",68,"SampleLowLevelReader::shouldObeyMarkers(const class SampleLowLevelReader*)",1,0,2,0,0,0
"sample_low_level_reader.cpp",46,"SampleLowLevelReader::unassignAllReasons(const class SampleLowLevelReader*, bool)",4,0,24,0,0,0
"ui_timer_manager.cpp",249,"SampleMarkerEditor::beginSession(class MenuItem*, const class SampleMarkerEditor*)",1,0,5,0,0,0
"sample_marker_editor.cpp",45,"SampleMarkerEditor::beginSession(class MenuItem*, const class SampleMarkerEditor*, const class SampleMarkerEditor*, class MenuItem*)",4,0,15,0,0,0
"sample_marker_editor.cpp",664,"SampleMarkerEditor::buttonAction(const class SampleMarkerEditor*, unsigned char, bool, bool)",9,0,31,0,0,0
"sample_marker_editor.cpp",36,"SampleMarkerEditor::checkPermissionToBeginSession(const class SampleMarkerEditor*, class ModControllableAudio*, long int, class MultiRange**)",1,0,7,0,0,0
"sample_marker_editor.cpp",1272,"SampleMarkerEditor::displayText(const class SampleMarkerEditor*)",10,0,73,0,0,0
"sample_marker_editor.cpp",694,"SampleMarkerEditor::exitUI(const class SampleMarkerEditor*)",2,0,12,0,0,0
"sample_marker_editor.cpp",62,"SampleMarkerEditor::getColsOnScreen(const class SampleMarkerEditor*, struct MarkerColumn*)",11,0,77,0,0,0
,0,"SampleMarkerEditor::getEndColOnScreen(const class SampleMarkerEditor*, long int) (always inlined)",0,0,0,0,0,0
,0,"SampleMarkerEditor::getEndPosFromCol(const class SampleMarkerEditor*, long int) (always inlined)",0,0,0,0,0,0
"sample_marker_editor.cpp",107,"SampleMarkerEditor::getGreyoutColsAndRows(const class SampleMarkerEditor*, long unsigned int*, long unsigned int*)",2,0,4,0,0,0
,0,"SampleMarkerEditor::getStartColOnScreen(const class SampleMarkerEditor*, long int) (always inlined)",0,0,0,0,0,0
,0,"SampleMarkerEditor::getStartPosFromCol(const class SampleMarkerEditor*, long int) (always inlined)",0,0,0,0,0,0
"sample_marker_editor.h",70,"SampleMarkerEditor::getUIType(const class SampleMarkerEditor*)",1,0,2,0,0,0
"sample_marker_editor.cpp",1004,"SampleMarkerEditor::graphicsRoutine(const class SampleMarkerEditor*)",24,0,114,0,0,0
"sample_marker_editor.cpp",701,"SampleMarkerEditor::horizontalEncoderAction(const class SampleMarkerEditor*, long int)",32,0,182,0,0,0
,0,"SampleMarkerEditor::loopLock(const class SampleMarkerEditor*) (always inlined)",0,0,0,0,0,0
"sample_marker_editor.cpp",1259,"SampleMarkerEditor::loopUnlock(const class SampleMarkerEditor*)",2,0,22,0,0,0
"sample_marker_editor.cpp",113,"SampleMarkerEditor::opened(const class SampleMarkerEditor*)",17,0,108,0,0,0
"sample_marker_editor.cpp",349,"SampleMarkerEditor::padAction(const class SampleMarkerEditor*, long int, long int, long int)",87,0,397,0,0,0
"sample_marker_editor.cpp",62,"SampleMarkerEditor::recordScrollAndZoom(const class SampleMarkerEditor*)",5,0,16,0,0,0
,0,"SampleMarkerEditor::recordScrollAndZoom(const class SampleMarkerEditor*) (always inlined)",0,0,0,0,0,0
"sample_marker_editor.cpp",1309,"SampleMarkerEditor::renderColumn(const class SampleMarkerEditor*, long int, class RGB[18]*, struct MarkerColumn*, long int)",21,0,110,0,0,0
"sample_marker_editor.cpp",1399,"SampleMarkerEditor::renderMainPads(const class SampleMarkerEditor*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",15,0,86,0,0,0
"sample_marker_editor.cpp",1085,"SampleMarkerEditor::renderMarkerInCol(const class SampleMarkerEditor*, long int, class RGB[18]*, enum MarkerType, long int, long int, bool)",11,0,66,0,0,0
"sample_marker_editor.cpp",1126,"SampleMarkerEditor::renderOLED(const class SampleMarkerEditor*, unsigned char[128]*)",32,0,311,0,0,0
"sample_marker_editor.cpp",84,"SampleMarkerEditor::reverseRemap(const class SampleMarkerEditor*, enum MarkerType)",5,0,18,0,0,0
,0,"SampleMarkerEditor::reverseRemap(const class SampleMarkerEditor*, enum MarkerType) (always inlined)",0,0,0,0,0,0
,0,"SampleMarkerEditor::SampleMarkerEditor(const class SampleMarkerEditor*, enum String, enum MarkerType) (always inlined)",0,0,0,0,0,0
"sample_marker_editor.cpp",272,"SampleMarkerEditor::selectEncoderAction(const class SampleMarkerEditor*, signed char)",25,0,119,0,0,0
"sample_marker_editor.cpp",1070,"SampleMarkerEditor::shouldAllowExtraScrollRight(const class SampleMarkerEditor*)",3,0,24,0,0,0
,0,"SampleMarkerEditor::shouldAllowExtraScrollRight(const class SampleMarkerEditor*) (always inlined)",0,0,0,0,0,0
"sample_marker_editor.cpp",787,"SampleMarkerEditor::timerCallback(const class SampleMarkerEditor*)",35,0,196,0,0,0
"buttons.cpp",261,"SampleMarkerEditor::verticalEncoderAction(const class SampleMarkerEditor*, long int, bool)",6,0,43,0,0,0
"sample_marker_editor.cpp",153,"SampleMarkerEditor::writeValue(const class SampleMarkerEditor*, long unsigned int, enum MarkerType)",61,0,331,0,0,0
"menu_item.h",54,"SampleMarkerEditor::~SampleMarkerEditor(const class SampleMarkerEditor*)",1,0,1,0,0,0
"sample_marker_editor.h",24,"SampleMarkerEditor::~SampleMarkerEditor(const class SampleMarkerEditor*)",2,0,6,0,0,0
,0,"SamplePercCacheZone::resetEndPos(const class SamplePercCacheZone*, long int) (always inlined)",0,0,0,0,0,0
,0,"SamplePercCacheZone::SamplePercCacheZone(const class SamplePercCacheZone*, long int) (always inlined)",0,0,0,0,0,0
"playback_handler.h",212,"SamplePlaybackGuide::adjustPitchToCorrectDriftFromSync(const class SamplePlaybackGuide*, class VoiceSample*, long int)",3,0,28,0,0,0
,0,"SamplePlaybackGuide::adjustPitchToCorrectDriftFromSync(const class SamplePlaybackGuide*, class VoiceSample*, long int) (always inlined)",0,0,0,0,0,0
"sample_playback_guide.h",34,"SamplePlaybackGuide::getBytePosToEndOrLoopPlayback(const class SamplePlaybackGuide*)",1,0,2,0,0,0
,0,"SamplePlaybackGuide::getBytePosToEndOrLoopPlayback(const class SamplePlaybackGuide*) (always inlined)",0,0,0,0,0,0
"sample_playback_guide.h",32,"SamplePlaybackGuide::getBytePosToStartPlayback(const class SamplePlaybackGuide*, bool)",1,0,2,0,0,0
,0,"SamplePlaybackGuide::getBytePosToStartPlayback(const class SamplePlaybackGuide*, bool) (always inlined)",0,0,0,0,0,0
"general_memory_allocator.h",99,"SamplePlaybackGuide::getFinalClusterIndex(const class SamplePlaybackGuide*, class Sample*, bool, long int*)",12,0,64,0,0,0
"sample_playback_guide.h",38,"SamplePlaybackGuide::getLoopEndPlaybackAtByte(const class SamplePlaybackGuide*)",1,0,2,0,0,0
"sample_playback_guide.h",37,"SamplePlaybackGuide::getLoopStartPlaybackAtByte(const class SamplePlaybackGuide*)",1,0,2,0,0,0
"sample_playback_guide.cpp",112,"SamplePlaybackGuide::getNumSamplesLaggingBehindSync(const class SamplePlaybackGuide*, class VoiceSample*)",6,0,22,0,0,0
"sample_playback_guide.cpp",90,"SamplePlaybackGuide::getSyncedNumSamplesIn(const class SamplePlaybackGuide*)",6,0,49,0,0,0
,0,"SamplePlaybackGuide::SamplePlaybackGuide(const class SamplePlaybackGuide*) (always inlined)",0,0,0,0,0,0
"sample_playback_guide.cpp",63,"SamplePlaybackGuide::setupPlaybackBounds(const class SamplePlaybackGuide*, bool)",4,0,24,0,0,0
"sample_reader.cpp",26,"SampleReader::readBytesPassedErrorChecking(const class SampleReader*, char*, long int)",4,0,25,0,0,0
"sample_reader.cpp",41,"SampleReader::readNewCluster(const class SampleReader*)",4,0,31,0,0,0
,0,"SampleReader::SampleReader(const class SampleReader*) (always inlined)",0,0,0,0,0,0
,0,"SampleRecorder::abort(const class SampleRecorder*) (always inlined)",0,0,0,0,0,0
,0,"SampleRecorder::alterFile(const class SampleRecorder*, enum MonitoringAction, long int, long unsigned int, long long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"SampleRecorder::cardRoutine(const class SampleRecorder*) (always inlined)",0,0,0,0,0,0
"sample_recorder.cpp",763,"SampleRecorder::createNextCluster(const class SampleRecorder*)",23,0,111,0,0,0
"sample_recorder.cpp",60,"SampleRecorder::detachSample(const class SampleRecorder*)",21,0,106,0,0,0
"sample_recorder.cpp",1035,"SampleRecorder::endSyncedRecording(const class SampleRecorder*, long int)",17,0,102,0,0,0
"sample_recorder.cpp",835,"SampleRecorder::feedAudio(const class SampleRecorder*, long int* restrict, long int, bool)",77,0,310,0,0,0
,0,"SampleRecorder::finalizeRecordedFile(const class SampleRecorder*) (always inlined)",0,0,0,0,0,0
"sample_recorder.cpp",827,"SampleRecorder::finishCapturing(const class SampleRecorder*)",3,0,12,0,0,0
,0,"SampleRecorder::finishCapturing(const class SampleRecorder*) (always inlined)",0,0,0,0,0,0
,0,"SampleRecorder::inputHasNoRightChannel(const class SampleRecorder*) (always inlined)",0,0,0,0,0,0
,0,"SampleRecorder::inputLooksDifferential(const class SampleRecorder*) (always inlined)",0,0,0,0,0,0
,0,"SampleRecorder::SampleRecorder(const class SampleRecorder*) (always inlined)",0,0,0,0,0,0
"sample_recorder.cpp",1110,"SampleRecorder::setExtraBytesOnPreviousCluster(class Cluster*, long int, const class SampleRecorder*)",5,0,17,0,0,0
,0,"SampleRecorder::setExtraBytesOnPreviousCluster(const class SampleRecorder*, class Cluster*, long int) (always inlined)",0,0,0,0,0,0
"sample_recorder.cpp",1080,"SampleRecorder::totalSampleLengthNowKnown(const class SampleRecorder*, long unsigned int, long unsigned int)",10,0,41,0,0,0
"sample_recorder.cpp",1494,"SampleRecorder::truncateFileDownToSize(const class SampleRecorder*, long unsigned int)",23,0,107,0,0,0
"sample_recorder.cpp",728,"SampleRecorder::updateDataLengthInFirstCluster(const class SampleRecorder*, class Cluster*)",4,0,17,0,0,0
,0,"SampleRecorder::writeAnyCompletedClusters(const class SampleRecorder*) (always inlined)",0,0,0,0,0,0
"sample_recorder.cpp",745,"SampleRecorder::writeCluster(const class SampleRecorder*, long int, unsigned int)",9,0,44,0,0,0
"sample_recorder.cpp",491,"SampleRecorder::writeOneCompletedCluster(const class SampleRecorder*)",13,0,63,0,0,0
"sample_recorder.cpp",48,"SampleRecorder::~SampleRecorder(const class SampleRecorder*)",8,0,30,0,0,0
"save_instrument_preset_ui.cpp",49,"SaveInstrumentPresetUI::opened(const class SaveInstrumentPresetUI*)",27,0,113,0,0,0
"save_instrument_preset_ui.cpp",118,"SaveInstrumentPresetUI::performSave(const class SaveInstrumentPresetUI*, class StorageManager&, bool)",43,0,215,0,0,0
"save_instrument_preset_ui.h",36,"SaveInstrumentPresetUI::renderSidebar(const class SaveInstrumentPresetUI*, long unsigned int, class RGB[18]*, unsigned char[18]*)",1,0,2,0,0,0
"save_kit_row_ui.cpp",53,"SaveKitRowUI::opened(const class SaveKitRowUI*)",20,0,84,0,0,0
"save_kit_row_ui.cpp",93,"SaveKitRowUI::performSave(const class SaveKitRowUI*, class StorageManager&, bool)",36,0,208,0,0,0
,0,"saveKnobPos(long int, class MIDIKnob*) (always inlined)",0,0,0,0,0,0
,0,"savePreviousKnobPos(long int, class MIDIKnob*, bool, long int) (always inlined)",0,0,0,0,0,0
"save_song_or_instrument.cpp",45,"SaveSongOrInstrument::acceptCurrentOption(const class SaveSongOrInstrument*)",25,0,100,0,0,0
"save_song_or_instrument.cpp",36,"SaveSongOrInstrument::getOptions(const class SaveSongOrInstrument*)",2,0,30,0,0,0
"save_song_or_instrument.cpp",31,"SaveSongOrInstrument::getTitle(const class SaveSongOrInstrument*)",1,0,2,0,0,0
"save_song_or_instrument.cpp",78,"SaveSongOrInstrument::isCurrentOptionAvailable(const class SaveSongOrInstrument*)",5,0,30,0,0,0
"ui.h",154,"SaveSongOrInstrument::padAction(const class SaveSongOrInstrument*, long int, long int, long int)",1,0,14,0,0,0
"save_song_or_instrument.h",24,"SaveSongOrInstrument::~SaveSongOrInstrument(const class SaveSongOrInstrument*)",2,0,6,0,0,0
"context_menu.h",31,"SaveSongOrInstrument::~SaveSongOrInstrument(const class SaveSongOrInstrument*)",1,0,1,0,0,0
"save_song_ui.cpp",106,"SaveSongUI::focusRegained(const class SaveSongUI*)",2,0,3,0,0,0
"save_song_ui.cpp",52,"SaveSongUI::opened(const class SaveSongUI*)",27,0,109,0,0,0
"save_song_ui.cpp",112,"SaveSongUI::performSave(const class SaveSongUI*, class StorageManager&, bool)",115,0,651,0,0,0
"save_ui.cpp",105,"SaveUI::buttonAction(const class SaveUI*, unsigned char, bool, bool)",4,0,13,0,0,0
"save_ui.cpp",71,"SaveUI::enterKeyPress(const class SaveUI*)",11,0,54,0,0,0
"save_ui.cpp",49,"SaveUI::focusRegained(const class SaveUI*)",2,0,11,0,0,0
"save_ui.cpp",38,"SaveUI::opened(const class SaveUI*)",6,0,17,0,0,0
"save_ui.cpp",118,"SaveUI::timerCallback(const class SaveUI*)",9,0,30,0,0,0
,0,"SaveUI::timerCallback(const class SaveUI*) (always inlined)",0,0,0,0,0,0
,0,"scalbn",0,0,67,0,0,0
"scale.h",77,"Scale::getOptions(const class Scale*)",10,0,71,0,0,0
"scale.h",28,"Scale::readCurrentValue(const class Scale*)",7,0,23,0,0,0
,0,"Scale::Scale(const class Scale*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"Scale::writeCurrentValue(const class Scale*)",7,0,21,0,0,0
"scale.h",23,"Scale::~Scale(const class Scale*)",2,0,6,0,0,0
"menu_item.h",54,"Scale::~Scale(const class Scale*)",1,0,1,0,0,0
"dx7note.cpp",194,"ScaleCurve(int, int, int)",6,0,20,0,0,0
,0,"ScaleLevel(int, int, int, int, int, int) (always inlined)",0,0,0,0,0,0
"scale_mode.cpp",48,"ScaleModeColumn::handlePad(const class ScaleModeColumn*, class ModelStackWithTimelineCounter*, struct PressedPad, class KeyboardLayout*)",9,0,40,0,0,0
"scale_mode.cpp",39,"ScaleModeColumn::handleVerticalEncoder(const class ScaleModeColumn*, signed char, long int)",4,0,14,0,0,0
"scale_mode.cpp",27,"ScaleModeColumn::renderColumn(const class ScaleModeColumn*, class RGB[18]*, long int)",4,0,28,0,0,0
,0,"ScaleModeColumn::ScaleModeColumn(const class ScaleModeColumn*) (always inlined)",0,0,0,0,0,0
,0,"ScaleRate(int, int) (always inlined)",0,0,0,0,0,0
,0,"ScaleVelocity(int, int) (always inlined)",0,0,0,0,0,0
,0,"sd_cd_int(int, int, int(int, int)*) (always inlined)",0,0,0,0,0,0
,0,"sd_check_int(int) (always inlined)",0,0,0,0,0,0
,0,"sd_DMAC_Close(long unsigned int*, int) (always inlined)",0,0,0,0,0,0
,0,"sd_DMAC_Get_Endflag(int) (always inlined)",0,0,0,0,0,0
"sd_dev_dmacdrv.c",239,"sd_DMAC_Open(int, long unsigned int)",8,0,19,0,0,0
"sd_dev_dmacdrv.c",102,"sd_DMAC_PeriReqInit(const struct dmac_transinfo*, long unsigned int, int, long unsigned int, long unsigned int, long unsigned int)",17,0,105,0,0,0
,0,"sd_DMAC_PeriReqInit(const struct dmac_transinfo*, long unsigned int, long unsigned int, long unsigned int, long unsigned int, int) (always inlined)",0,0,0,0,0,0
,0,"sd_init(int, long unsigned int, void*, int) (always inlined)",0,0,0,0,0,0
,0,"sd_int_handler(int) (always inlined)",0,0,0,0,0,0
,0,"sd_iswp(int) (always inlined)",0,0,0,0,0,0
,0,"sd_mount(int, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"sd_read_sect(int, unsigned char*, long unsigned int, long int) (always inlined)",0,0,0,0,0,0
,0,"sd_write_sect(int, const unsigned char*, long unsigned int, long int, int) (always inlined)",0,0,0,0,0,0
,0,"sdCardEjected() (always inlined)",0,0,0,0,0,0
,0,"sdCardInserted() (always inlined)",0,0,0,0,0,0
,0,"sddev_check_timer() (always inlined)",0,0,0,0,0,0
"sd_dev_low.c",1159,"sddev_disable_dma(int)",8,0,31,0,0,0
,0,"sddev_disable_dma(int) (always inlined)",0,0,0,0,0,0
,0,"sddev_disable_dma_0() (always inlined)",0,0,0,0,0,0
,0,"sddev_disable_dma_1() (always inlined)",0,0,0,0,0,0
,0,"sddev_get_clockdiv(int, int) (always inlined)",0,0,0,0,0,0
,0,"sddev_init(int) (always inlined)",0,0,0,0,0,0
,0,"sddev_init_1() (always inlined)",0,0,0,0,0,0
"sd_dev_low.c",836,"sddev_init_dma(int, long unsigned int, long unsigned int, long int, int)",14,0,70,0,0,0
,0,"sddev_init_dma(int, long unsigned int, long unsigned int, long int, int) (always inlined)",0,0,0,0,0,0
,0,"sddev_init_dma_0(long unsigned int, long unsigned int, long int, int) (always inlined)",0,0,0,0,0,0
,0,"sddev_init_dma_1(long unsigned int, long unsigned int, long int, int) (always inlined)",0,0,0,0,0,0
"sd.c",62,"sddev_int_wait(long int, long int)",16,0,64,0,0,0
,0,"sddev_power_on(long int) (always inlined)",0,0,0,0,0,0
"sd_dev_low.c",271,"sddev_read_data(int, unsigned char*, long unsigned int, long int)",16,0,59,0,0,0
"sd_int.c",245,"sddev_sd_int_handler_1(long unsigned int)",9,0,29,0,0,0
"sd.c",111,"sddev_start_timer(int)",2,0,9,0,0,0
,0,"sddev_wait_dma_end(int, long int) (always inlined)",0,0,0,0,0,0
,0,"sddev_wait_dma_end_0(long int) (always inlined)",0,0,0,0,0,0
,0,"sddev_wait_dma_end_1(long int) (always inlined)",0,0,0,0,0,0
"sd_dev_low.c",339,"sddev_write_data(int, unsigned char*, long unsigned int, long int)",8,0,28,0,0,0
"diskio.c",105,"sdIntCallback(int, int)",8,0,29,0,0,0
,0,"sdIntCallback(int, int) (always inlined)",0,0,0,0,0,0
,0,"sdio_write_direct(int, unsigned char*, long unsigned int, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"search_EIT_table",0,0,36,0,0,0
,0,"Section::Section(const class Section*) (always inlined)",0,0,0,0,0,0
,0,"seedRandom() (always inlined)",0,0,0,0,0,0
"SEGGER_RTT_printf.c",518,"SEGGER_RTT_printf(unsigned int, const char*, unsigned int)",87,0,285,0,0,0
,0,"SEGGER_RTT_vprintf(unsigned int, const char*, struct __va_list*) (always inlined)",0,0,0,0,0,0
"SEGGER_RTT.c",1195,"SEGGER_RTT_Write(unsigned int, const void*, unsigned int)",30,0,127,0,0,0
,0,"SEGGER_RTT_WriteNoLock(unsigned int, const void*, unsigned int) (always inlined)",0,0,0,0,0,0
"SEGGER_RTT.c",1229,"SEGGER_RTT_WriteString(const char*, unsigned int)",4,0,8,0,0,0
,0,"Segment::Segment(const class Segment*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"segment.h",22,"Segment::~Segment(const class Segment*)",4,0,20,0,0,0
"segment.h",22,"Segment::~Segment(const class Segment*)",4,0,17,0,0,0
,0,"Segment::~Segment(const class Segment*) (always inlined)",0,0,0,0,0,0
"selection.h",34,"Selection::beginSession(const class Selection*, class MenuItem*)",4,0,7,0,0,0
"selection.h",32,"Selection::beginSession(const class Selection*, class MenuItem*)",4,0,7,0,0,0
"selection.cpp",18,"Selection::drawPixelsForOled(const class Selection*)",13,0,80,0,0,0
"display.h",92,"Selection::drawValue(const class Selection*)",11,0,54,0,0,0
"selection.h",59,"Selection::getOptions(const class Selection*)",8,0,114,0,0,0
"selection.h",49,"Selection::getOptions(const class Selection*)",5,0,70,0,0,0
"value.h",42,"Selection::selectButtonPress(const class Selection*)",10,0,229,0,0,0
"selection.h",42,"Selection::selectButtonPress(const class Selection*)",7,0,21,0,0,0
,0,"Selection::Selection(const class Selection*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"selection.h",34,"Selection::size(const class Selection*)",6,0,30,0,0,0
"menu_item.h",54,"Selection::~Selection(const class Selection*)",1,0,1,0,0,0
"menu_item.h",54,"Selection::~Selection(const class Selection*)",1,0,1,0,0,0
"selection.h",29,"Selection::~Selection(const class Selection*)",2,0,6,0,0,0
"selection.h",27,"Selection::~Selection(const class Selection*)",2,0,6,0,0,0
,0,"selfrel_offset31",0,0,7,0,0,0
,0,"SemVer::expect(const class Parser*, char) (always inlined)",0,0,0,0,0,0
,0,"SemVer::operator<=>(const struct SemVer*, const struct SemVer&) (always inlined)",0,0,0,0,0,0
,0,"SemVer::parse(const class Parser*) (always inlined)",0,0,0,0,0,0
"string_view",291,"SemVer::parseNumericIdentifier(const class Parser*)",6,0,47,0,0,0
,0,"SemVer::parsePreRelease(const class Parser*) (always inlined)",0,0,0,0,0,0
,0,"SemVer::Parser(const class Parser*, class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
,0,"SemVer::parseVersionCore(const class Parser*) (always inlined)",0,0,0,0,0,0
"hid_sysex.cpp",138,"send7SegData(class MIDIDevice*)",7,0,36,0,0,0
"sound_editor.cpp",134,"Send::isRelevant(const class Send*, class ModControllableAudio*, long int)",1,0,6,0,0,0
"send.h",27,"Send::readCurrentValue(const class Send*)",2,0,14,0,0,0
,0,"Send::Send(const class Send*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"Send::writeCurrentValue(const class Send*)",2,0,12,0,0,0
"send.h",23,"Send::~Send(const class Send*)",2,0,6,0,0,0
"menu_item.h",54,"Send::~Send(const class Send*)",1,0,1,0,0,0
"device_send_clock.h",27,"SendClock::readCurrentValue(const class SendClock*)",2,0,6,0,0,0
,0,"SendClock::SendClock(const class SendClock*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"device_send_clock.h",29,"SendClock::writeCurrentValue(const class SendClock*)",3,0,10,0,0,0
"menu_item.h",54,"SendClock::~SendClock(const class SendClock*)",1,0,1,0,0,0
"device_send_clock.h",24,"SendClock::~SendClock(const class SendClock*)",2,0,6,0,0,0
,0,"sendColor(unsigned char, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"hardware_testing.cpp",110,"sendColoursForHardwareTest(bool[16]*)",12,0,75,0,0,0
"oled_low_level.c",94,"sendCVTransfer()",8,0,29,0,0,0
"ui_timer_manager.cpp",249,"sendDisplayIfChanged()",9,0,120,0,0,0
,0,"sendOLEDData(class MIDIDevice*, bool) (always inlined)",0,0,0,0,0,0
,0,"sendOLEDDataDelta(class MIDIDevice*, bool) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",929,"sendOutMainPadColours()",9,0,31,0,0,0
,0,"sendOutMainPadColours() (always inlined)",0,0,0,0,0,0
,0,"sendOutMainPadColoursSoon() (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",954,"sendOutSidebarColours()",6,0,20,0,0,0
,0,"sendOutSidebarColours() (always inlined)",0,0,0,0,0,0
,0,"sendOutSidebarColoursSoon() (always inlined)",0,0,0,0,0,0
"oled_low_level.c",123,"sendSPITransferFromQueue()",4,0,17,0,0,0
,0,"sendToPIC(unsigned char) (always inlined)",0,0,0,0,0,0
"sequence_length.h",28,"SequenceLength::readCurrentValue(const class SequenceLength*)",2,0,10,0,0,0
,0,"SequenceLength::SequenceLength(const class SequenceLength*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"sequence_length.h",33,"SequenceLength::writeCurrentValue(const class SequenceLength*)",2,0,9,0,0,0
"sequence_length.h",24,"SequenceLength::~SequenceLength(const class SequenceLength*)",2,0,6,0,0,0
"menu_item.h",54,"SequenceLength::~SequenceLength(const class SequenceLength*)",1,0,1,0,0,0
"storage_manager.cpp",584,"Serializer::writeAbsoluteSyncLevelToFile(const class Serializer*, class Song*, const char*, enum SyncLevel, bool)",3,0,20,0,0,0
,0,"Serializer::writeEarliestCompatibleFirmwareVersion(const class Serializer*, const char*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",589,"Serializer::writeFirmwareVersion(const class Serializer*)",1,0,8,0,0,0
,0,"Serializer::writeSyncTypeToFile(const class Serializer*, class Song*, const char*, enum SyncType, bool) (always inlined)",0,0,0,0,0,0
,0,"Session::areAnyClipsArmed(const class Session*) (always inlined)",0,0,0,0,0,0
"session.cpp",66,"Session::armAllClipsToStop(const class Session*, long int)",15,0,74,0,0,0
"session.cpp",1859,"Session::armClipLowLevel(class Clip*, bool, enum ArmState, const class Session*)",5,0,30,0,0,0
,0,"Session::armClipLowLevel(const class Session*, class Clip*, enum ArmState, bool) (always inlined)",0,0,0,0,0,0
,0,"Session::armClipsAlongWithExistingLaunching(const class Session*, enum ArmState, unsigned char, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"Session::armClipsToStartOrSoloWithQuantization(const class Session*, long unsigned int, long unsigned int, unsigned char, bool, class Clip*, bool, bool, long int, enum ArmState) (always inlined)",0,0,0,0,0,0
,0,"Session::armClipsWithNothingToSyncTo(const class Session*, unsigned char, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"Session::armClipToStartOrSoloUsingQuantization(const class Session*, class Clip*, bool, long unsigned int, enum ArmState, bool) (always inlined)",0,0,0,0,0,0
"session.cpp",1064,"Session::armClipToStopAction(const class Session*, class Clip*)",4,0,28,0,0,0
"session.cpp",1461,"Session::armForSongSwap(const class Session*)",17,0,67,0,0,0
,0,"Session::armForSwitchToArrangement(const class Session*) (always inlined)",0,0,0,0,0,0
"session.cpp",1200,"Session::armingChanged(const class Session*)",10,0,44,0,0,0
"session.cpp",114,"Session::armNextSection(const class Session*, long int, long int)",8,0,59,0,0,0
"session.cpp",1124,"Session::armSection(unsigned char, long int, const class Session*)",20,0,82,0,0,0
"session.cpp",1179,"Session::armSectionWhenNeitherClockActive(class ModelStack*, long int, bool, const class Session*)",10,0,50,0,0,0
"session.cpp",1846,"Session::cancelAllArming(const class Session*)",6,0,20,0,0,0
,0,"Session::cancelAllLaunchScheduling(const class Session*) (always inlined)",0,0,0,0,0,0
"session.cpp",892,"Session::cancelArmingForClip(class Clip*, long int*, const class Session*)",8,0,33,0,0,0
"session.cpp",2143,"Session::considerLaunchEvent(const class Session*, long int)",49,0,233,0,0,0
,0,"Session::deletingClipWhichCouldBeAbandonedOverdub(const class Session*, class Clip*) (always inlined)",0,0,0,0,0,0
"session.cpp",224,"Session::doLaunch(const class Session*, bool)",126,0,746,0,0,0
"session.cpp",2275,"Session::doTickForward(const class Session*, long int)",35,0,191,0,0,0
"session.cpp",1975,"Session::endPlayback(const class Session*)",19,0,83,0,0,0
,0,"Session::getCurrentSection(const class Session*) (always inlined)",0,0,0,0,0,0
"session.cpp",2523,"Session::getPosAtWhichClipWillCut(const class Session*, const class ModelStackWithTimelineCounter*)",14,0,78,0,0,0
"song.cpp",66,"Session::giveClipOpportunityToBeginLinearRecording(const class Session*, class Clip*, long int, long int)",45,0,236,0,0,0
,0,"Session::giveClipOpportunityToBeginLinearRecording(const class Session*, class Clip*, long int, long int) (always inlined)",0,0,0,0,0,0
"session.cpp",1386,"Session::investigateSyncedLaunch(const class Session*, class Clip*, long unsigned int*, long unsigned int*, long unsigned int, bool)",14,0,78,0,0,0
"session.cpp",2503,"Session::isOutputAvailable(const class Session*, class Output*)",2,0,16,0,0,0
,0,"Session::isOutputAvailable(const class Session*, class Output*) (always inlined)",0,0,0,0,0,0
"session.cpp",661,"Session::justAbortedSomeLinearRecording(const class Session*)",11,0,44,0,0,0
,0,"Session::justAbortedSomeLinearRecording(const class Session*) (always inlined)",0,0,0,0,0,0
"session.cpp",711,"Session::launchSchedulingMightNeedCancelling(const class Session*)",11,0,65,0,0,0
,0,"Session::launchSchedulingMightNeedCancelling(const class Session*) (always inlined)",0,0,0,0,0,0
"session.cpp",2057,"Session::resetPlayPos(const class Session*, long int, bool, long int)",31,0,137,0,0,0
"session.cpp",766,"Session::reSyncClip(const class Session*, class ModelStackWithTimelineCounter*, bool, bool)",32,0,107,0,0,0
"session.cpp",734,"Session::reSyncClipToSongTicks(const class Session*, class Clip*)",10,0,40,0,0,0
,0,"Session::reSyncClipToSongTicks(const class Session*, class Clip*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Session::resyncToSongTicks(const class Session*, class Song*)",5,0,29,0,0,0
"session.cpp",1944,"Session::reversionDone(const class Session*)",9,0,41,0,0,0
"session.cpp",1763,"Session::scheduleFillClip(const class Session*, class Clip*)",20,0,105,0,0,0
,0,"Session::scheduleFillClip(const class Session*, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"Session::scheduleFillClips(const class Session*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"Session::scheduleFillEvent(const class Session*, class Clip*, long long int) (always inlined)",0,0,0,0,0,0
"session.cpp",683,"Session::scheduleLaunchTiming(const class Session*, long long int, long int, long int)",6,0,20,0,0,0
,0,"Session::scheduleLaunchTiming(const class Session*, long long int, long int, long int) (always inlined)",0,0,0,0,0,0
"playback_handler.h",214,"Session::scheduleOverdubToStartRecording(class Clip*, class Clip*, const class Session*)",16,0,59,0,0,0
,0,"Session::scheduleOverdubToStartRecording(const class Session*, class Clip*, class Clip*) (always inlined)",0,0,0,0,0,0
"session.cpp",1968,"Session::setupPlayback(const class Session*)",2,0,15,0,0,0
"session.cpp",1073,"Session::soloClipAction(class Clip*, long int, const class Session*)",19,0,83,0,0,0
"session.cpp",2446,"Session::soloClipRightNow(const class Session*, class ModelStackWithTimelineCounter*)",22,0,85,0,0,0
"session.cpp",2512,"Session::stopOutputRecordingAtLoopEnd(const class Session*)",5,0,21,0,0,0
"session.cpp",905,"Session::toggleClipStatus(class Clip*, long int*, bool, long int, const class Session*)",57,0,229,0,0,0
"session.cpp",2393,"Session::unsoloClip(class Clip*, const class Session*)",23,0,118,0,0,0
"session.cpp",1306,"Session::userWantsToArmClipsToStartOrSolo(const class Session*, unsigned char, class Clip*, bool, bool, bool, long int, bool, enum ArmState)",63,0,491,0,0,0
"session.cpp",1872,"Session::userWantsToArmNextSection(const class Session*, long int)",8,0,85,0,0,0
"session.cpp",844,"Session::userWantsToUnsoloClip(class Clip*, bool, long int, const class Session*)",14,0,57,0,0,0
"session.cpp",2021,"Session::wantsToDoTempolessRecord(const class Session*, long int)",6,0,42,0,0,0
"session.cpp",2568,"Session::willClipContinuePlayingAtEnd(const class Session*, const class ModelStackWithTimelineCounter*)",7,0,50,0,0,0
"session.cpp",2601,"Session::willClipLoopAtSomePoint(const class Session*, const class ModelStackWithTimelineCounter*)",1,0,1,0,0,0
"session.h",28,"Session::~Session(const class Session*)",2,0,6,0,0,0
"session.h",28,"Session::~Session(const class Session*)",1,0,1,0,0,0
"session_layout.h",31,"SessionLayout::getOptions(const class SessionLayout*)",4,0,45,0,0,0
"session_layout.h",28,"SessionLayout::readCurrentValue(const class SessionLayout*)",2,0,5,0,0,0
,0,"SessionLayout::SessionLayout(const class SessionLayout*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",45,"SessionLayout::writeCurrentValue(const class SessionLayout*)",1,0,5,0,0,0
"session_layout.h",25,"SessionLayout::~SessionLayout(const class SessionLayout*)",2,0,6,0,0,0
"menu_item.h",54,"SessionLayout::~SessionLayout(const class SessionLayout*)",1,0,1,0,0,0
"session_view.cpp",614,"SessionView::beginEditingSectionRepeatsNum(const class SessionView*)",3,0,9,0,0,0
"session_view.cpp",175,"SessionView::buttonAction(const class SessionView*, unsigned char, bool, bool)",183,0,810,0,0,0
"session_view.cpp",2118,"SessionView::calculateZoomPinSquares(const class SessionView*, long unsigned int, long unsigned int, long unsigned int, long unsigned int)",7,0,69,0,0,0
"session_view.cpp",2608,"SessionView::clipNeedsReRendering(const class SessionView*, class Clip*)",9,0,42,0,0,0
"ui.cpp",382,"SessionView::clipPressEnded(const class SessionView*)",17,0,64,0,0,0
,0,"SessionView::cloneClip(const class SessionView*, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"SessionView::createNewInstrumentClip(const class SessionView*, long int) (always inlined)",0,0,0,0,0,0
"session_view.cpp",1129,"SessionView::drawSectionRepeatNumber(const class SessionView*)",15,0,83,0,0,0
,0,"SessionView::drawSectionSquare(const class SessionView*, unsigned char, class RGB*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::drawStatusSquare(const class SessionView*, unsigned char, class RGB*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",1246,"SessionView::editNumRepeatsTilLaunch(const class SessionView*, long int)",8,0,23,0,0,0
,0,"SessionView::editNumRepeatsTilLaunch(const class SessionView*, long int) (always inlined)",0,0,0,0,0,0
"session_view.cpp",2572,"SessionView::finishedTransitioningHere(const class SessionView*)",9,0,30,0,0,0
,0,"SessionView::flashPlayRoutine(const class SessionView*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",139,"SessionView::focusRegained(const class SessionView*)",17,0,61,0,0,0
"session_view.cpp",2697,"SessionView::getClipForLayout(const class SessionView*)",3,0,10,0,0,0
,0,"SessionView::getClipForLayout(const class SessionView*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::getClipLocalScroll(const class SessionView*, class Clip*, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
"session_view.cpp",1687,"SessionView::getClipOnScreen(const class SessionView*, long int)",6,0,23,0,0,0
,0,"SessionView::getClipOnScreen(const class SessionView*, long int) (always inlined)",0,0,0,0,0,0
"session_view.cpp",2140,"SessionView::getClipPlaceOnScreen(class Clip*, const class SessionView*)",3,0,10,0,0,0
"session_view.cpp",2265,"SessionView::getGreyedOutRowsNotRepresentingOutput(const class SessionView*, class Output*)",5,0,20,0,0,0
"session_view.cpp",93,"SessionView::getGreyoutColsAndRows(const class SessionView*, long unsigned int*, long unsigned int*)",14,0,57,0,0,0
"session_view.h",121,"SessionView::getUIType(const class SessionView*)",1,0,2,0,0,0
,0,"SessionView::goToArrangementEditor(const class SessionView*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",1922,"SessionView::graphicsRoutine(const class SessionView*)",58,0,297,0,0,0
"session_view.cpp",3819,"SessionView::gridClipFromCoords(long unsigned int, long unsigned int, const class SessionView*)",17,0,51,0,0,0
"session_view.cpp",2941,"SessionView::gridCloneClip(class Clip*, const class SessionView*)",11,0,39,0,0,0
,0,"SessionView::gridCloneClip(const class SessionView*, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridClonePad(const class SessionView*, long unsigned int, long unsigned int, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
"session_view.cpp",3065,"SessionView::gridCreateClip(long unsigned int, class Output*, class Clip*, const class SessionView*)",80,0,363,0,0,0
,0,"SessionView::gridCreateClipInTrack(const class SessionView*, class Output*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridCreateClipWithNewTrack(const class SessionView*, enum OutputType) (always inlined)",0,0,0,0,0,0
"session_view.cpp",2995,"SessionView::gridCreateNewTrackForClip(enum OutputType, class InstrumentClip*, bool, const class SessionView*)",21,0,73,0,0,0
,0,"SessionView::gridFirstPadActive(const class SessionView*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",3236,"SessionView::gridHandlePads(const class SessionView*, long int, long int, long int)",134,0,770,0,0,0
,0,"SessionView::gridHandlePadsConfig(const class SessionView*, long int, long int, long int, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridHandlePadsEdit(const class SessionView*, long int, long int, long int, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridHandlePadsLaunch(const class SessionView*, long int, long int, long int, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridHandlePadsLaunchImmediate(const class SessionView*, long int, long int, long int, class Clip*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",3590,"SessionView::gridHandlePadsLaunchToggleArming(class Clip*, bool, const class SessionView*)",12,0,38,0,0,0
"session_view.cpp",3591,"SessionView::gridHandlePadsLaunchToggleArming(const class SessionView*, class Clip*, bool)",4,0,18,0,0,0
,0,"SessionView::gridHandlePadsLaunchToggleArming(const class SessionView*, class Clip*, bool) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridHandlePadsLaunchWithSelection(const class SessionView*, long int, long int, long int, class Clip*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",3646,"SessionView::gridHandleScroll(const class SessionView*, long int, long int)",22,0,111,0,0,0
,0,"SessionView::gridRenderActionModes(const class SessionView*, long int, class RGB[18]*, unsigned char[18]*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridRenderClipColor(const class SessionView*, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridRenderMainPads(const class SessionView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridRenderSidebar(const class SessionView*, long unsigned int, class RGB[18]*, unsigned char[18]*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridResetPresses(const class SessionView*, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridSectionFromY(const class SessionView*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridSetDefaultMode(const class SessionView*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridStartSection(const class SessionView*, long unsigned int, bool) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridToggleClipPlay(const class SessionView*, class Clip*, bool) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridTrackCount(const class SessionView*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridTrackFromIndex(const class SessionView*, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
"session_view.cpp",3907,"SessionView::gridTrackFromX(long unsigned int, long unsigned int, const class SessionView*)",14,0,31,0,0,0
"session_view.cpp",3843,"SessionView::gridTrackIndexFromTrack(class Output*, long unsigned int, const class SessionView*)",9,0,23,0,0,0
,0,"SessionView::gridTrackIndexFromX(const class SessionView*, long unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridTransitionToSessionView(const class SessionView*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridTransitionToViewForClip(const class SessionView*, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridXFromTrack(const class SessionView*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"SessionView::gridYFromSection(const class SessionView*, long unsigned int) (always inlined)",0,0,0,0,0,0
"session_view.cpp",1263,"SessionView::horizontalEncoderAction(const class SessionView*, long int)",9,0,32,0,0,0
"session_view.cpp",2651,"SessionView::midiLearnFlash(const class SessionView*)",9,0,87,0,0,0
,0,"SessionView::midiLearnFlash(const class SessionView*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",2244,"SessionView::modButtonAction(const class SessionView*, unsigned char, bool)",3,0,9,0,0,0
"session_view.cpp",2689,"SessionView::modEncoderAction(const class SessionView*, long int, long int)",3,0,14,0,0,0
"session_view.cpp",2239,"SessionView::modEncoderButtonAction(const class SessionView*, unsigned char, bool)",3,0,9,0,0,0
"session_view.cpp",2250,"SessionView::noteRowChanged(const class SessionView*, class InstrumentClip*, class NoteRow*)",5,0,26,0,0,0
,0,"SessionView::noteRowChanged(const class SessionView*, class InstrumentClip*, class NoteRow*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",125,"SessionView::opened(const class SessionView*)",6,0,27,0,0,0
"session_view.cpp",619,"SessionView::padAction(const class SessionView*, long int, long int, long int)",191,0,1203,0,0,0
"session_view.cpp",2584,"SessionView::playbackEnded(const class SessionView*)",9,0,44,0,0,0
"session_view.cpp",1706,"SessionView::redrawClipsOnScreen(const class SessionView*, bool)",3,0,12,0,0,0
"session_view.cpp",1754,"SessionView::redrawNumericDisplay(const class SessionView*)",21,0,145,0,0,0
"session_view.cpp",1651,"SessionView::removeClip(const class SessionView*, class Clip*)",14,0,98,0,0,0
"session_view.cpp",2275,"SessionView::renderMainPads(const class SessionView*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",54,0,339,0,0,0
"session_view.cpp",1727,"SessionView::renderOLED(const class SessionView*, unsigned char[128]*)",19,0,80,0,0,0
,0,"SessionView::renderOLED(const class SessionView*, unsigned char[128]*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",2311,"SessionView::renderRow(const class SessionView*, class ModelStack*, unsigned char, class RGB*, unsigned char*, bool)",17,0,115,0,0,0
"session_view.cpp",1386,"SessionView::renderSidebar(const class SessionView*, long unsigned int, class RGB[18]*, unsigned char[18]*)",29,0,247,0,0,0
,0,"SessionView::renderViewDisplay(const class SessionView*, const char*) (always inlined)",0,0,0,0,0,0
"session_view.cpp",1612,"SessionView::replaceInstrumentClipWithAudioClip(const class SessionView*, class Clip*)",15,0,88,0,0,0
"session_view.cpp",2080,"SessionView::requestRendering(const class SessionView*, class UI*, long unsigned int, long unsigned int)",7,0,35,0,0,0
"session_view.cpp",2097,"SessionView::rowNeedsRenderingDependingOnSubMode(const class SessionView*, long int)",2,0,27,0,0,0
,0,"SessionView::rowNeedsRenderingDependingOnSubMode(const class SessionView*, long int) (always inlined)",0,0,0,0,0,0
"session_view.cpp",2630,"SessionView::sampleNeedsReRendering(const class SessionView*, class Sample*)",7,0,48,0,0,0
,0,"SessionView::sectionPadAction(const class SessionView*, unsigned char, bool) (always inlined)",0,0,0,0,0,0
"session_view.cpp",1170,"SessionView::selectEncoderAction(const class SessionView*, signed char)",48,0,202,0,0,0
,0,"SessionView::selectLayout(const class SessionView*, signed char) (always inlined)",0,0,0,0,0,0
"session_view.cpp",1853,"SessionView::setCentralLEDStates(const class SessionView*)",8,0,35,0,0,0
"session_view.cpp",2148,"SessionView::setupScroll(const class SessionView*, long unsigned int)",16,0,108,0,0,0
"session_view.cpp",1100,"SessionView::timerCallback(const class SessionView*)",13,0,51,0,0,0
"session_view.cpp",2488,"SessionView::transitionToSessionView(const class SessionView*)",78,0,314,0,0,0
"session_view.cpp",2369,"SessionView::transitionToViewForClip(const class SessionView*, class Clip*)",47,0,388,0,0,0
"session_view.cpp",1284,"SessionView::verticalEncoderAction(const class SessionView*, long int, bool)",31,0,166,0,0,0
,0,"SessionView::verticalScrollOneSquare(const class SessionView*, long int) (always inlined)",0,0,0,0,0,0
,0,"set_mode(long unsigned int, long unsigned int, enum en_sf_req_t, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"setBrightnessLevel(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"setCvNumberForTitle(long int) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",741,"setDimmerInterval(long int)",8,0,45,0,0,0
,0,"setDireness(unsigned int) (always inlined)",0,0,0,0,0,0
"dmac.c",24,"setDMARS(long int, long unsigned int)",5,0,16,0,0,0
"menus.cpp",1324,"setEnvelopeNumberForTitles(long int)",5,0,17,0,0,0
,0,"setGreyoutAmount(float) (always inlined)",0,0,0,0,0,0
"access.S",198,"SetHighVectors",5,0,8,0,0,0
"indicator_leds.cpp",184,"setKnobIndicatorLevel(unsigned char, unsigned char, bool)",3,0,24,0,0,0
"indicator_leds.cpp",46,"setLedState(enum LED, bool, bool)",10,0,35,0,0,0
,0,"setLedState(enum LED, bool, bool) (always inlined)",0,0,0,0,0,0
"access.S",182,"SetLowVectors",5,5,5,5,1,6
,0,"setMeterLevel(unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"menus.cpp",1332,"setModulatorNumberForTitles(long int)",5,0,17,0,0,0
,0,"setOperatingMode(int, enum OSTimerOperatingMode, _Bool) (always inlined)",0,0,0,0,0,0
"menus.cpp",1307,"setOscillatorNumberForTitles(long int)",12,0,38,0,0,0
"gpio.c",57,"setOutputState(unsigned char, unsigned char, short unsigned int)",1,1,7,7,1,7
"gpio.c",50,"setPinAsInput(unsigned char, unsigned char)",3,0,22,0,0,0
"gpio.c",43,"setPinAsOutput(unsigned char, unsigned char)",3,0,22,0,0,0
"gpio.c",34,"setPinMux(unsigned char, unsigned char, unsigned char)",5,0,39,0,0,0
"session_view.cpp",1452,"setPresetOrNextUnlaunchedOne(class InstrumentClip*, enum OutputType, bool*, bool)",34,0,161,0,0,0
,0,"setPresetOrNextUnlaunchedOne(class InstrumentClip*, enum OutputType, bool*, bool) (always inlined)",0,0,0,0,0,0
,0,"setRootUILowLevel(class UI*) (always inlined)",0,0,0,0,0,0
,0,"setTheAutoParamToNull(class ModelStackWithThreeMainThings*) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",164,"setTickSquares(const unsigned char*, const unsigned char*)",20,1,131,29,0,86
"ui_timer_manager.cpp",254,"setTimerForSoon()",2,0,8,0,0,0
,0,"setTimerForSoon() (always inlined)",0,0,0,0,0,0
,0,"setTimerValue(int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"setTimeUSBInitializationEnds(long int) (always inlined)",0,0,0,0,0,0
"array",200,"Setting::getName(const class Setting*)",1,0,10,0,0,0
"setting.cpp",45,"Setting::getOptions(const class Setting*)",5,0,37,0,0,0
"setting.cpp",28,"Setting::readCurrentValue(const class Setting*)",1,0,19,0,0,0
"setting.cpp",40,"Setting::writeCurrentValue(const class Setting*)",1,0,11,0,0,0
"setting.h",25,"Setting::~Setting(const class Setting*)",2,0,6,0,0,0
"menu_item.h",54,"Setting::~Setting(const class Setting*)",1,0,1,0,0,0
,0,"Settings::Settings(const class Settings*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"settings.h",27,"Settings::~Settings(const class Settings*)",7,0,28,0,0,0
"settings.h",27,"Settings::~Settings(const class Settings*)",7,0,25,0,0,0
,0,"Settings::~Settings(const class Settings*) (always inlined)",0,0,0,0,0,0
"song.cpp",244,"setUIForLoadedSong(class Song*)",12,0,46,0,0,0
"timers_interrupts.c",50,"setupAndEnableInterrupt(void(long unsigned int)*, short unsigned int, unsigned char)",5,0,21,0,0,0
"pad_leds.cpp",429,"setupAudioClipCollapseOrExplodeAnimation(class AudioClip*)",9,0,54,0,0,0
"general_memory_allocator.h",99,"setupBlankSong()",15,0,53,0,0,0
,0,"SetupEmulatedDisplaySetting(struct RuntimeFeatureSetting&, enum String, class basic_string_view<char, std::char_traits<char> >, enum RuntimeFeatureStateEmulatedDisplay) (always inlined)",0,0,0,0,0,0
"song.cpp",244,"setupInstrumentClipCollapseAnimation(bool)",3,0,22,0,0,0
,0,"setupInstrumentClipCollapseAnimation(bool) (always inlined)",0,0,0,0,0,0
,0,"setupModelStackWithModControllable(void*, class Song*, class TimelineCounter*, class ModControllable*) (always inlined)",0,0,0,0,0,0
,0,"setupModelStackWithSong(void*, class Song*) (always inlined)",0,0,0,0,0,0
,0,"setupModelStackWithThreeMainThingsButNoNoteRow(void*, class Song*, class ModControllable*, class TimelineCounter*, class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"setupModelStackWithThreeMainThingsIncludingNoteRow(void*, class Song*, class TimelineCounter*, long int, class NoteRow*, class ModControllable*, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
,0,"setupModelStackWithTimelineCounter(void*, class Song*, class TimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"setupOLED() (always inlined)",0,0,0,0,0,0
"runtime_feature_settings.cpp",46,"SetupOnOffSetting(struct RuntimeFeatureSetting&, enum String, class basic_string_view<char, std::char_traits<char> >, enum RuntimeFeatureStateToggle)",5,0,27,0,0,0
,0,"setupRunningClock(int, int) (always inlined)",0,0,0,0,0,0
,0,"setupScroll(signed char, bool) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",1321,"setupScroll(signed char, unsigned char, bool, long int)",6,0,25,0,0,0
,0,"setupSPIInterrupts() (always inlined)",0,0,0,0,0,0
"ssi.c",58,"setupSquareWave()",3,0,29,0,0,0
"deluge.cpp",459,"setupStartupSong()",39,0,225,0,0,0
,0,"SetupSyncScalingActionSetting(struct RuntimeFeatureSetting&, enum String, class basic_string_view<char, std::char_traits<char> >, enum RuntimeFeatureStateSyncScalingAction) (always inlined)",0,0,0,0,0,0
,0,"setupTimerWithInterruptHandler(int, int, void(long unsigned int)*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"setupUSBMessage(unsigned char, unsigned char, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"seven_segment.cpp",555,"SevenSegment::cancelPopup(const class SevenSegment*)",5,0,18,0,0,0
,0,"SevenSegment::cancelPopup(const class SevenSegment*) (always inlined)",0,0,0,0,0,0
"seven_segment.h",63,"SevenSegment::consoleText(const class SevenSegment*, const char*)",1,0,11,0,0,0
,0,"SevenSegment::deleteAllLayers(const class SevenSegment*) (always inlined)",0,0,0,0,0,0
,0,"SevenSegment::disableLowercase(const class SevenSegment*) (always inlined)",0,0,0,0,0,0
"seven_segment.cpp",658,"SevenSegment::displayError(const class SevenSegment*, enum Error)",3,0,20,0,0,0
,0,"SevenSegment::displayError(const class SevenSegment*, enum Error) (always inlined)",0,0,0,0,0,0
,0,"SevenSegment::displayLoadingAnimation(const class SevenSegment*, bool, bool) (always inlined)",0,0,0,0,0,0
"seven_segment.h",75,"SevenSegment::displayLoadingAnimationText(const class SevenSegment*, const char*, bool, bool)",9,0,38,0,0,0
"seven_segment.cpp",536,"SevenSegment::displayPopup(const class SevenSegment*, const char*, signed char, bool, unsigned char, long int, enum DisplayPopupType)",9,0,43,0,0,0
,0,"SevenSegment::enableLowercase(const class SevenSegment*) (always inlined)",0,0,0,0,0,0
"seven_segment.cpp",321,"SevenSegment::encodeText(const class SevenSegment*, class basic_string_view<char, std::char_traits<char> >, unsigned char*, bool, unsigned char, bool, long int)",48,0,245,0,0,0
"seven_segment.cpp",634,"SevenSegment::freezeWithError(const class SevenSegment*, const char*)",6,0,21,0,0,0
"seven_segment.cpp",287,"SevenSegment::getEncodedPosFromLeft(const class SevenSegment*, long int, const char*, bool*)",8,0,34,0,0,0
"seven_segment.h",56,"SevenSegment::getLast(const class SevenSegment*)",1,0,12,0,0,0
"seven_segment.h",61,"SevenSegment::getNumBrowserAndMenuLines(const class SevenSegment*)",1,0,2,0,0,0
"seven_segment.h",58,"SevenSegment::hasPopup(const class SevenSegment*)",1,0,2,0,0,0
"seven_segment.h",59,"SevenSegment::hasPopupOfType(const class SevenSegment*, enum DisplayPopupType)",1,0,8,0,0,0
"seven_segment.cpp",651,"SevenSegment::isLayerCurrentlyOnTop(const class SevenSegment*, class NumericLayer*)",1,0,9,0,0,0
"seven_segment.h",65,"SevenSegment::popupText(const class SevenSegment*, const char*, enum DisplayPopupType)",1,0,11,0,0,0
"seven_segment.h",68,"SevenSegment::popupTextTemporary(const class SevenSegment*, const char*, enum DisplayPopupType)",1,0,11,0,0,0
"seven_segment.h",77,"SevenSegment::removeLoadingAnimation(const class SevenSegment*)",1,0,1,0,0,0
"seven_segment.cpp",130,"SevenSegment::removeTopLayer(const class SevenSegment*)",5,0,19,0,0,0
"seven_segment.cpp",590,"SevenSegment::render(const class SevenSegment*)",26,0,164,0,0,0
,0,"SevenSegment::replaceBottomLayer(const class SevenSegment*, class NumericLayer*) (always inlined)",0,0,0,0,0,0
"seven_segment.cpp",531,"SevenSegment::setNextTransitionDirection(const class SevenSegment*, signed char)",1,0,2,0,0,0
"general_memory_allocator.h",99,"SevenSegment::setScrollingText(const class SevenSegment*, const char*, long int, long int, int)",14,0,88,0,0,0
"general_memory_allocator.h",99,"SevenSegment::setText(const class SevenSegment*, class basic_string_view<char, std::char_traits<char> >, bool, unsigned char, bool, unsigned char*, bool, bool, long int, unsigned char*, bool)",26,0,135,0,0,0
"seven_segment.cpp",503,"SevenSegment::setTextAsNumber(const class SevenSegment*, short int, unsigned char, bool)",3,0,27,0,0,0
"seven_segment.cpp",513,"SevenSegment::setTextAsSlot(const class SevenSegment*, short int, signed char, bool, bool, long int, bool)",7,0,59,0,0,0
"seven_segment.cpp",626,"SevenSegment::setTextVeryBasicA1(const class SevenSegment*, const char*)",7,0,36,0,0,0
"ui_timer_manager.cpp",249,"SevenSegment::setTopLayer(const class SevenSegment*, class NumericLayer*)",3,0,14,0,0,0
,0,"SevenSegment::setTopLayer(const class SevenSegment*, class NumericLayer*) (always inlined)",0,0,0,0,0,0
,0,"SevenSegment::SevenSegment(const class SevenSegment*) (always inlined)",0,0,0,0,0,0
"seven_segment.cpp",565,"SevenSegment::timerRoutine(const class SevenSegment*)",8,0,23,0,0,0
"seven_segment.cpp",252,"SevenSegment::transitionToNewLayer(const class SevenSegment*, class NumericLayer*)",18,0,96,0,0,0
"seven_segment.h",31,"SevenSegment::~SevenSegment(const class SevenSegment*)",2,0,6,0,0,0
"display.h",32,"SevenSegment::~SevenSegment(const class SevenSegment*)",1,0,1,0,0,0
"shape.h",29,"Shape::getOptions(const class Shape*)",4,0,63,0,0,0
"shape.h",37,"Shape::isRelevant(const class Shape*, class ModControllableAudio*, long int)",1,0,6,0,0,0
"shape.h",29,"Shape::readCurrentValue(const class Shape*)",2,0,11,0,0,0
,0,"Shape::Shape(const class Shape*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"Shape::writeCurrentValue(const class Shape*)",2,0,13,0,0,0
"menu_item.h",54,"Shape::~Shape(const class Shape*)",1,0,1,0,0,0
"shape.h",25,"Shape::~Shape(const class Shape*)",2,0,6,0,0,0
,0,"shiftHasChanged() (always inlined)",0,0,0,0,0,0
"shift_is_sticky.cpp",23,"ShiftIsSticky::writeCurrentValue(const class ShiftIsSticky*)",5,0,18,0,0,0
"shift_is_sticky.h",24,"ShiftIsSticky::~ShiftIsSticky(const class ShiftIsSticky*)",2,0,6,0,0,0
"menu_item.h",54,"ShiftIsSticky::~ShiftIsSticky(const class ShiftIsSticky*)",1,0,1,0,0,0
"functions.cpp",408,"shiftVolumeByDB(long int, float)",9,0,37,0,0,0
"functions.cpp",2004,"shouldAbortLoading()",1,0,17,0,0,0
"functions.cpp",1402,"shouldDoPanning(long int, long int*, long int*)",5,0,26,0,0,0
,0,"shouldDoPanning(long int, long int*, long int*) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",122,"shouldNotRenderDuringTimerRoutine()",1,0,26,11,1,12
"param.cpp",356,"show(const char*, int, int, bool)",7,0,42,0,0,0
"param.cpp",368,"show(int, int, int, bool)",2,0,15,0,0,0
"sidechain.h",30,"Sidechain::beginSession(const class Sidechain*, class MenuItem*)",2,0,14,0,0,0
,0,"SideChain::cloneFrom(const class SideChain*, class SideChain*) (always inlined)",0,0,0,0,0,0
"sidechain.cpp",95,"SideChain::getActualAttackRate(const class SideChain*)",9,0,18,0,0,0
,0,"SideChain::getActualReleaseRate(const class SideChain*) (always inlined)",0,0,0,0,0,0
"sidechain.cpp",58,"SideChain::registerHit(const class SideChain*, long int)",2,0,14,0,0,0
,0,"SideChain::registerHitRetrospectively(const class SideChain*, long int, long unsigned int) (always inlined)",0,0,0,0,0,0
"sidechain.cpp",129,"SideChain::render(const class SideChain*, short unsigned int, long int)",29,0,116,0,0,0
"sidechain.cpp",37,"SideChain::SideChain(const class SideChain*)",13,0,38,0,0,0
,0,"Sidechain::Sidechain(const class Sidechain*, enum String, enum String, class initializer_list<MenuItem*>, bool) (always inlined)",0,0,0,0,0,0
"sidechain.h",24,"Sidechain::~Sidechain(const class Sidechain*)",7,0,28,0,0,0
"sidechain.h",24,"Sidechain::~Sidechain(const class Sidechain*)",7,0,25,0,0,0
,0,"Sidechain::~Sidechain(const class Sidechain*) (always inlined)",0,0,0,0,0,0
"rms_feedback.h",139,"SideHPF::getDisplayValue(const class SideHPF*)",1,0,7,0,0,0
"compressor_values.h",81,"SideHPF::getUnit(const class SideHPF*)",1,0,3,0,0,0
"compressor_values.h",69,"SideHPF::readCurrentValue(const class SideHPF*)",2,0,9,0,0,0
,0,"SideHPF::SideHPF(const class SideHPF*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"SideHPF::writeCurrentValue(const class SideHPF*)",8,0,33,0,0,0
"menu_item.h",54,"SideHPF::~SideHPF(const class SideHPF*)",1,0,1,0,0,0
"compressor_values.h",64,"SideHPF::~SideHPF(const class SideHPF*)",2,0,6,0,0,0
,0,"signed_saturate<12>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<13>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<14>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<15>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<16>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<17>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<18>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<19>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<20>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<21>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<22>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<23>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<24>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<25>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<26>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<27>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<28>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<29>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<30>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<31>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<8>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate<9>(long int) (always inlined)",0,0,0,0,0,0
,0,"signed_saturate_operand_unknown(long int, long int) (always inlined)",0,0,0,0,0,0
,0,"sin",0,0,47,0,0,0
,0,"sin_init(long int*) (always inlined)",0,0,0,0,0,0
,0,"sinLog(short unsigned int) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",672,"skipGreyoutFade()",6,0,27,0,0,0
"slice_mode.h",28,"SliceMode::readCurrentValue(const class SliceMode*)",2,0,5,0,0,0
,0,"SliceMode::SliceMode(const class SliceMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",45,"SliceMode::writeCurrentValue(const class SliceMode*)",1,0,5,0,0,0
"slice_mode.h",25,"SliceMode::~SliceMode(const class SliceMode*)",2,0,6,0,0,0
"menu_item.h",54,"SliceMode::~SliceMode(const class SliceMode*)",1,0,1,0,0,0
"slicer.cpp",318,"Slicer::buttonAction(const class Slicer*, unsigned char, bool, bool)",62,0,284,0,0,0
"slicer.cpp",595,"Slicer::doSlice(const class Slicer*)",79,0,380,0,0,0
"slicer.cpp",59,"Slicer::focusRegained(const class Slicer*)",8,0,26,0,0,0
"slicer.h",61,"Slicer::getUIType(const class Slicer*)",1,0,2,0,0,0
"slicer.cpp",167,"Slicer::graphicsRoutine(const class Slicer*)",22,0,109,0,0,0
"slicer.cpp",225,"Slicer::horizontalEncoderAction(const class Slicer*, long int)",18,0,93,0,0,0
"slicer.cpp",496,"Slicer::padAction(const class Slicer*, long int, long int, long int)",44,0,278,0,0,0
"slicer.cpp",457,"Slicer::preview(const class Slicer*, long long int, long long int, long int, long int)",26,0,163,1,0,31
,0,"Slicer::preview(const class Slicer*, long long int, long long int, long int, long int) (always inlined)",0,0,0,0,0,0
"slicer.cpp",104,"Slicer::redraw(const class Slicer*)",1,0,17,0,0,0
"slicer.cpp",110,"Slicer::renderMainPads(const class Slicer*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",20,0,148,0,0,0
"slicer.cpp",90,"Slicer::renderOLED(const class Slicer*, unsigned char[128]*)",7,0,55,0,0,0
"slicer.cpp",283,"Slicer::selectEncoderAction(const class Slicer*, signed char)",16,0,55,0,0,0
,0,"Slicer::stopAnyPreviewing(const class Slicer*) (always inlined)",0,0,0,0,0,0
"slicer.cpp",260,"Slicer::verticalEncoderAction(const class Slicer*, long int, bool)",10,0,58,0,0,0
"slot_browser.cpp",35,"SlotBrowser::beginSlotSession(const class SlotBrowser*, bool, bool)",7,0,26,0,0,0
,0,"SlotBrowser::beginSlotSession(const class SlotBrowser*, bool, bool) (always inlined)",0,0,0,0,0,0
"slot_browser.cpp",130,"SlotBrowser::convertToPrefixFormatIfPossible(const class SlotBrowser*)",11,0,52,0,0,0
,0,"SlotBrowser::convertToPrefixFormatIfPossible(const class SlotBrowser*) (always inlined)",0,0,0,0,0,0
"slot_browser.cpp",118,"SlotBrowser::enterKeyPress(const class SlotBrowser*)",1,0,1,0,0,0
"display.h",93,"SlotBrowser::getCurrentFilenameWithoutExtension(const class SlotBrowser*, class String*)",13,0,63,0,0,0
"slot_browser.cpp",214,"SlotBrowser::getCurrentFilePath(const class SlotBrowser*, class String*)",10,0,41,0,0,0
,0,"SlotBrowser::getCurrentFilePath(const class SlotBrowser*, class String*) (always inlined)",0,0,0,0,0,0
"ui.cpp",416,"SlotBrowser::horizontalEncoderAction(const class SlotBrowser*, long int)",14,0,65,0,0,0
"slot_browser.cpp",105,"SlotBrowser::processBackspace(const class SlotBrowser*)",5,0,24,0,0,0
"cfunctions.c",206,"slotToString(long int, long int, char* restrict, long int)",6,0,16,0,0,0
,0,"slotToString(long int, long int, char* restrict, long int) (always inlined)",0,0,0,0,0,0
"ssi.c",54,"slowRoutine()",10,0,48,0,0,0
"printf.c",902,"snprintf_(char*, unsigned int, const char*)",3,0,11,0,0,0
"audio_engine.cpp",1391,"solicitTimeStretcher()",9,0,38,0,0,0
,0,"solicitTimeStretcher() (always inlined)",0,0,0,0,0,0
,0,"solicitVoice(class Sound*) (always inlined)",0,0,0,0,0,0
"audio_engine.cpp",1365,"solicitVoiceSample()",8,0,38,0,0,0
,0,"solicitVoiceSample() (always inlined)",0,0,0,0,0,0
"song.cpp",5947,"Song::addInstrumentsToFileItems(const class Song*, enum OutputType)",23,0,131,0,0,0
,0,"Song::addInstrumentToHibernationList(const class Song*, class Instrument*) (always inlined)",0,0,0,0,0,0
"song.cpp",766,"Song::addMajorDependentModeNotes(const class Song*, unsigned char, bool, class NoteSet&)",8,0,31,0,0,0
,0,"Song::addModeNote(const class Song*, unsigned char) (always inlined)",0,0,0,0,0,0
"song.cpp",3373,"Song::addOutput(const class Song*, class Output*, bool)",13,0,34,0,0,0
,0,"Song::addOutput(const class Song*, class Output*, bool) (always inlined)",0,0,0,0,0,0
,0,"Song::addToModelStack(const class Song*, class ModelStack*) (always inlined)",0,0,0,0,0,0
"song.cpp",6014,"Song::adjustMasterTransposeInterval(const class Song*, long int)",8,0,98,0,0,0
"song.cpp",579,"Song::anyScaleModeClips(const class Song*)",6,0,23,0,0,0
,0,"Song::areAllClipsInSectionPlaying(const class Song*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",4215,"Song::assertActiveness(const class Song*, class ModelStackWithTimelineCounter*, long int)",27,0,158,0,0,0
"song.cpp",5808,"Song::backtrackingCouldLoopBackToEnd(const class Song*)",1,0,2,0,0,0
"song.cpp",3944,"Song::backUpParamManager(const class Song*, class ModControllableAudio*, class Clip*, class ParamManagerForTimeline*, bool)",17,0,65,0,0,0
"param_manager.h",51,"Song::backUpParamManager(const class Song*, class ModControllableAudio*, class Clip*, class ParamManagerForTimeline*, bool)",1,0,9,0,0,0
,0,"Song::backUpParamManager(const class Song*, class ModControllableAudio*, class Clip*, class ParamManagerForTimeline*, bool) (always inlined)",0,0,0,0,0,0
"song.cpp",1099,"Song::changeFillMode(const class Song*, bool)",4,0,20,0,0,0
,0,"Song::changeFillMode(const class Song*, bool) (always inlined)",0,0,0,0,0,0
,0,"Song::changeMusicalMode(const class Song*, unsigned char, signed char) (always inlined)",0,0,0,0,0,0
"song.cpp",5059,"Song::changeOutputType(const class Song*, class Instrument*, enum OutputType)",45,0,211,0,0,0
,0,"Song::changeSwingInterval(const class Song*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",4718,"Song::clearArrangementBeyondPos(const class Song*, long int, class Action*)",19,0,77,0,0,0
,0,"Song::convertSyncLevelFromFileValueToInternalValue(const class Song*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",5877,"Song::convertSyncLevelFromFileValueToInternalValue(long int, const class Song*)",5,0,13,0,0,0
,0,"Song::convertSyncLevelFromInternalValueToFileValue(const class Song*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",5644,"Song::countAudioClips(const class Song*)",6,0,43,0,0,0
"song.cpp",5187,"Song::createNewAudioOutput(const class Song*, class Output*)",54,0,210,0,0,0
"song.cpp",5603,"Song::createPendingNextOverdubBelowClip(const class Song*, class Clip*, long int, enum OverDubType)",9,0,40,0,0,0
,0,"Song::cullAudioClipVoice(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::cycleThroughScales(const class Song*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Song::deactivateAnyArrangementOnlyClips(const class Song*)",6,0,25,0,0,0
"song.cpp",305,"Song::deleteAllBackedUpParamManagers(const class Song*, bool)",8,0,28,0,0,0
,0,"Song::deleteAllBackedUpParamManagersWithClips(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",290,"Song::deleteAllOutputs(class Output**, const class Song*)",9,0,19,0,0,0
"song.cpp",3995,"Song::deleteBackedUpParamManagersForClip(const class Song*, class Clip*)",36,0,214,0,0,0
"song.cpp",4100,"Song::deleteBackedUpParamManagersForModControllable(const class Song*, class ModControllableAudio*)",8,0,40,0,0,0
"song.cpp",3251,"Song::deleteClipObject(const class Song*, class Clip*, bool, enum InstrumentRemoval)",20,0,78,0,0,0
"song.cpp",3680,"Song::deleteHibernatingInstrumentWithSlot(const class Song*, enum OutputType, const char*)",8,0,32,0,0,0
"song.cpp",4527,"Song::deleteHibernatingMIDIInstrument(const class Song*)",7,0,32,0,0,0
"song.cpp",3593,"Song::deleteOrAddToHibernationListOutput(const class Song*, class Output*)",8,0,25,0,0,0
,0,"Song::deleteOrAddToHibernationListOutput(const class Song*, class Output*) (always inlined)",0,0,0,0,0,0
"song.cpp",3607,"Song::deleteOrHibernateOutput(const class Song*, class Output*)",12,0,33,0,0,0
,0,"Song::deleteOrHibernateOutput(const class Song*, class Output*) (always inlined)",0,0,0,0,0,0
"song.cpp",3667,"Song::deleteOrHibernateOutputIfNoClips(const class Song*, class Output*)",5,0,21,0,0,0
"song.cpp",3624,"Song::deleteOutput(const class Song*, class Output*)",4,0,16,0,0,0
"song.cpp",3407,"Song::deleteOutputThatIsInMainList(const class Song*, class Output*, bool)",3,0,12,0,0,0
"playback_handler.h",214,"Song::deletePendingOverdubs(const class Song*, class Output*, long int*, bool)",8,0,53,0,0,0
,0,"Song::deleteSoundsWhichWontSound(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",4760,"Song::deletingClipInstanceForClip(const class Song*, class Output*, class Clip*, class Action*, bool)",13,0,48,0,0,0
,0,"Song::deletingClipInstanceForClip(const class Song*, class Output*, class Clip*, class Action*, bool) (always inlined)",0,0,0,0,0,0
"song.cpp",5986,"Song::displayCurrentRootNoteAndScaleName(const class Song*)",11,0,68,0,0,0
,0,"Song::displayMasterTransposeInterval(const class Song*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Song::doesNonAudioSlotHaveActiveClipInSession(const class Song*, enum OutputType, long int, long int)",6,0,44,0,0,0
"resizeable_array.h",56,"Song::doesOutputHaveActiveClipInSession(const class Song*, class Output*)",4,0,27,0,0,0
"song.cpp",1156,"Song::doubleClipLength(const class Song*, class InstrumentClip*, class Action*)",14,0,60,0,0,0
"resizeable_array.h",56,"Song::endInstancesOfActiveClips(const class Song*, long int, bool)",16,0,69,0,0,0
"song.cpp",4591,"Song::ensureAllInstrumentsHaveAClipOrBackedUpParamManager(const class Song*, const char*, const char*)",11,0,88,0,0,0
"general_memory_allocator.h",99,"Song::ensureAtLeastOneSessionClip(const class Song*)",60,0,336,0,0,0
,0,"Song::ensureAtLeastOneSessionClip(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::ensureInaccessibleParamPresetValuesWithoutKnobsAreZero(const class Song*, class Sound*) (always inlined)",0,0,0,0,0,0
"song.cpp",2544,"Song::findNoteRowForDrum(const class Song*, class Kit*, class Drum*, class Clip*)",16,0,71,0,0,0
,0,"Song::findParamManagerForDrum(const class Song*, class Kit*, class Drum*, class Clip*) (always inlined)",0,0,0,0,0,0
"song.cpp",5816,"Song::getActiveModControllable(const class Song*, class ModelStackWithTimelineCounter*)",1,0,14,0,0,0
,0,"Song::getActiveModControllable(const class Song*, class ModelStackWithTimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"Song::getAnyClipsSoloing(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::getAnyOutputsSoloingInArrangement(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",3716,"Song::getAudioOutputFromName(const class Song*, class String*)",3,0,25,0,0,0
,0,"Song::getBackedUpParamManagerForExactClip(const class Song*, class ModControllableAudio*, class Clip*, class ParamManager*) (always inlined)",0,0,0,0,0,0
"song.cpp",3892,"Song::getBackedUpParamManagerPreferablyWithClip(const class Song*, class ModControllableAudio*, class Clip*, class ParamManager*)",16,0,68,0,0,0
"functions.h",389,"Song::getBarLength(const class Song*)",4,0,9,0,0,0
"song.cpp",1180,"Song::getClipWithOutput(const class Song*, class Output*, bool, class Clip*)",12,0,67,0,0,0
"resizeable_array.h",56,"Song::getClipWithOutputAboutToBeginLinearRecording(const class Song*, class Output*)",6,0,43,0,0,0
"song.cpp",3162,"Song::getCurrentPresetScale(const class Song*)",3,0,24,0,0,0
"song.cpp",3157,"Song::getCurrentPresetScale(const class Song*)",1,0,6,0,0,0
,0,"Song::getCurrentPresetScale(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",1029,"Song::getInputTickScale(const class Song*)",4,0,11,0,0,0
,0,"Song::getInputTickScale(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",3731,"Song::getInstrumentFromPresetSlot(const class Song*, enum OutputType, long int, long int, const char*, const char*, bool, bool)",9,0,128,0,0,0
,0,"Song::getInstrumentFromPresetSlot(const class Song*, enum OutputType, long int, long int, const char*, const char*, bool, bool) (always inlined)",0,0,0,0,0,0
"song.cpp",5844,"Song::getLastProcessedPos(const class Song*)",3,0,15,0,0,0
,0,"Song::getLastProcessedPos(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",5832,"Song::getLivePos(const class Song*)",3,0,7,0,0,0
"song.cpp",4484,"Song::getLongestActiveClipWithMultipleOrFactorLength(const class Song*, long int, bool, class Clip*)",13,0,82,0,0,0
"song.cpp",4456,"Song::getLongestClip(const class Song*, bool, bool)",8,0,40,0,0,0
"song.cpp",5853,"Song::getLoopLength(const class Song*)",1,0,2,0,0,0
,0,"Song::getLowestSectionWithNoSessionClipForOutput(const class Song*, class Output*) (always inlined)",0,0,0,0,0,0
"song.cpp",3273,"Song::getMaxMIDIChannelSuffix(long int, const class Song*)",17,0,80,0,0,0
"song.cpp",6059,"Song::getModelStackWithParam(const class Song*, class ModelStackWithThreeMainThings*, long int)",3,0,5,0,0,0
,0,"Song::getNextAudioOutput(const class Song*, long int, class Output*, enum Availability) (always inlined)",0,0,0,0,0,0
,0,"Song::getNextSessionClipWithOutput(const class Song*, long int, class Output*, class Clip*) (always inlined)",0,0,0,0,0,0
"song.cpp",5361,"Song::getNonAudioInstrumentToSwitchTo(const class Song*, enum OutputType, enum Availability, short int, signed char, bool*)",28,0,112,0,0,0
"song.cpp",5347,"Song::getNoteLengthName(const class Song*, class StringBuf&, long unsigned int, const char*, bool)",4,0,21,0,0,0
,0,"Song::getNumOutputs(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::getOutputFromIndex(const class Song*, long int) (always inlined)",0,0,0,0,0,0
,0,"Song::getOutputIndex(const class Song*, class Output*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Song::getPendingOverdubWithOutput(const class Song*, class Output*)",3,0,20,0,0,0
"song.cpp",5812,"Song::getPosAtWhichPlaybackWillCut(const class Song*, const class ModelStackWithTimelineCounter*)",1,0,2,0,0,0
,0,"Song::getQuarterNoteLength(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::getScaleName(const class Song*, long int) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Song::getSessionClipWithOutput(const class Song*, class Output*, long int, class Clip*, long int*, bool)",7,0,43,0,0,0
,0,"Song::getSongFullPath(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::getSyncScalingClip(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",5857,"Song::getTimelineCounterToRecordTo(const class Song*)",1,0,1,0,0,0
,0,"Song::getTimePerTimerTickFloat(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::getTimePerTimerTickRounded(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::getYNoteFromYVisual(const class Song*, long int, bool) (always inlined)",0,0,0,0,0,0
"song.cpp",935,"Song::getYNoteFromYVisual(long int, short int, unsigned char, unsigned char*, bool, const class Song*)",5,0,19,0,0,0
,0,"Song::getYNoteIndexInMode(const class Song*, long int) (always inlined)",0,0,0,0,0,0
,0,"Song::getYNoteWithinOctaveFromYNote(const class Song*, long int) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Song::getYScrollSongViewWithoutPendingOverdubs(const class Song*)",5,0,22,0,0,0
"song.cpp",908,"Song::getYVisualFromYNote(const class Song*, long int, bool)",2,0,8,0,0,0
,0,"Song::getYVisualFromYNote(const class Song*, long int, bool, short int, unsigned char, unsigned char*) (always inlined)",0,0,0,0,0,0
"song.cpp",916,"Song::getYVisualFromYNote(long int, short int, unsigned char, unsigned char*, bool, const class Song*)",4,0,34,0,0,0
,0,"Song::grabHibernatingMIDIInstrument(const class Song*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"Song::grabVelocityToLevelFromMIDIDeviceAndSetupPatchingForAllParamManagersForDrum(const class Song*, class MIDIDevice*, class SoundDrum*, class Kit*) (always inlined)",0,0,0,0,0,0
,0,"Song::grabVelocityToLevelFromMIDIDeviceAndSetupPatchingForAllParamManagersForInstrument(const class Song*, class MIDIDevice*, class SoundInstrument*) (always inlined)",0,0,0,0,0,0
,0,"Song::grabVelocityToLevelFromMIDIDeviceAndSetupPatchingForEverything(const class Song*, class MIDIDevice*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Song::hasAnyPendingNextOverdubs(const class Song*)",3,0,19,0,0,0
"song.cpp",1029,"Song::inputTickScalePotentiallyJustChanged(const class Song*, long unsigned int)",15,0,126,0,0,0
"song.cpp",4997,"Song::instrumentSwapped(const class Song*, class Instrument*)",19,0,91,0,0,0
"song.cpp",4276,"Song::isClipActive(const class Song*, const class Clip*)",2,0,8,0,0,0
,0,"Song::isClipActive(const class Song*, const class Clip*) (always inlined)",0,0,0,0,0,0
,0,"Song::isFillModeActive(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",4516,"Song::isOutputActiveInArrangement(const class Song*, class Output*)",2,0,8,0,0,0
"song.cpp",5804,"Song::isPlayingAutomationNow(const class Song*)",1,0,16,0,0,0
,0,"Song::isYNoteAllowed(const class Song*, long int, bool) (always inlined)",0,0,0,0,0,0
"song.cpp",2303,"Song::loadAllSamples(const class Song*, bool)",11,0,42,0,0,0
,0,"Song::loadCrucialSamplesOnly(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::markAllInstrumentsAsEdited(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::mayDoubleTempo(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::mayMoveModeNote(const class Song*, short int, signed char) (always inlined)",0,0,0,0,0,0
,0,"Song::midiDeviceBendRangeUpdatedViaMessage(const class Song*, class ModelStack*, class MIDIDevice*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"Song::modeContainsYNoteWithinOctave(const class Song*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"Song::moveInstrumentToHibernationList(const class Song*, class Instrument*) (always inlined)",0,0,0,0,0,0
"song.cpp",4868,"Song::navigateThroughPresetsForInstrument(const class Song*, class Output*, long int)",46,0,222,0,0,0
"resizeable_array.h",56,"Song::placeFirstInstancesOfActiveClips(const class Song*, long int)",10,0,39,0,0,0
"song.cpp",2244,"Song::readClipsFromFile(const class Song*, class ClipArray*, class Deserializer&)",24,0,103,0,0,0
"song.cpp",1463,"Song::readFromFile(const class Song*, class Deserializer&)",459,0,2331,0,0,0
"song.cpp",3319,"Song::reassessWhetherAnyClipsSoloing(const class Song*)",6,0,21,0,0,0
,0,"Song::reassessWhetherAnyOutputsSoloingInArrangement(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",3654,"Song::removeInstrumentFromHibernationList(const class Song*, class Instrument*)",3,0,17,0,0,0
,0,"Song::removeInstrumentFromHibernationList(const class Song*, class Instrument*) (always inlined)",0,0,0,0,0,0
"song.cpp",3419,"Song::removeOutputFromMainList(const class Song*, class Output*, bool)",18,0,82,0,0,0
"song.cpp",5419,"Song::removeSessionClip(const class Song*, class Clip*, long int, bool)",31,0,219,0,0,0
"playback_handler.h",214,"Song::removeSessionClipLowLevel(const class Song*, class Clip*, long int)",4,0,34,0,0,0
,0,"Song::removeYNoteFromMode(const class Song*, long int) (always inlined)",0,0,0,0,0,0
,0,"Song::renderAudio(const class Song*, struct StereoSample*, long int, long int*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",3479,"Song::replaceInstrument(const class Song*, class Instrument*, class Instrument*, bool)",41,0,179,0,0,0
"general_memory_allocator.h",99,"Song::replaceInstrumentClipWithAudioClip(const class Song*, class Clip*, long int)",45,0,155,0,0,0
"song.cpp",857,"Song::replaceMusicalMode(const class Song*, signed char*, bool)",22,0,134,0,0,0
,0,"Song::replaceOutputLowLevel(const class Song*, class Output*, class Output*) (always inlined)",0,0,0,0,0,0
,0,"Song::restoreClipStatesBeforeArrangementPlay(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",4694,"Song::resumeClipsClonedForArrangementRecording(const class Song*)",9,0,67,0,0,0
,0,"Song::resyncLFOs(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::rotateMusicalMode(const class Song*, signed char) (always inlined)",0,0,0,0,0,0
,0,"Song::sendAllMIDIPGMs(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",3226,"Song::setBPM(const class Song*, float, bool)",5,0,23,0,0,0
"song.cpp",1111,"Song::setClipLength(const class Song*, class Clip*, long unsigned int, class Action*, bool)",20,0,85,0,0,0
,0,"Song::setCurrentClip(const class Song*, class Clip*) (always inlined)",0,0,0,0,0,0
,0,"Song::setDefaultVelocityForAllInstruments(const class Song*, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"Song::setHibernatingMIDIInstrument(const class Song*, class MIDIInstrument*) (always inlined)",0,0,0,0,0,0
"song.cpp",1029,"Song::setInputTickScaleClip(const class Song*, class Clip*)",6,0,14,0,0,0
"song.cpp",4803,"Song::setParamsInAutomationMode(const class Song*, bool)",9,0,45,0,0,0
,0,"Song::setParamsInAutomationMode(const class Song*, bool) (always inlined)",0,0,0,0,0,0
"song.cpp",2955,"Song::setPresetScale(const class Song*, long int)",61,0,335,0,0,0
"song.cpp",602,"Song::setRootNote(const class Song*, long int, class InstrumentClip*)",31,0,246,0,0,0
,0,"Song::setSongFullPath(const class Song*, const char*) (always inlined)",0,0,0,0,0,0
"song.cpp",3212,"Song::setTempoFromNumSamples(const class Song*, double, bool)",4,0,30,0,0,0
"song.cpp",3237,"Song::setTempoFromParams(const class Song*, long int, signed char, bool)",7,0,28,0,0,0
"song.cpp",2481,"Song::setTimePerTimerTick(const class Song*, long long unsigned int, bool)",21,0,126,0,0,0
,0,"Song::setupClipIndexesForSaving(const class Song*) (always inlined)",0,0,0,0,0,0
"song.cpp",248,"Song::setupDefault(const class Song*)",18,0,84,0,0,0
,0,"Song::setupModelStackWithCurrentClip(const class Song*, void*) (always inlined)",0,0,0,0,0,0
,0,"Song::setupModelStackWithSongAsTimelineCounter(const class Song*, void*) (always inlined)",0,0,0,0,0,0
,0,"Song::setupPatchingForAllParamManagers(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::setupPatchingForAllParamManagersForDrum(const class Song*, class SoundDrum*) (always inlined)",0,0,0,0,0,0
,0,"Song::setupPatchingForAllParamManagersForInstrument(const class Song*, class SoundInstrument*) (always inlined)",0,0,0,0,0,0
"song.cpp",4841,"Song::shouldOldOutputBeReplaced(const class Song*, class Clip*, enum Availability*)",12,0,53,0,0,0
,0,"Song::shouldOldOutputBeReplaced(const class Song*, class Clip*, enum Availability*) (always inlined)",0,0,0,0,0,0
"song.cpp",122,"Song::Song(const class Song*)",35,0,153,0,0,0
,0,"Song::sortOutWhichClipsAreActiveWithoutSendingPGMs(const class Song*, class ModelStack*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",4578,"Song::stopAllAuditioning(const class Song*)",4,0,15,0,0,0
,0,"Song::stopAllMIDIAndGateNotesPlaying(const class Song*) (always inlined)",0,0,0,0,0,0
,0,"Song::swapClips(const class Song*, class Clip*, class Clip*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",5999,"Song::transpose(const class Song*, long int)",7,0,39,0,0,0
,0,"Song::transpose(const class Song*, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",548,"Song::transposeAllScaleModeClips(const class Song*, long int)",11,0,47,0,0,0
,0,"Song::transposeAllScaleModeClips(const class Song*, long int, bool) (always inlined)",0,0,0,0,0,0
"song.cpp",3333,"Song::turnSoloingIntoJustPlaying(const class Song*, bool)",9,0,46,0,0,0
,0,"Song::turnSoloingIntoJustPlaying(const class Song*, bool) (always inlined)",0,0,0,0,0,0
,0,"Song::writeTemplateSong(const class Song*, const char*) (always inlined)",0,0,0,0,0,0
"song.cpp",1288,"Song::writeToFile(const class Song*, class StorageManager&)",113,0,707,0,0,0
,0,"Song::yNoteIsYVisualWithinOctave(const class Song*, long int, long int) (always inlined)",0,0,0,0,0,0
"song.cpp",203,"Song::~Song(const class Song*)",2,0,8,0,0,0
"song.cpp",203,"Song::~Song(const class Song*)",20,0,85,0,0,0
"ui_timer_manager.cpp",249,"songSwapAboutToHappen()",37,0,187,0,0,0
,0,"sort<SortedTask*>(struct SortedTask*, struct SortedTask*) (always inlined)",0,0,0,0,0,0
,0,"SortedTask::operator<(const struct SortedTask*, const struct SortedTask&) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",258,"sortLedsForCol(long int)",10,0,91,0,0,0
"sample_browser.cpp",1095,"sortSamples(bool(class Sample*, class Sample*)*, long int, class Sample***, long int*, long int*)",11,0,89,0,0,0
"sound.cpp",1684,"Sound::allNotesOff(const class Sound*, class ModelStackWithThreeMainThings*, class ArpeggiatorBase*)",5,0,25,0,0,0
"sound.cpp",1769,"Sound::allowNoteTails(const class Sound*, class ModelStackWithSoundFlags*, bool)",19,0,112,0,0,0
,0,"Sound::allowsVeryLateNoteStart(const class Sound*, class InstrumentClip*, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
,0,"Sound::anyNoteIsOn(const class Sound*) (always inlined)",0,0,0,0,0,0
,0,"Sound::calculateEffectiveVolume(const class Sound*) (always inlined)",0,0,0,0,0,0
"firmware_version.h",45,"Sound::compensateVolumeForResonance(const class Sound*, class ModelStackWithThreeMainThings*)",21,0,101,0,0,0
,0,"Sound::compensateVolumeForResonance(const class Sound*, class ModelStackWithThreeMainThings*) (always inlined)",0,0,0,0,0,0
"sound.cpp",3154,"Sound::createParamManagerForLoading(class ParamManagerForTimeline*)",7,0,25,0,0,0
"sound.cpp",4584,"Sound::deleteMultiRange(const class Sound*, long int, long int)",6,0,28,0,0,0
,0,"Sound::detachSourcesFromAudioFiles(const class Sound*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2850,"Sound::doneReadingFromFile(const class Sound*)",11,0,99,0,0,0
,0,"Sound::doParamLPF(const class Sound*, long int, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2780,"Sound::ensureInaccessibleParamPresetValuesWithoutKnobsAreZero(const class Sound*, class ModelStackWithThreeMainThings*)",10,0,62,0,0,0
"sound.cpp",2737,"Sound::ensureInaccessibleParamPresetValuesWithoutKnobsAreZero(const class Sound*, class Song*)",23,0,118,0,0,0
"sound.cpp",2771,"Sound::ensureInaccessibleParamPresetValuesWithoutKnobsAreZeroWithMinimalDetails(const class Sound*, class ParamManager*)",9,0,68,0,0,0
"param_descriptor.h",45,"Sound::ensureKnobReferencesCorrectVolume(class Knob*, const class Sound*)",8,0,24,0,0,0
,0,"Sound::ensureParamPresetValueWithoutKnobIsZero(const class Sound*, class ModelStackWithAutoParam*) (always inlined)",0,0,0,0,0,0
,0,"Sound::ensureParamPresetValueWithoutKnobIsZeroWithMinimalDetails(const class Sound*, class ParamManager*, long int) (always inlined)",0,0,0,0,0,0
,0,"Sound::envelopeHasSustainCurrently(const class Sound*, long int, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
,0,"Sound::envelopeHasSustainEver(const class Sound*, long int, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
,0,"Sound::fastReleaseAllVoices(const class Sound*, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2519,"Sound::getArpBackInTimeAfterSkippingRendering(const class Sound*, class ArpeggiatorSettings*)",4,0,31,0,0,0
,0,"Sound::getArpBackInTimeAfterSkippingRendering(const class Sound*, class ArpeggiatorSettings*) (always inlined)",0,0,0,0,0,0
,0,"Sound::getGlobalLFOPhaseIncrement(const class Sound*) (always inlined)",0,0,0,0,0,0
,0,"Sound::getMaxOscTranspose(const class Sound*, class InstrumentClip*) (always inlined)",0,0,0,0,0,0
,0,"Sound::getMinOscTranspose(const class Sound*) (always inlined)",0,0,0,0,0,0
"sound.cpp",358,"Sound::getModFXType(const class Sound*)",1,0,2,0,0,0
"param_descriptor.h",43,"Sound::getParamFromMIDIKnob(const class Sound*, class MIDIKnob*, class ModelStackWithThreeMainThings*)",16,0,49,0,0,0
"sound.cpp",4225,"Sound::getParamFromModEncoder(const class Sound*, long int, class ModelStackWithThreeMainThings*, bool)",24,0,78,0,0,0
,0,"Sound::getParamFromModEncoder(const class Sound*, long int, class ModelStackWithThreeMainThings*, bool) (always inlined)",0,0,0,0,0,0
,0,"Sound::getParamFromModEncoderDeeper(const class Sound*, long int, class ModelStackWithThreeMainThings*, bool) (always inlined)",0,0,0,0,0,0
,0,"Sound::getSmoothedPatchedParamValue(const class Sound*, long int, class ParamManager*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2637,"Sound::getSyncedLFOPhaseIncrement(const class LFOConfig&, const class Sound*)",6,0,22,0,0,0
,0,"Sound::getSynthMode(const class Sound*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2087,"Sound::getThingWithMostReverb(const class Sound*, class Sound**, class ParamManager**, class GlobalEffectableForClip**, long int*, class ParamManagerForTimeline*)",11,0,34,0,0,0
"sound.cpp",1806,"Sound::hasAnyTimeStretchSyncing(const class Sound*, class ParamManagerForTimeline*, bool, long int)",5,0,47,0,0,0
,0,"Sound::hasAnyVoices(const class Sound*, bool) (always inlined)",0,0,0,0,0,0
"sound.cpp",1870,"Sound::hasCutModeSamples(const class Sound*, class ParamManagerForTimeline*)",5,0,38,0,0,0
,0,"Sound::hasCutOrLoopModeSamples(const class Sound*, class ParamManagerForTimeline*, long int, bool*) (always inlined)",0,0,0,0,0,0
,0,"Sound::hasFilters(const class Sound*) (always inlined)",0,0,0,0,0,0
"sound.cpp",160,"Sound::initParams(class ParamManager*)",10,0,88,0,0,0
"sound.cpp",1959,"Sound::isNoiseActiveEver(class ParamManagerForTimeline*, const class Sound*)",7,0,26,0,0,0
"sound.cpp",1938,"Sound::isSourceActiveCurrently(const class Sound*, long int, class ParamManagerForTimeline*)",6,0,46,0,0,0
"sound.cpp",1952,"Sound::isSourceActiveEver(const class Sound*, long int, class ParamManager*)",1,0,20,0,0,0
"sound.cpp",1945,"Sound::isSourceActiveEverDisregardingMissingSample(const class Sound*, long int, class ParamManager*)",9,0,46,0,0,0
"sound.cpp",2713,"Sound::learnKnob(const class Sound*, class MIDIDevice*, class ParamDescriptor, unsigned char, unsigned char, unsigned char, class Song*)",6,0,24,0,0,0
"sound.cpp",4142,"Sound::loadAllAudioFiles(const class Sound*, bool)",7,0,49,0,0,0
"sound.cpp",1351,"Sound::maySourcePatchToParam(const class Sound*, enum PatchSource, unsigned char, class ParamManager*)",28,0,183,0,0,0
"sound.cpp",4176,"Sound::modButtonAction(const class Sound*, unsigned char, bool, class ParamManagerForTimeline*)",14,0,79,0,0,0
"sound.cpp",4276,"Sound::modEncoderButtonAction(const class Sound*, unsigned char, bool, class ModelStackWithThreeMainThings*)",68,0,507,0,0,0
"sound.cpp",1701,"Sound::noteOffPostArpeggiator(const class Sound*, class ModelStackWithSoundFlags*, long int)",20,0,118,0,0,0
"sound.cpp",1516,"Sound::noteOn(const class Sound*, class ModelStackWithThreeMainThings*, class ArpeggiatorBase*, long int, const short int*, long unsigned int, long int, long unsigned int, long int, long int)",15,0,87,0,0,0
"sound.cpp",1563,"Sound::noteOnPostArpeggiator(const class Sound*, class ModelStackWithSoundFlags*, long int, long int, long int, const short int*, long unsigned int, long int, long unsigned int, long int)",161,0,866,0,0,0
,0,"Sound::notifyValueChangeViaLPF(const class Sound*, long int, bool, const class ModelStackWithThreeMainThings*, long int, long int, bool) (always inlined)",0,0,0,0,0,0
"sound.cpp",407,"Sound::patchedParamPresetValueChanged(const class Sound*, unsigned char, class ModelStackWithSoundFlags*, long int, long int)",5,0,22,0,0,0
,0,"Sound::patchedParamPresetValueChanged(const class Sound*, unsigned char, class ModelStackWithSoundFlags*, long int, long int) (always inlined)",0,0,0,0,0,0
"firmware_version.h",45,"Sound::possiblySetupDefaultExpressionPatching(const class Sound*, class ParamManager*)",10,0,86,0,0,0
,0,"Sound::possiblySetupDefaultExpressionPatching(const class Sound*, class ParamManager*) (always inlined)",0,0,0,0,0,0
"sound.cpp",4552,"Sound::prepareForHibernation(const class Sound*)",6,0,41,0,0,0
"sound.cpp",3105,"Sound::readFromFile(const class Sound*, class Deserializer&, class ModelStackWithModControllable*, long int, class ArpeggiatorSettings*)",548,0,3719,0,0,0
"sound.cpp",3094,"Sound::readParamsFromFile(class Deserializer&, class ParamManagerForTimeline*, long int)",166,0,1136,0,0,0
,0,"Sound::readParamTagFromFile(class Deserializer&, const char*, class ParamManagerForTimeline*, long int) (always inlined)",0,0,0,0,0,0
"sound.cpp",3218,"Sound::readSourceFromFile(const class Sound*, class Deserializer&, long int, class ParamManagerForTimeline*, long int)",153,0,1064,0,0,0
,0,"Sound::readTagFromFile(const class Sound*, class Deserializer&, const char*, class ParamManagerForTimeline*, long int, class ArpeggiatorSettings*, class Song*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2014,"Sound::reassessRenderSkippingStatus(const class Sound*, class ModelStackWithSoundFlags*, bool)",44,0,206,0,0,0
"sound.cpp",2977,"Sound::recalculateAllVoicePhaseIncrements(const class Sound*, class ModelStackWithSoundFlags*)",8,0,35,0,0,0
,0,"Sound::recalculateAllVoicePhaseIncrements(const class Sound*, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
,0,"Sound::recalculateModulatorTransposer(const class Sound*, unsigned char, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
"sound.cpp",429,"Sound::recalculatePatchingToParam(const class Sound*, unsigned char, class ParamManagerForTimeline*)",14,0,65,0,0,0
"sound.cpp",2195,"Sound::render(const class Sound*, class ModelStackWithThreeMainThings*, struct StereoSample*, long int, long int*, long int, long int, bool, long int)",183,0,3119,0,0,0
,0,"Sound::renderingOscillatorSyncCurrently(const class Sound*, class ParamManagerForTimeline*) (always inlined)",0,0,0,0,0,0
,0,"Sound::renderingOscillatorSyncEver(const class Sound*, class ParamManager*) (always inlined)",0,0,0,0,0,0
,0,"Sound::renderingVoicesInStereo(const class Sound*, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
"playback_handler.h",214,"Sound::resyncGlobalLFO(const class Sound*)",16,0,98,0,0,0
,0,"Sound::resyncGlobalLFO(const class Sound*) (always inlined)",0,0,0,0,0,0
,0,"Sound::sampleZoneChanged(const class Sound*, enum MarkerType, long int, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
"sound.h",263,"Sound::saturate(long int*, long unsigned int*, const class Sound*)",43,0,110,0,0,0
"sound.cpp",363,"Sound::setModFXType(const class Sound*, enum ModFXType)",21,0,90,0,0,0
,0,"Sound::setModulatorCents(const class Sound*, long int, long int, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
,0,"Sound::setModulatorTranspose(const class Sound*, long int, long int, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
,0,"Sound::setNumUnison(const class Sound*, long int, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2462,"Sound::setSkippingRendering(const class Sound*, bool)",1,0,2,0,0,0
,0,"Sound::setSkippingRendering(const class Sound*, bool) (always inlined)",0,0,0,0,0,0
,0,"Sound::setSynthMode(const class Sound*, enum SynthMode, class Song*) (always inlined)",0,0,0,0,0,0
,0,"Sound::setUnisonDetune(const class Sound*, long int, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
,0,"Sound::setUnisonStereoSpread(const class Sound*, long int) (always inlined)",0,0,0,0,0,0
,0,"Sound::setupAsBlankSynth(const class Sound*, class ParamManager*, bool) (always inlined)",0,0,0,0,0,0
,0,"Sound::setupAsDefaultSynth(const class Sound*, class ParamManager*) (always inlined)",0,0,0,0,0,0
"sound.cpp",221,"Sound::setupAsSample(const class Sound*, class ParamManagerForTimeline*)",15,0,66,0,0,0
"sound.cpp",304,"Sound::setupDefaultExpressionPatching(const class Sound*, class ParamManager*)",11,0,75,0,0,0
"sound.cpp",2878,"Sound::setupUnisonDetuners(const class Sound*, class ModelStackWithSoundFlags*)",7,0,39,0,0,0
"sound.cpp",2898,"Sound::setupUnisonStereoSpread(const class Sound*)",7,0,32,0,0,0
"sound.cpp",79,"Sound::Sound(const class Sound*)",43,0,134,0,0,0
,0,"Sound::startSkippingRendering(const class Sound*, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2179,"Sound::stopParamLPF(const class Sound*, class ModelStackWithSoundFlags*)",8,0,36,0,0,0
,0,"Sound::stopSkippingRendering(const class Sound*, class ArpeggiatorSettings*) (always inlined)",0,0,0,0,0,0
"sound.cpp",2536,"Sound::unassignAllVoices(const class Sound*)",13,0,71,0,0,0
"sound.cpp",2531,"Sound::unassignAllVoices(const class Sound*)",1,0,4,0,0,0
,0,"Sound::voiceUnassigned(const class Sound*, class ModelStackWithVoice*) (always inlined)",0,0,0,0,0,0
"sound.cpp",4558,"Sound::wontBeRenderedForAWhile(const class Sound*)",7,0,31,0,0,0
"sound.cpp",3878,"Sound::writeParamsToFile(class Serializer&, class ParamManager*, bool)",111,0,769,0,0,0
"sound.cpp",3481,"Sound::writeSourceToFile(const class Sound*, class Serializer&, long int, const char*)",71,0,483,0,0,0
"sound.cpp",3980,"Sound::writeToFile(const class Sound*, class Serializer&, bool, class ParamManager*, class ArpeggiatorSettings*, const char*)",84,0,590,0,0,0
,0,"Sound::~Sound(const class Sound*) (always inlined)",0,0,0,0,0,0
"sound_drum.cpp",71,"SoundDrum::allowNoteTails(const class SoundDrum*, class ModelStackWithSoundFlags*, bool)",1,0,1,0,0,0
"sound.cpp",3075,"SoundDrum::anyNoteIsOn(const class SoundDrum*)",2,0,23,0,0,0
"sound_drum.cpp",197,"SoundDrum::choke(const class SoundDrum*, class ModelStackWithSoundFlags*)",14,0,94,0,0,0
,0,"SoundDrum::choke(const class SoundDrum*, class ModelStackWithSoundFlags*) (always inlined)",0,0,0,0,0,0
"sound_drum.cpp",228,"SoundDrum::drumWontBeRenderedForAWhile(const class SoundDrum*)",1,0,1,0,0,0
"sound_drum.cpp",112,"SoundDrum::expressionEvent(const class SoundDrum*, long int, long int)",9,0,72,0,0,0
"sound_drum.cpp",232,"SoundDrum::getArp(const class SoundDrum*)",1,0,2,0,0,0
,0,"SoundDrum::getArp(const class SoundDrum*) (always inlined)",0,0,0,0,0,0
"sound_drum.h",65,"SoundDrum::getArpSettings(const class SoundDrum*, class InstrumentClip*)",1,0,2,0,0,0
"sound_drum.cpp",224,"SoundDrum::getModKnobMode(const class SoundDrum*)",1,0,3,0,0,0
"sound.cpp",2864,"SoundDrum::hasAnyVoices(const class SoundDrum*)",1,0,5,0,0,0
"sound_drum.cpp",151,"SoundDrum::loadAllSamples(const class SoundDrum*, bool)",1,0,1,0,0,0
"sound_drum.cpp",105,"SoundDrum::noteOff(const class SoundDrum*, class ModelStackWithThreeMainThings*, long int)",1,0,2,0,0,0
"sound_drum.cpp",97,"SoundDrum::noteOn(const class SoundDrum*, class ModelStackWithThreeMainThings*, unsigned char, class Kit*, const short int*, long int, long unsigned int, long int, long unsigned int)",4,0,37,0,0,0
"sound_drum.cpp",139,"SoundDrum::polyphonicExpressionEventOnChannelOrNote(const class SoundDrum*, long int, long int, long int, enum MIDICharacteristic)",1,0,1,0,0,0
"sound_drum.cpp",155,"SoundDrum::prepareForHibernation(const class SoundDrum*)",1,0,1,0,0,0
"sound_drum.cpp",189,"SoundDrum::readFromFile(const class SoundDrum*, class Deserializer&, class Song*, class Clip*, long int)",5,0,14,0,0,0
"sound_drum.cpp",53,"SoundDrum::readTagFromFile(const class SoundDrum*, class Deserializer&, const char*)",7,0,56,0,0,0
,0,"SoundDrum::resetTimeEnteredState(const class SoundDrum*) (always inlined)",0,0,0,0,0,0
"sound_drum.cpp",211,"SoundDrum::setSkippingRendering(const class SoundDrum*, bool)",5,0,20,0,0,0
"song.cpp",2606,"SoundDrum::setupPatchingForAllParamManagers(const class SoundDrum*, class Song*)",28,0,122,0,0,0
"sound_drum.cpp",35,"SoundDrum::SoundDrum(const class SoundDrum*)",8,0,33,0,0,0
"sound_drum.h",58,"SoundDrum::toModControllable(const class SoundDrum*)",1,0,1,0,0,0
"sound_drum.cpp",143,"SoundDrum::unassignAllVoices(const class SoundDrum*)",1,0,1,0,0,0
,0,"SoundDrum::unassignAllVoices(const class SoundDrum*) (always inlined)",0,0,0,0,0,0
"sound_drum.cpp",172,"SoundDrum::writeToFile(const class SoundDrum*, class Serializer&, bool, class ParamManager*)",7,0,52,0,0,0
,0,"SoundDrum::writeToFileAsInstrument(const class SoundDrum*, class StorageManager&, bool, class ParamManager*) (always inlined)",0,0,0,0,0,0
"sound_drum.h",27,"SoundDrum::~SoundDrum(const class SoundDrum*)",3,0,25,0,0,0
"sound_drum.h",27,"SoundDrum::~SoundDrum(const class SoundDrum*)",4,0,27,0,0,0
,0,"SoundDrum::~SoundDrum(const class SoundDrum*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",565,"SoundEditor::beginScreen(const class SoundEditor*, class MenuItem*)",49,0,314,0,0,0
"sound_editor.cpp",752,"SoundEditor::blinkShortcut(const class SoundEditor*)",13,0,81,0,0,0
"sound_editor.cpp",257,"SoundEditor::buttonAction(const class SoundEditor*, unsigned char, bool, bool)",76,0,479,0,0,0
"sound_editor.cpp",1584,"SoundEditor::checkPermissionToBeginSessionForRangeSpecificParam(class Sound*, long int, bool, class MultiRange**, const class SoundEditor*)",14,0,47,0,0,0
"sound_editor.cpp",1608,"SoundEditor::cutSound(const class SoundEditor*)",7,0,17,0,0,0
,0,"SoundEditor::cutSound(const class SoundEditor*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",1562,"SoundEditor::displayOrLanguageChanged(const class SoundEditor*)",1,0,6,0,0,0
"sound_editor.cpp",139,"SoundEditor::editingCVOrMIDIClip(const class SoundEditor*)",1,0,9,0,0,0
,0,"SoundEditor::editingKit(const class SoundEditor*) (always inlined)",0,0,0,0,0,0
,0,"SoundEditor::editingReverbSidechain(const class SoundEditor*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",1116,"SoundEditor::enterOrUpdateSoundEditor(const class SoundEditor*, bool)",13,0,57,0,0,0
"sound_editor.cpp",245,"SoundEditor::enterSubmenu(const class SoundEditor*, class MenuItem*)",4,0,19,0,0,0
"sound_editor.cpp",508,"SoundEditor::exitCompletely(const class SoundEditor*)",13,0,62,0,0,0
,0,"SoundEditor::findPatchedParam(const class SoundEditor*, long int, long int*, long int*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",195,"SoundEditor::focusRegained(const class SoundEditor*)",9,0,23,0,0,0
"song.cpp",66,"SoundEditor::getCurrentAudioFileHolder(const class SoundEditor*)",7,0,17,0,0,0
,0,"SoundEditor::getCurrentMenuItem(const class SoundEditor*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",1629,"SoundEditor::getCurrentModelStack(const class SoundEditor*, void*)",18,0,62,0,0,0
"sound_editor.cpp",145,"SoundEditor::getGreyoutColsAndRows(const class SoundEditor*, long unsigned int*, long unsigned int*)",10,1,30,3,15,45
"sound_editor.h",148,"SoundEditor::getUIType(const class SoundEditor*)",1,0,2,0,0,0
"sound_editor.cpp",487,"SoundEditor::goUpOneLevel(const class SoundEditor*)",9,0,40,0,0,0
,0,"SoundEditor::handleAutomationViewPadAction(const class SoundEditor*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",459,"SoundEditor::handlePotentialParamMenuChange(unsigned char, class MenuItem*, class MenuItem*, const class SoundEditor*, bool, bool)",14,0,65,0,0,0
"sound_editor.cpp",782,"SoundEditor::horizontalEncoderAction(const class SoundEditor*, long int)",5,0,26,0,0,0
"sound_editor.cpp",1562,"SoundEditor::isEditingAutomationViewParam(const class SoundEditor*)",8,0,48,0,0,0
"sound_editor.cpp",1573,"SoundEditor::isUntransposedNoteWithinRange(long int, const class SoundEditor*)",4,0,20,0,0,0
"sound_editor.cpp",1566,"SoundEditor::markInstrumentAsEdited(const class SoundEditor*)",4,0,15,0,0,0
,0,"SoundEditor::markInstrumentAsEdited(const class SoundEditor*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",1310,"SoundEditor::modEncoderAction(const class SoundEditor*, long int, long int)",7,0,45,0,0,0
"sound_editor.cpp",1337,"SoundEditor::modEncoderButtonAction(const class SoundEditor*, unsigned char, bool)",3,0,13,0,0,0
"sound_editor.cpp",1655,"SoundEditor::mpeZonesPotentiallyUpdated(const class SoundEditor*)",6,0,16,0,0,0
,0,"SoundEditor::mpeZonesPotentiallyUpdated(const class SoundEditor*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",1562,"SoundEditor::noteOnReceivedForMidiLearn(const class SoundEditor*, class MIDIDevice*, long int, long int, long int)",1,0,9,0,0,0
"sound_editor.cpp",175,"SoundEditor::opened(const class SoundEditor*)",5,0,16,0,0,0
"sound_editor.cpp",1145,"SoundEditor::padAction(const class SoundEditor*, long int, long int, long int)",34,0,184,0,0,0
"sound_editor.cpp",1277,"SoundEditor::pcReceivedForMidiLearn(const class SoundEditor*, class MIDIDevice*, long int, long int)",5,0,21,0,0,0
,0,"SoundEditor::pcReceivedForMidiLearn(const class SoundEditor*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",729,"SoundEditor::possibleChangeToCurrentRangeDisplay(const class SoundEditor*)",5,0,17,0,0,0
"sound_editor.cpp",873,"SoundEditor::potentialShortcutPadAction(const class SoundEditor*, long int, long int, bool)",73,0,452,0,0,0
"sound_editor.cpp",1667,"SoundEditor::renderOLED(const class SoundEditor*, unsigned char[128]*)",6,0,16,0,0,0
"sound_editor.cpp",793,"SoundEditor::scrollFinished(const class SoundEditor*)",2,0,8,0,0,0
"sound_editor.cpp",802,"SoundEditor::selectEncoderAction(const class SoundEditor*, signed char)",21,0,106,0,0,0
"sound_editor.cpp",1579,"SoundEditor::setCurrentMultiRange(long int, const class SoundEditor*)",4,0,10,0,0,0
"sound_editor.cpp",223,"SoundEditor::setLedStates(const class SoundEditor*)",9,0,83,0,0,0
,0,"SoundEditor::setShortcutsVersion(const class SoundEditor*, long int) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",1357,"SoundEditor::setup(const class SoundEditor*, class Clip*, const class MenuItem*, long int)",76,0,381,0,0,0
,0,"SoundEditor::setupExclusiveShortcutBlink(const class SoundEditor*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"SoundEditor::setupShortcutBlink(const class SoundEditor*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",1562,"SoundEditor::timerCallback(const class SoundEditor*)",1,0,6,0,0,0
"sound_editor.cpp",552,"SoundEditor::updateSourceBlinks(const class SoundEditor*, class MenuItem*)",4,0,24,0,0,0
"buttons.cpp",261,"SoundEditor::verticalEncoderAction(const class SoundEditor*, long int, bool)",2,0,21,0,0,0
"sound_instrument.cpp",426,"SoundInstrument::beenEdited(const class SoundInstrument*, bool)",7,0,15,0,0,0
"sound_instrument.cpp",417,"SoundInstrument::compensateInstrumentVolumeForResonance(const class SoundInstrument*, class ModelStackWithThreeMainThings*)",1,0,1,0,0,0
"sound_instrument.cpp",87,"SoundInstrument::cutAllSound(const class SoundInstrument*)",1,0,1,0,0,0
"sound_instrument.cpp",307,"SoundInstrument::deleteBackedUpParamManagers(const class SoundInstrument*, class Song*)",1,0,4,0,0,0
"sound_instrument.cpp",434,"SoundInstrument::doTickForwardForArp(const class SoundInstrument*, class ModelStack*, long int)",15,0,95,0,0,0
"sound_instrument.cpp",483,"SoundInstrument::getArp(const class SoundInstrument*)",1,0,2,0,0,0
"melodic_instrument.cpp",641,"SoundInstrument::getArpSettings(const class SoundInstrument*, class InstrumentClip*)",4,0,7,0,0,0
,0,"SoundInstrument::getArpSettings(const class SoundInstrument*, class InstrumentClip*) (always inlined)",0,0,0,0,0,0
"sound_instrument.h",81,"SoundInstrument::getModKnobMode(const class SoundInstrument*)",1,0,2,0,0,0
"sound_instrument.cpp",476,"SoundInstrument::getThingWithMostReverb(const class SoundInstrument*, class Sound**, class ParamManager**, class GlobalEffectableForClip**, long int*)",2,0,10,0,0,0
"sound_instrument.h",83,"SoundInstrument::getXMLTag(const class SoundInstrument*)",1,0,3,0,0,0
"sound_instrument.h",73,"SoundInstrument::isSkippingRendering(const class SoundInstrument*)",1,0,2,0,0,0
"sound_instrument.cpp",198,"SoundInstrument::loadAllAudioFiles(const class SoundInstrument*, bool)",5,0,26,0,0,0
"sound_instrument.cpp",421,"SoundInstrument::loadCrucialAudioFilesOnly(const class SoundInstrument*)",1,0,2,0,0,0
"sound_instrument.cpp",313,"SoundInstrument::monophonicExpressionEvent(const class SoundInstrument*, long int, long int)",2,0,8,0,0,0
,0,"SoundInstrument::noteIsOn(const class SoundInstrument*, long int, bool) (always inlined)",0,0,0,0,0,0
"sound_instrument.h",45,"SoundInstrument::offerReceivedCCToLearnedParams(const class SoundInstrument*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*)",1,0,11,0,0,0
"sound_instrument.h",49,"SoundInstrument::offerReceivedPitchBendToLearnedParams(const class SoundInstrument*, class MIDIDevice*, unsigned char, unsigned char, unsigned char, class ModelStackWithTimelineCounter*)",1,0,5,0,0,0
"sound_instrument.cpp",324,"SoundInstrument::polyphonicExpressionEventOnChannelOrNote(const class SoundInstrument*, long int, long int, long int, enum MIDICharacteristic)",20,0,146,0,0,0
"sound_instrument.cpp",299,"SoundInstrument::prepareForHibernationOrDeletion(const class SoundInstrument*)",1,0,1,0,0,0
"sound_instrument.cpp",80,"SoundInstrument::readFromFile(const class SoundInstrument*, class Deserializer&, class Song*, class Clip*, long int)",5,0,14,0,0,0
"sound_instrument.cpp",413,"SoundInstrument::readTagFromFile(const class SoundInstrument*, class Deserializer&, const char*)",1,0,2,0,0,0
"sound_instrument.cpp",94,"SoundInstrument::renderOutput(const class SoundInstrument*, class ModelStack*, struct StereoSample*, struct StereoSample*, long int, long int*, long int, long int, bool, bool)",24,7,99,28,7,203
"sound_instrument.cpp",217,"SoundInstrument::resyncLFOs(const class SoundInstrument*)",1,0,1,0,0,0
"sound_instrument.cpp",373,"SoundInstrument::sendNote(const class SoundInstrument*, class ModelStackWithThreeMainThings*, bool, long int, const short int*, long int, unsigned char, long unsigned int, long int, long unsigned int)",14,0,57,0,0,0
,0,"SoundInstrument::sendNote(const class SoundInstrument*, class ModelStackWithThreeMainThings*, bool, long int, const short int*, long int, unsigned char, long unsigned int, long int, long unsigned int) (always inlined)",0,0,0,0,0,0
"sound_instrument.cpp",250,"SoundInstrument::setActiveClip(const class SoundInstrument*, class ModelStackWithTimelineCounter*, enum PgmChangeSend)",15,0,54,0,0,0
,0,"SoundInstrument::setActiveClip(const class SoundInstrument*, class ModelStackWithTimelineCounter*, enum PgmChangeSend) (always inlined)",0,0,0,0,0,0
"sound_instrument.cpp",226,"SoundInstrument::setupPatching(const class SoundInstrument*, class ModelStackWithTimelineCounter*)",11,0,30,0,0,0
"sound_instrument.cpp",303,"SoundInstrument::setupPatchingForAllParamManagers(const class SoundInstrument*, class Song*)",17,0,57,0,0,0
"sound_instrument.cpp",276,"SoundInstrument::setupWithoutActiveClip(const class SoundInstrument*, class ModelStack*)",9,0,35,0,0,0
"sound_instrument.cpp",38,"SoundInstrument::SoundInstrument(const class SoundInstrument*)",3,0,24,0,0,0
"sound_instrument.cpp",221,"SoundInstrument::toModControllable(const class SoundInstrument*)",1,0,1,0,0,0
"sound_instrument.cpp",45,"SoundInstrument::writeDataToFile(const class SoundInstrument*, class Serializer&, class Clip*, class Song*)",8,0,42,0,0,0
"sound_instrument.h",30,"SoundInstrument::~SoundInstrument(const class SoundInstrument*)",7,0,40,0,0,0
"sound_instrument.h",30,"SoundInstrument::~SoundInstrument(const class SoundInstrument*)",7,0,38,0,0,0
,0,"SoundInstrument::~SoundInstrument(const class SoundInstrument*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Source::destructAllMultiRanges(const class Source*)",3,0,20,0,0,0
,0,"Source::detachAllAudioFiles(const class Source*) (always inlined)",0,0,0,0,0,0
,0,"Source::doneReadingFromFile(const class Source*, class Sound*) (always inlined)",0,0,0,0,0,0
"source.cpp",290,"Source::ensureDxPatch(const class Source*)",3,0,9,0,0,0
"source.cpp",65,"Source::getLengthInSamplesAtSystemSampleRate(const class Source*, long int, bool)",3,0,12,0,0,0
"resizeable_array.h",56,"Source::getOrCreateFirstRange(const class Source*)",6,0,12,0,0,0
,0,"Source::getOrCreateFirstRange(const class Source*) (always inlined)",0,0,0,0,0,0
"source.cpp",139,"Source::getRange(const class Source*, long int)",9,0,29,0,0,0
,0,"Source::getRangeIndex(const class Source*, long int) (always inlined)",0,0,0,0,0,0
,0,"Source::hasAnyLoopEndPoint(const class Source*) (always inlined)",0,0,0,0,0,0
"resizeable_array.h",56,"Source::hasAtLeastOneAudioFileLoaded(const class Source*)",2,0,27,0,0,0
,0,"Source::loadAllSamples(const class Source*, bool) (always inlined)",0,0,0,0,0,0
,0,"Source::recalculateFineTuner(const class Source*) (always inlined)",0,0,0,0,0,0
"source.cpp",83,"Source::renderInStereo(class Sound*, class SampleHolder*, const class Source*)",8,0,38,0,0,0
,0,"Source::setCents(const class Source*, long int) (always inlined)",0,0,0,0,0,0
"source.cpp",247,"Source::setOscType(const class Source*, enum OscType)",33,0,160,0,0,0
"source.cpp",125,"Source::setReversed(const class Source*, bool)",8,0,40,0,0,0
,0,"Source::Source(const class Source*) (always inlined)",0,0,0,0,0,0
,0,"Source::~Source(const class Source*) (always inlined)",0,0,0,0,0,0
"source_selection.cpp",134,"SourceSelection::beginSession(const class SourceSelection*, class MenuItem*)",18,0,108,0,0,0
"source_selection.cpp",45,"SourceSelection::drawPixelsForOled(const class SourceSelection*)",13,0,69,0,0,0
"source_selection.cpp",82,"SourceSelection::drawValue(const class SourceSelection*)",6,0,62,0,0,0
"source_selection.cpp",265,"SourceSelection::getIndexOfPatchedParamToBlink(const class SourceSelection*)",1,0,4,0,0,0
"display.h",92,"SourceSelection::readValueAgain(const class SourceSelection*)",3,0,9,0,0,0
"source_selection.cpp",190,"SourceSelection::selectEncoderAction(const class SourceSelection*, long int)",12,0,65,0,0,0
"source_selection.cpp",269,"SourceSelection::shouldBlinkPatchingSourceShortcut(const class SourceSelection*, enum PatchSource, unsigned char*)",2,0,31,0,0,0
,0,"SourceSelection::shouldDrawDotOnValue(const class SourceSelection*) (always inlined)",0,0,0,0,0,0
"source_selection.cpp",225,"SourceSelection::sourceIsAllowed(const class SourceSelection*, enum PatchSource)",7,0,49,0,0,0
,0,"sourceToString(enum PatchSource) (always inlined)",0,0,0,0,0,0
,0,"sourceToStringShort(enum PatchSource) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::begin(const class span<long int, 4294967295>*) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span(const class span<long int, 4294967295>*) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1139>(const class span<long int, 4294967295>*, struct array<long int, 1139>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1188>(const class span<long int, 4294967295>*, struct array<long int, 1188>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1211>(const class span<long int, 4294967295>*, struct array<long int, 1211>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1277>(const class span<long int, 4294967295>*, struct array<long int, 1277>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1300>(const class span<long int, 4294967295>*, struct array<long int, 1300>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1356>(const class span<long int, 4294967295>*, struct array<long int, 1356>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1379>(const class span<long int, 4294967295>*, struct array<long int, 1379>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1422>(const class span<long int, 4294967295>*, struct array<long int, 1422>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1445>(const class span<long int, 4294967295>*, struct array<long int, 1445>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1491>(const class span<long int, 4294967295>*, struct array<long int, 1491>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1514>(const class span<long int, 4294967295>*, struct array<long int, 1514>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1557>(const class span<long int, 4294967295>*, struct array<long int, 1557>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1580>(const class span<long int, 4294967295>*, struct array<long int, 1580>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1617>(const class span<long int, 4294967295>*, struct array<long int, 1617>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 1640>(const class span<long int, 4294967295>*, struct array<long int, 1640>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 225>(const class span<long int, 4294967295>*, struct array<long int, 225>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 248>(const class span<long int, 4294967295>*, struct array<long int, 248>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 341>(const class span<long int, 4294967295>*, struct array<long int, 341>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 364>(const class span<long int, 4294967295>*, struct array<long int, 364>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 441>(const class span<long int, 4294967295>*, struct array<long int, 441>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 464>(const class span<long int, 4294967295>*, struct array<long int, 464>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 556>(const class span<long int, 4294967295>*, struct array<long int, 556>&) (always inlined)",0,0,0,0,0,0
,0,"span<long int, 4294967295>::span<long int, 579>(const class span<long int, 4294967295>*, struct array<long int, 579>&) (always inlined)",0,0,0,0,0,0
,0,"span<MenuItem*, 4294967295>::span<MenuItem**>(const class span<MenuItem*, 4294967295>*, class MenuItem**, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"span<MenuItem*, 4294967295>::span<MenuItem*, 3>(const class span<MenuItem*, 4294967295>*, struct array<MenuItem*, 3>&) (always inlined)",0,0,0,0,0,0
,0,"span<MenuItem*, 4294967295>::span<MenuItem*, 5>(const class span<MenuItem*, 4294967295>*, struct array<MenuItem*, 5>&) (always inlined)",0,0,0,0,0,0
,0,"span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>::span<deluge::static_vector<std::basic_string_view<char>, 11>&>(const class span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>*, struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 11>&) (always inlined)",0,0,0,0,0,0
,0,"span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>::span<deluge::static_vector<std::basic_string_view<char>, 32>&>(const class span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>*, struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 32>&) (always inlined)",0,0,0,0,0,0
,0,"span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>::span<deluge::static_vector<std::basic_string_view<char>, 3>&>(const class span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>*, struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>&) (always inlined)",0,0,0,0,0,0
,0,"span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>::span<deluge::static_vector<std::basic_string_view<char>, 7>&>(const class span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>*, struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 7>&) (always inlined)",0,0,0,0,0,0
,0,"span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>::span<std::basic_string_view<char>*>(const class span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>*, class basic_string_view<char, std::char_traits<char> >*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>::span<std::vector<std::basic_string_view<char>, deluge::memory::fallback_allocator<std::basic_string_view<char> > >&>(const class span<std::basic_string_view<char, std::char_traits<char> >, 4294967295>*, class vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >&) (always inlined)",0,0,0,0,0,0
,0,"span<StereoSample, 4294967295>::span<StereoSample*>(const class span<StereoSample, 4294967295>*, struct StereoSample*, unsigned int) (always inlined)",0,0,0,0,0,0
,0,"SpecificFilter::SpecificFilter(const class SpecificFilter*, enum FilterMode) (always inlined)",0,0,0,0,0,0
"rza_io_regrw.c",199,"spibsc_bsz_set(unsigned char, long unsigned int, long unsigned int)",9,0,18,0,0,0
,0,"spibsc_common_init(long unsigned int, long unsigned int, unsigned char, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"spibsc_dr_init(long unsigned int, struct st_spibsc_cfg_t*) (always inlined)",0,0,0,0,0,0
"spibsc_ioset_api.c",302,"SPIBSC_Exread_Mode_Config(struct st_spibsc_cfg_t*, long unsigned int)",6,0,32,0,0,0
"spibsc_ioset_drv.c",373,"spibsc_transfer(struct st_spibsc_spimd_reg_t*, long unsigned int)",36,0,216,0,0,0
,0,"spibsc_wait_tend(long unsigned int) (always inlined)",0,0,0,0,0,0
"printf.c",894,"sprintf_(char*, const char*)",3,0,12,0,0,0
,0,"sqrt(float) (always inlined)",0,0,0,0,0,0
,0,"sqrtf",0,0,20,0,0,0
,0,"ssiInit(unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"ssiInit2(const long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"ssiStart(const long unsigned int) (always inlined)",0,0,0,0,0,0
"ff.c",663,"st_clust(struct FATFS*, unsigned char*, long unsigned int)",3,0,11,0,0,0
,0,"st_clust(struct FATFS*, unsigned char*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"st_dword(unsigned char*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"st_word(unsigned char*, short unsigned int) (always inlined)",0,0,0,0,0,0
"start.h",21,"Start::~Start(const class Start*)",2,0,6,0,0,0
"menu_item.h",54,"Start::~Start(const class Start*)",1,0,1,0,0,0
,0,"startTaskManager() (always inlined)",0,0,0,0,0,0
"startup_song_mode.h",31,"StartupSongModeMenu::getOptions(const class StartupSongModeMenu*)",4,0,56,0,0,0
"startup_song_mode.h",28,"StartupSongModeMenu::readCurrentValue(const class StartupSongModeMenu*)",2,0,5,0,0,0
,0,"StartupSongModeMenu::StartupSongModeMenu(const class StartupSongModeMenu*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",45,"StartupSongModeMenu::writeCurrentValue(const class StartupSongModeMenu*)",1,0,5,0,0,0
"startup_song_mode.h",25,"StartupSongModeMenu::~StartupSongModeMenu(const class StartupSongModeMenu*)",2,0,6,0,0,0
"menu_item.h",54,"StartupSongModeMenu::~StartupSongModeMenu(const class StartupSongModeMenu*)",1,0,1,0,0,0
,0,"State::State(const struct State*) (always inlined)",0,0,0,0,0,0
,0,"static_vector<std::basic_string_view<char, std::char_traits<char> >, 32>::push_back<char (&)[11]>(const struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 32>*, char[11]&) (always inlined)",0,0,0,0,0,0
,0,"static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>::insert<std::basic_string_view<char>*>(const struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>*, const class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*, class basic_string_view<char, std::char_traits<char> >*) (always inlined)",0,0,0,0,0,0
,0,"static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>::push_back<char (&)[20]>(const struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>*, char[20]&) (always inlined)",0,0,0,0,0,0
,0,"static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>::push_back<char const*>(const struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>*, const char*) (always inlined)",0,0,0,0,0,0
,0,"static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>::push_back<std::basic_string_view<char> >(const struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>*, class basic_string_view<char, std::char_traits<char> >) (always inlined)",0,0,0,0,0,0
,0,"static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>::static_vector<char const*>(const struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 3>*, class initializer_list<char const*>) (always inlined)",0,0,0,0,0,0
,0,"static_vector<std::basic_string_view<char, std::char_traits<char> >, 7>::push_back<char const*&>(const struct static_vector<std::basic_string_view<char, std::char_traits<char> >, 7>*, const char*&) (always inlined)",0,0,0,0,0,0
"status.h",35,"Status::getOptions(const class Status*)",4,0,51,0,0,0
"status.h",26,"Status::readCurrentValue(const class Status*)",2,0,5,0,0,0
,0,"Status::Status(const class Status*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"status.h",28,"Status::writeCurrentValue(const class Status*)",3,0,15,0,0,0
"status.h",23,"Status::~Status(const class Status*)",2,0,6,0,0,0
"menu_item.h",54,"Status::~Status(const class Status*)",1,0,1,0,0,0
,0,"STB_Init() (always inlined)",0,0,0,0,0,0
,0,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold",0,0,53,0,0,0
,0,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy",0,0,9,0,0,0
,0,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move",0,0,11,0,0,0
,0,"std::__throw_bad_alloc",0,0,2,0,0,0
,0,"std::__throw_bad_function_call",0,0,2,0,0,0
,0,"std::__throw_length_error",0,0,2,0,0,0
,0,"std::__throw_out_of_range_fmt",0,0,3,0,0,0
,0,"std::char_traits<char>::copy",0,0,3,0,0,0
,0,"Stealable::Stealable(const class Stealable*) (always inlined)",0,0,0,0,0,0
,0,"Stealable::~Stealable(const class Stealable*) (always inlined)",0,0,0,0,0,0
,0,"StereoSample::addMono(const struct StereoSample*, long int) (always inlined)",0,0,0,0,0,0
,0,"StereoSample::addPannedMono(const struct StereoSample*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"StereoSample::addPannedStereo(const struct StereoSample*, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"StereoSample::addStereo(const struct StereoSample*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"StereoSample::operator+=(const struct StereoSample*, const struct StereoSample&) (always inlined)",0,0,0,0,0,0
,0,"StereoSample::StereoSample(const struct StereoSample*) (always inlined)",0,0,0,0,0,0
"stereoSpread.h",26,"StereoSpread::readCurrentValue(const class StereoSpread*)",2,0,6,0,0,0
,0,"StereoSpread::StereoSpread(const class StereoSpread*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"stereoSpread.h",27,"StereoSpread::writeCurrentValue(const class StereoSpread*)",3,0,6,0,0,0
"stereoSpread.h",23,"StereoSpread::~StereoSpread(const class StereoSpread*)",2,0,6,0,0,0
"menu_item.h",54,"StereoSpread::~StereoSpread(const class StereoSpread*)",1,0,1,0,0,0
"sound_drum.cpp",143,"stopAnyPreviewing()",5,0,23,0,0,0
,0,"stopBlinkingKnobIndicator(long int) (always inlined)",0,0,0,0,0,0
,0,"stopLedBlinking(enum LED, bool) (always inlined)",0,0,0,0,0,0
,0,"StorageManager::checkSDInitialized(const class StorageManager*) (always inlined)",0,0,0,0,0,0
,0,"StorageManager::checkSDPresent(const class StorageManager*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",79,"StorageManager::checkSpaceOnCard(const class StorageManager*)",4,0,22,0,0,0
"storage_manager.cpp",229,"StorageManager::closeFile(const class StorageManager*)",2,0,6,0,0,0
"storage_manager.cpp",225,"StorageManager::closeFile(const class StorageManager*)",2,0,7,0,0,0
,0,"StorageManager::closeFile(const class StorageManager*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",89,"StorageManager::createFile(const class StorageManager*, const char*, bool)",28,0,149,0,0,0
"storage_manager.cpp",550,"StorageManager::createNewDrum(enum DrumType, const class StorageManager*)",17,0,61,0,0,0
"storage_manager.cpp",468,"StorageManager::createNewInstrument(enum OutputType, class ParamManager*, const class StorageManager*)",23,0,62,0,0,0
"storage_manager.cpp",528,"StorageManager::createNewNonAudioInstrument(enum OutputType, long int, long int, const class StorageManager*)",11,0,38,0,0,0
"storage_manager.cpp",170,"StorageManager::createXMLFile(const class StorageManager*, const char*, bool, bool, class XMLSerializer&)",17,0,58,0,0,0
"storage_manager.cpp",205,"StorageManager::fileExists(const char*, struct FilePointer*, const class StorageManager*)",10,0,26,0,0,0
"storage_manager.cpp",195,"StorageManager::fileExists(const class StorageManager*, const char*)",4,0,13,0,0,0
,0,"StorageManager::fileExists(const class StorageManager*, const char*) (always inlined)",0,0,0,0,0,0
"diskio.c",97,"StorageManager::initSD(const class StorageManager*)",5,0,56,0,0,0
"storage_manager.cpp",319,"StorageManager::loadInstrumentFromFile(class Song*, class InstrumentClip*, enum OutputType, class Instrument**, struct FilePointer*, class String*, class String*, bool, const class StorageManager*)",59,0,344,0,0,0
,0,"StorageManager::loadSynthToDrum(const class StorageManager*, class Song*, class InstrumentClip*, bool, class SoundDrum**, struct FilePointer*, class String*, class String*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",271,"StorageManager::openFilePointer(struct FilePointer*, const class StorageManager*)",12,0,34,0,0,0
,0,"StorageManager::openInstrumentFile(const class StorageManager*, enum OutputType, struct FilePointer*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",1685,"StorageManager::openXMLFile(const class StorageManager*, struct FilePointer*, const char*, const char*, bool, class XMLDeserializer&)",17,0,57,0,0,0
"storage_manager.cpp",76,"StorageManager::~StorageManager(const class StorageManager*)",1,0,6,0,0,0
"storage_manager.cpp",77,"StorageManager::~StorageManager(const class StorageManager*)",1,0,1,0,0,0
,0,"strcasecmp",0,0,22,0,0,0
,0,"strcasestr",0,0,37,0,0,0
,0,"strchr",0,0,12,0,0,0
"c_lib_alternatives.S",790,"strcmp",190,0,219,0,0,0
,0,"strcmp()",190,0,219,0,0,0
"functions.cpp",1637,"strcmpspecial(const char*, const char*)",45,0,206,0,0,0
,0,"strcpy",0,0,6,0,0,0
,0,"String::beenCloned(const class String*) (always inlined)",0,0,0,0,0,0
"d_string.cpp",40,"String::clear(const class String*, bool)",6,0,18,0,0,0
"d_string.cpp",191,"String::concatenate(const class String*, class String*)",4,0,14,0,0,0
"d_string.cpp",200,"String::concatenate(const class String*, const char*)",3,0,13,0,0,0
"d_string.cpp",204,"String::concatenateAtPos(const class String*, const char*, long int, long int)",26,0,150,0,0,0
,0,"String::concatenateAtPos(const class String*, const char*, long int, long int) (always inlined)",0,0,0,0,0,0
"d_string.cpp",278,"String::concatenateInt(const class String*, long int, long int)",2,0,11,0,0,0
,0,"String::contains(const class String*, const char*) (always inlined)",0,0,0,0,0,0
"d_string.cpp",315,"String::equals(const char*, const class String*)",4,0,10,0,0,0
,0,"String::equals(const class String*, class String*) (always inlined)",0,0,0,0,0,0
,0,"String::equalsCaseIrrespective(const class String*, class String*) (always inlined)",0,0,0,0,0,0
"d_string.h",88,"String::equalsCaseIrrespective(const class String*, const char*)",1,0,12,0,0,0
"d_string.cpp",154,"String::getLength(const class String*)",2,0,4,0,0,0
,0,"String::getLength(const class String*) (always inlined)",0,0,0,0,0,0
,0,"String::getNumReasons(const class String*) (always inlined)",0,0,0,0,0,0
"d_string.cpp",57,"String::set(const class String*, const char*, long int)",20,0,117,0,0,0
"d_string.cpp",126,"String::set(const class String*, const class String*)",12,0,59,0,0,0
,0,"String::setChar(const class String*, char, long int) (always inlined)",0,0,0,0,0,0
"d_string.cpp",284,"String::setInt(const class String*, long int, long int)",2,0,12,0,0,0
,0,"String::setNumReasons(const class String*, long int) (always inlined)",0,0,0,0,0,0
"d_string.cpp",161,"String::shorten(const class String*, long int)",12,0,44,0,0,0
,0,"String::String(const class String*) (always inlined)",0,0,0,0,0,0
"d_string.cpp",28,"String::~String(const class String*)",1,0,6,0,0,0
,0,"StringBuf::append(const class StringBuf*, const char*) (always inlined)",0,0,0,0,0,0
,0,"StringBuf::appendInt(const class StringBuf*, int, int) (always inlined)",0,0,0,0,0,0
,0,"StringBuf::StringBuf(const class StringBuf*, char*, unsigned int) (always inlined)",0,0,0,0,0,0
"functions.cpp",548,"stringIsNumericChars(const char*)",3,0,17,0,0,0
,0,"stringToArpMode(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",1146,"stringToArpMpeModSource(const char*)",2,0,13,0,0,0
"functions.cpp",1078,"stringToArpNoteMode(const char*)",4,0,30,0,0,0
"functions.cpp",1115,"stringToArpOctaveMode(const char*)",4,0,30,0,0,0
,0,"stringToFilterRoute(const char*) (always inlined)",0,0,0,0,0,0
,0,"stringToFilterType(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",875,"stringToFXType(const char*)",5,0,38,0,0,0
,0,"stringToFXType(const char*) (always inlined)",0,0,0,0,0,0
,0,"stringToInputChannel(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",595,"stringToInt(const char* restrict)",8,0,35,0,0,0
,0,"stringToLaunchStyle(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",765,"stringToLFOType(const char*)",5,0,36,0,0,0
,0,"stringToLFOType(const char*) (always inlined)",0,0,0,0,0,0
"filter_config.cpp",32,"stringToLPFType(const char*)",2,0,27,0,0,0
,0,"stringToModFXParam(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",1022,"stringToOldArpMode(const char*)",4,0,35,0,0,0
,0,"stringToOldArpMode(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",704,"stringToOscType(const char*)",11,0,82,0,0,0
,0,"stringToOscType(const char*) (always inlined)",0,0,0,0,0,0
,0,"stringToPolyphonyMode(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",1227,"stringToSequenceDirectionMode(const char*)",3,0,24,0,0,0
,0,"stringToSequenceDirectionMode(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",350,"stringToSource(const char*)",2,0,16,0,0,0
,0,"stringToSynthMode(const char*) (always inlined)",0,0,0,0,0,0
"functions.cpp",621,"stringToUIntOrError(const char* restrict)",4,0,18,0,0,0
,0,"strlen",0,0,7,0,0,0
,0,"strncasecmp",0,0,26,0,0,0
,0,"strncat",0,0,17,0,0,0
,0,"strncpy",0,0,16,0,0,0
,0,"strrchr",0,0,18,0,0,0
,0,"strstr",0,0,20,0,0,0
,0,"Stutterer::Stutterer(const struct Stutterer*) (always inlined)",0,0,0,0,0,0
,0,"Stutterer::~Stutterer(const struct Stutterer*) (always inlined)",0,0,0,0,0,0
"sub.h",24,"Sub::readCurrentValue(const class Sub*)",2,0,6,0,0,0
,0,"Sub::Sub(const class Sub*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"sub.h",26,"Sub::writeCurrentValue(const class Sub*)",4,0,12,0,0,0
"sub.h",21,"Sub::~Sub(const class Sub*)",2,0,6,0,0,0
"menu_item.h",54,"Sub::~Sub(const class Sub*)",1,0,1,0,0,0
"sound_editor.cpp",1561,"Submenu::allowsLearnMode(const class Submenu*)",2,0,14,0,0,0
,0,"Submenu::allowsLearnMode(const class Submenu*) (always inlined)",0,0,0,0,0,0
"submenu.cpp",6,"Submenu::beginSession(const class Submenu*, class MenuItem*)",13,0,67,0,0,0
"submenu.cpp",44,"Submenu::drawPixelsForOled(const class Submenu*)",22,0,171,0,0,0
"basic_string.h",222,"Submenu::getTitle(const class Submenu*)",2,0,5,0,0,0
"submenu.cpp",141,"Submenu::learnKnob(const class Submenu*, class MIDIDevice*, long int, long int, long int)",3,0,19,0,0,0
,0,"Submenu::learnKnob(const class Submenu*, class MIDIDevice*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"submenu.cpp",152,"Submenu::learnNoteOn(const class Submenu*, class MIDIDevice*, long int, long int)",3,0,18,0,0,0
"submenu.cpp",146,"Submenu::learnProgramChange(const class Submenu*, class MIDIDevice*, long int, long int)",3,0,17,0,0,0
,0,"Submenu::learnProgramChange(const class Submenu*, class MIDIDevice*, long int, long int) (always inlined)",0,0,0,0,0,0
"submenu.h",44,"Submenu::readValueAgain(const class Submenu*)",1,0,1,0,0,0
"stl_iterator.h",1099,"Submenu::selectButtonPress(const class Submenu*)",1,0,3,0,0,0
"submenu.cpp",76,"Submenu::selectEncoderAction(const class Submenu*, long int)",16,0,66,0,0,0
"submenu.h",31,"Submenu::Submenu(const class Submenu*, enum String, class initializer_list<MenuItem*>)",5,0,22,0,0,0
,0,"Submenu::Submenu(const class Submenu*, enum String, class initializer_list<MenuItem*>) (always inlined)",0,0,0,0,0,0
"submenu.h",32,"Submenu::Submenu(const class Submenu*, enum String, class span<MenuItem*, 4294967295>)",7,0,22,0,0,0
"submenu.h",34,"Submenu::Submenu(const class Submenu*, enum String, enum String, class initializer_list<MenuItem*>)",6,0,19,0,0,0
"sound_editor.cpp",1561,"Submenu::unlearnAction(const class Submenu*)",2,0,13,0,0,0
,0,"Submenu::unlearnAction(const class Submenu*) (always inlined)",0,0,0,0,0,0
"display.h",92,"Submenu::updateDisplay(const class Submenu*)",3,0,11,0,0,0
,0,"Submenu::updateDisplay(const class Submenu*) (always inlined)",0,0,0,0,0,0
"submenu.h",29,"Submenu::~Submenu(const class Submenu*)",6,0,28,0,0,0
"submenu.h",29,"Submenu::~Submenu(const class Submenu*)",6,0,25,0,0,0
"submenu.h",9,"Submenu::~Submenu(const class Submenu*)",11,0,38,0,0,0
"submenu.h",9,"Submenu::~Submenu(const class Submenu*)",9,0,35,0,0,0
,0,"Submenu::~Submenu(const class Submenu*) (always inlined)",0,0,0,0,0,0
,0,"SubmenuReferringToOneThing::SubmenuReferringToOneThing(const class SubmenuReferringToOneThing*, enum String, class span<MenuItem*, 4294967295>, long int) (always inlined)",0,0,0,0,0,0
,0,"SubmenuReferringToOneThing::~SubmenuReferringToOneThing(const class SubmenuReferringToOneThing*) (always inlined)",0,0,0,0,0,0
,0,"subtract(float[2], float[2]) (always inlined)",0,0,0,0,0,0
,0,"sum_sfn(const unsigned char*) (always inlined)",0,0,0,0,0,0
"svf.cpp",21,"SVFilter::doFilter(const class SVFilter*, long int*, long int*, long int)",14,0,75,0,0,0
"svf.cpp",30,"SVFilter::doFilterStereo(const class SVFilter*, long int*, long int*)",18,0,138,0,0,0
,0,"SVFilter::doSVF(const class SVFilter*, long int, struct SVFState&) (always inlined)",0,0,0,0,0,0
"svf.cpp",42,"SVFilter::setConfig(const class SVFilter*, long int, long int, enum FilterMode, long int, long int)",15,0,64,0,0,0
,0,"swap<SortedTask>(struct SortedTask&, struct SortedTask&) (always inlined)",0,0,0,0,0,0
,0,"swap<std::basic_string_view<char> >(class basic_string_view<char, std::char_traits<char> >&, class basic_string_view<char, std::char_traits<char> >&) (always inlined)",0,0,0,0,0,0
"display.cpp",86,"swapDisplayType()",15,0,55,0,0,0
,0,"swapEndianness2x16(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"swapEndianness32(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"swapOutRootUILowLevel(class UI*) (always inlined)",0,0,0,0,0,0
"sound_editor.cpp",779,"Sync::isRelevant(const class Sync*, class ModControllableAudio*, long int)",1,0,19,0,0,0
"sync.h",30,"Sync::isRelevant(const class Sync*, class ModControllableAudio*, long int)",1,0,15,0,0,0
"sync.h",30,"Sync::readCurrentValue(const class Sync*)",2,0,11,0,0,0
"sync.h",26,"Sync::readCurrentValue(const class Sync*)",2,0,6,0,0,0
"sync.h",30,"Sync::readCurrentValue(const class Sync*)",2,0,14,0,0,0
"sync.h",28,"Sync::readCurrentValue(const class Sync*)",2,0,11,0,0,0
"sync.h",26,"Sync::readCurrentValue(const class Sync*)",2,0,11,0,0,0
,0,"Sync::Sync(const class Sync*, enum String, enum String, unsigned char) (always inlined)",0,0,0,0,0,0
"value.h",42,"Sync::writeCurrentValue(const class Sync*)",6,0,20,0,0,0
"value.h",42,"Sync::writeCurrentValue(const class Sync*)",7,0,24,0,0,0
"value.h",42,"Sync::writeCurrentValue(const class Sync*)",6,0,28,0,0,0
"value.h",42,"Sync::writeCurrentValue(const class Sync*)",8,0,33,0,0,0
"sync.h",27,"Sync::writeCurrentValue(const class Sync*)",2,0,6,0,0,0
"menu_item.h",54,"Sync::~Sync(const class Sync*)",1,0,1,0,0,0
"menu_item.h",54,"Sync::~Sync(const class Sync*)",1,0,1,0,0,0
"menu_item.h",54,"Sync::~Sync(const class Sync*)",1,0,1,0,0,0
"menu_item.h",54,"Sync::~Sync(const class Sync*)",1,0,1,0,0,0
"menu_item.h",54,"Sync::~Sync(const class Sync*)",1,0,1,0,0,0
"sync.h",24,"Sync::~Sync(const class Sync*)",2,0,6,0,0,0
"sync.h",23,"Sync::~Sync(const class Sync*)",2,0,6,0,0,0
"sync.h",25,"Sync::~Sync(const class Sync*)",2,0,6,0,0,0
"sync.h",23,"Sync::~Sync(const class Sync*)",2,0,6,0,0,0
"sync.h",22,"Sync::~Sync(const class Sync*)",2,0,6,0,0,0
"ff.c",1094,"sync_fs(struct FATFS*)",13,0,60,0,0,0
,0,"sync_fs(struct FATFS*) (always inlined)",0,0,0,0,0,0
"ff.c",1041,"sync_window(struct FATFS*)",6,0,31,0,0,0
"sync_level.cpp",72,"SyncLevel::drawPixelsForOled(const class SyncLevel*)",6,0,33,0,0,0
"value.h",42,"SyncLevel::drawValue(const class SyncLevel*)",7,0,52,0,0,0
"value.h",42,"SyncLevel::getNoteLengthName(const class SyncLevel*, class StringBuf&)",11,0,84,0,0,0
,0,"SyncLevel::menuOptionToSyncLevel(const class SyncLevel*, long int) (always inlined)",0,0,0,0,0,0
,0,"SyncLevel::menuOptionToSyncType(const class SyncLevel*, long int) (always inlined)",0,0,0,0,0,0
"sync_level.h",33,"SyncLevel::size(const class SyncLevel*)",1,0,2,0,0,0
,0,"SyncLevel::SyncLevel(const class SyncLevel*, enum String, enum String) (always inlined)",0,0,0,0,0,0
,0,"SyncLevel::syncTypeAndLevelToMenuOption(const class SyncLevel*, enum SyncType, enum SyncLevel) (always inlined)",0,0,0,0,0,0
"synth.cpp",84,"Synth::acceptCurrentOption(const class Synth*)",5,0,512,0,0,0
"synth.cpp",39,"Synth::getOptions(const class Synth*)",2,0,34,0,0,0
"synth.cpp",34,"Synth::getTitle(const class Synth*)",1,0,2,0,0,0
"synth.cpp",51,"Synth::isCurrentOptionAvailable(const class Synth*)",4,0,21,0,0,0
,0,"Synth::isCurrentOptionAvailable(const class Synth*) (always inlined)",0,0,0,0,0,0
"synth.h",23,"Synth::~Synth(const class Synth*)",2,0,6,0,0,0
"context_menu.h",31,"Synth::~Synth(const class Synth*)",1,0,1,0,0,0
"synth_mode.h",36,"SynthMode::getOptions(const class SynthMode*)",4,0,51,0,0,0
"synth_mode.h",45,"SynthMode::isRelevant(const class SynthMode*, class ModControllableAudio*, long int)",1,0,11,0,0,0
"synth_mode.h",29,"SynthMode::readCurrentValue(const class SynthMode*)",2,0,6,0,0,0
,0,"SynthMode::SynthMode(const class SynthMode*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"synth_mode.h",31,"SynthMode::writeCurrentValue(const class SynthMode*)",16,0,76,0,0,0
"synth_mode.h",26,"SynthMode::~SynthMode(const class SynthMode*)",2,0,6,0,0,0
"menu_item.h",54,"SynthMode::~SynthMode(const class SynthMode*)",1,0,1,0,0,0
,0,"synthModeToString(enum SynthMode) (always inlined)",0,0,0,0,0,0
,0,"sysexChecksum(const unsigned char*, int) (always inlined)",0,0,0,0,0,0
"sysex.cpp",68,"sysexDebugPrint(class MIDIDevice*, bool, const char*)",13,0,46,0,0,0
,0,"sysexReceived(class MIDIDevice*, unsigned char*, long int) (always inlined)",0,0,0,0,0,0
"takeover.h",31,"Takeover::getOptions(const class Takeover*)",4,0,56,0,0,0
"takeover.h",27,"Takeover::readCurrentValue(const class Takeover*)",2,0,5,0,0,0
,0,"Takeover::Takeover(const class Takeover*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",45,"Takeover::writeCurrentValue(const class Takeover*)",1,0,5,0,0,0
"takeover.h",24,"Takeover::~Takeover(const class Takeover*)",2,0,6,0,0,0
"menu_item.h",54,"Takeover::~Takeover(const class Takeover*)",1,0,1,0,0,0
,0,"tanh_init(long int*) (always inlined)",0,0,0,0,0,0
,0,"TaskManager::addOnceTask(const struct TaskManager*, void()*, unsigned char, double) (always inlined)",0,0,0,0,0,0
,0,"TaskManager::addRepeatingTask(const struct TaskManager*, void()*, unsigned char, double, double, double) (always inlined)",0,0,0,0,0,0
,0,"TaskManager::chooseBestTask(const struct TaskManager*, double) (always inlined)",0,0,0,0,0,0
,0,"TaskManager::clockRolledOver(const struct TaskManager*) (always inlined)",0,0,0,0,0,0
"task_scheduler.cpp",67,"TaskManager::createSortedList(const struct TaskManager*)",31,0,154,0,0,0
,0,"TaskManager::insertTaskToList(const struct TaskManager*, struct Task) (always inlined)",0,0,0,0,0,0
,0,"TaskManager::removeTask(const struct TaskManager*, signed char) (always inlined)",0,0,0,0,0,0
,0,"TaskManager::runTask(const struct TaskManager*, signed char) (always inlined)",0,0,0,0,0,0
,0,"TaskManager::start(const struct TaskManager*, double) (always inlined)",0,0,0,0,0,0
,0,"tchar2uni(const char**) (always inlined)",0,0,0,0,0,0
,0,"TimelineCounter::TimelineCounter(const class TimelineCounter*) (always inlined)",0,0,0,0,0,0
,0,"TimelineCounter::~TimelineCounter(const class TimelineCounter*) (always inlined)",0,0,0,0,0,0
"timeline_view.cpp",64,"TimelineView::buttonAction(const class TimelineView*, unsigned char, bool, bool)",17,0,67,0,0,0
"timeline_view.cpp",49,"TimelineView::calculateZoomPinSquares(const class TimelineView*, long unsigned int, long unsigned int, long unsigned int, long unsigned int)",5,0,24,0,0,0
"timeline_view.cpp",228,"TimelineView::displayNumberOfBarsAndBeats(const class TimelineView*, long unsigned int, long unsigned int, bool, const char*)",24,0,129,0,0,0
"timeline_view.cpp",216,"TimelineView::displayScrollPos(const class TimelineView*)",5,0,22,0,0,0
"timeline_view.cpp",117,"TimelineView::displayZoomLevel(const class TimelineView*, bool)",6,0,41,0,0,0
"timeline_view.cpp",430,"TimelineView::getPosFromSquare(const class TimelineView*, long int, long int)",3,0,22,0,0,0
"timeline_view.cpp",399,"TimelineView::getPosFromSquare(const class TimelineView*, long int, long int, long unsigned int)",12,0,55,0,0,0
,0,"TimelineView::getSquareEndFromPos(const class TimelineView*, long int, long int) (always inlined)",0,0,0,0,0,0
"timeline_view.cpp",492,"TimelineView::getSquareFromPos(const class TimelineView*, long int, bool*, long int)",3,0,27,0,0,0
"timeline_view.cpp",443,"TimelineView::getSquareFromPos(const class TimelineView*, long int, bool*, long int, long unsigned int)",18,0,93,0,0,0
"timeline_view.h",72,"TimelineView::getUIType(const class TimelineView*)",1,0,2,0,0,0
"timeline_view.cpp",128,"TimelineView::horizontalEncoderAction(const class TimelineView*, long int)",29,0,139,0,0,0
,0,"TimelineView::horizontalEncoderAction(const class TimelineView*, long int) (always inlined)",0,0,0,0,0,0
"timeline_view.cpp",303,"TimelineView::initiateXScroll(const class TimelineView*, long unsigned int, long int)",6,0,48,0,0,0
"timeline_view.cpp",340,"TimelineView::initiateXZoom(const class TimelineView*, long int, long int, long unsigned int)",11,0,80,0,0,0
"timeline_view.cpp",536,"TimelineView::inTripletsView(const class TimelineView*)",1,0,10,0,0,0
"timeline_view.cpp",524,"TimelineView::isSquareDefined(const class TimelineView*, long int, long int)",3,0,36,0,0,0
"timeline_view.cpp",513,"TimelineView::isSquareDefined(const class TimelineView*, long int, long int, long unsigned int)",3,0,32,0,0,0
,0,"TimelineView::isSquareDefined(const class TimelineView*, long int, long int, long unsigned int) (always inlined)",0,0,0,0,0,0
"timeline_view.cpp",540,"TimelineView::midiLearnFlash(const class TimelineView*)",1,0,3,0,0,0
"timeline_view.cpp",32,"TimelineView::scrollFinished(const class TimelineView*)",2,0,9,0,0,0
"timeline_view.cpp",377,"TimelineView::scrollLeftIfTooFarRight(const class TimelineView*, long int)",4,0,33,0,0,0
,0,"TimelineView::scrollLeftIfTooFarRight(const class TimelineView*, long int) (always inlined)",0,0,0,0,0,0
"timeline_view.cpp",366,"TimelineView::scrollRightToEndOfLengthIfNecessary(const class TimelineView*, long int)",4,0,30,0,0,0
,0,"TimelineView::scrollRightToEndOfLengthIfNecessary(const class TimelineView*, long int) (always inlined)",0,0,0,0,0,0
"timeline_view.cpp",40,"TimelineView::setupScroll(const class TimelineView*, long unsigned int)",3,0,19,0,0,0
,0,"TimelineView::tripletsButtonPressed(const class TimelineView*) (always inlined)",0,0,0,0,0,0
"timeline_view.cpp",320,"TimelineView::zoomToMax(const class TimelineView*, bool)",8,0,50,0,0,0
,0,"timerClearCompareMatchTGRA(int) (always inlined)",0,0,0,0,0,0
,0,"timerControlSetup(int, int, int) (always inlined)",0,0,0,0,0,0
,0,"timerEnableInterruptsTGRA(long int) (always inlined)",0,0,0,0,0,0
"pad_leds.cpp",758,"timerRoutine()",67,0,317,0,0,0
,0,"timerRoutine() (always inlined)",0,0,0,0,0,0
"time_stretch.h",60,"TimeStretch::getMaxValue(const class TimeStretch*)",1,0,2,0,0,0
"time_stretch.h",59,"TimeStretch::getMinValue(const class TimeStretch*)",1,0,2,0,0,0
"sound.h",199,"TimeStretch::isRelevant(const class TimeStretch*, class ModControllableAudio*, long int)",1,0,11,0,0,0
"time_stretch.h",35,"TimeStretch::readCurrentValue(const class TimeStretch*)",2,0,6,0,0,0
,0,"TimeStretch::TimeStretch(const class TimeStretch*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"time_stretch.h",40,"TimeStretch::writeCurrentValue(const class TimeStretch*)",5,0,34,0,0,0
"time_stretch.h",27,"TimeStretch::~TimeStretch(const class TimeStretch*)",4,0,17,0,0,0
"time_stretch.h",27,"TimeStretch::~TimeStretch(const class TimeStretch*)",4,0,14,0,0,0
,0,"TimeStretch::~TimeStretch(const class TimeStretch*) (always inlined)",0,0,0,0,0,0
,0,"TimeStretcher::allocateBuffer(const class TimeStretcher*, long int) (always inlined)",0,0,0,0,0,0
"time_stretcher.cpp",169,"TimeStretcher::beenUnassigned(const class TimeStretcher*)",10,0,54,0,0,0
"time_stretcher.cpp",1227,"TimeStretcher::getSamplePos(const class TimeStretcher*, long int)",4,0,13,0,0,0
,0,"TimeStretcher::getSamplePos(const class TimeStretcher*, long int) (always inlined)",0,0,0,0,0,0
"time_stretcher.cpp",245,"TimeStretcher::hopEnd(const class TimeStretcher*, class SamplePlaybackGuide*, class VoiceSample*, class Sample*, long int, long int, long int, long long unsigned int, long int, enum LoopType, long int)",156,0,1050,0,0,0
"time_stretcher.cpp",42,"TimeStretcher::init(const class TimeStretcher*, class Sample*, class VoiceSample*, class SamplePlaybackGuide*, long long int, long int, long int, long int, long int, long int, long int, enum LoopType)",22,0,110,0,0,0
"time_stretcher.cpp",1055,"TimeStretcher::readFromBuffer(const class TimeStretcher*, long int* restrict, long int, long int, long int, long int, long int, long int* restrict)",10,0,47,0,0,0
"time_stretcher.cpp",151,"TimeStretcher::reInit(const class TimeStretcher*, long long int, class SamplePlaybackGuide*, class VoiceSample*, class Sample*, long int, long int, long int, long long unsigned int, long int, enum LoopType, long int)",3,0,23,0,0,0
"time_stretcher.cpp",1095,"TimeStretcher::rememberPercCacheCluster(const class TimeStretcher*, class Cluster*)",6,0,25,0,0,0
"time_stretcher.cpp",1137,"TimeStretcher::setupCrossfadeFromCache(const class TimeStretcher*, class SampleCache*, long int, long int)",26,0,115,0,0,0
"time_stretcher.cpp",984,"TimeStretcher::setupNewPlayHead(const class TimeStretcher*, class Sample*, class VoiceSample*, class SamplePlaybackGuide*, long int, long int, long int, enum LoopType)",9,0,41,0,0,0
,0,"TimeStretcher::TimeStretcher(const class TimeStretcher*) (always inlined)",0,0,0,0,0,0
,0,"TimeStretcher::unassignAllReasonsForPercCacheClusters(const class TimeStretcher*) (always inlined)",0,0,0,0,0,0
"time_stretcher.cpp",180,"TimeStretcher::unassignAllReasonsForPercLookahead(const class TimeStretcher*)",4,0,25,0,0,0
,0,"TimeStretcher::unassignAllReasonsForPercLookahead(const class TimeStretcher*) (always inlined)",0,0,0,0,0,0
"time_stretcher.cpp",1114,"TimeStretcher::updateClustersForPercLookahead(const class TimeStretcher*, class Sample*, long unsigned int, long int)",10,0,62,0,0,0
,0,"timeStretcherUnassigned(class TimeStretcher*) (always inlined)",0,0,0,0,0,0
"toggle.cpp",10,"Toggle::beginSession(const class Toggle*, class MenuItem*)",5,0,28,0,0,0
"toggle.cpp",39,"Toggle::drawPixelsForOled(const class Toggle*)",9,0,68,0,0,0
"toggle.cpp",28,"Toggle::drawValue(const class Toggle*)",6,0,36,0,0,0
"toggle.cpp",19,"Toggle::selectEncoderAction(const class Toggle*, long int)",5,0,23,0,0,0
,0,"Toggle::Toggle(const class Toggle*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"toggle.h",25,"ToggleBool::readCurrentValue(const class ToggleBool*)",2,0,4,0,0,0
,0,"ToggleBool::ToggleBool(const class ToggleBool*, enum String, enum String, bool&) (always inlined)",0,0,0,0,0,0
"value.h",42,"ToggleBool::writeCurrentValue(const class ToggleBool*)",1,0,4,0,0,0
"toggle.h",19,"ToggleBool::~ToggleBool(const class ToggleBool*)",2,0,6,0,0,0
"menu_item.h",54,"ToggleBool::~ToggleBool(const class ToggleBool*)",1,0,1,0,0,0
"toggle.h",39,"ToggleBoolDyn::readCurrentValue(const class ToggleBoolDyn*)",2,0,7,0,0,0
,0,"ToggleBoolDyn::ToggleBoolDyn(const class ToggleBoolDyn*, enum String, enum String, bool*()*) (always inlined)",0,0,0,0,0,0
"value.h",42,"ToggleBoolDyn::writeCurrentValue(const class ToggleBoolDyn*)",1,0,6,0,0,0
"toggle.h",31,"ToggleBoolDyn::~ToggleBoolDyn(const class ToggleBoolDyn*)",2,0,6,0,0,0
"menu_item.h",54,"ToggleBoolDyn::~ToggleBoolDyn(const class ToggleBoolDyn*)",1,0,1,0,0,0
,0,"toXY(unsigned char) (always inlined)",0,0,0,0,0,0
"transpose.h",69,"Transpose::checkPermissionToBeginSession(const class Transpose*, class ModControllableAudio*, long int, class MultiRange**)",3,0,15,0,0,0
"transpose.h",38,"Transpose::drawValue(const class Transpose*)",1,0,1,0,0,0
"transpose.h",28,"Transpose::getLearningThing(const class Transpose*)",2,0,7,0,0,0
"transpose.h",58,"Transpose::getLearningThing(const class Transpose*)",1,0,2,0,0,0
"transpose.h",45,"Transpose::getMaxValue(const class Transpose*)",1,0,2,0,0,0
"transpose.h",44,"Transpose::getMinValue(const class Transpose*)",1,0,3,0,0,0
"transpose.h",31,"Transpose::getOptions(const class Transpose*)",4,0,45,0,0,0
"transpose.h",33,"Transpose::getP(const class Transpose*)",1,0,7,0,0,0
"transpose.h",35,"Transpose::getParamIndex(const class Transpose*)",1,0,2,0,0,0
"basic_string.h",222,"Transpose::getTitle(const class Transpose*)",2,0,5,0,0,0
"sound.h",199,"Transpose::isRelevant(const class Transpose*, class ModControllableAudio*, long int)",1,0,5,0,0,0
"transpose.h",50,"Transpose::learnKnob(const class Transpose*, class MIDIDevice*, long int, long int, long int)",1,0,2,0,0,0
"transpose.h",51,"Transpose::learnKnob(const class Transpose*, class MIDIDevice*, long int, long int, long int)",1,0,2,0,0,0
"transpose.h",44,"Transpose::patchingSourceShortcutPress(const class Transpose*, enum PatchSource, bool)",1,0,2,0,0,0
"transpose.h",34,"Transpose::readCurrentValue(const class Transpose*)",7,0,24,0,0,0
"transpose.h",32,"Transpose::readCurrentValue(const class Transpose*)",2,0,12,0,0,0
"transpose.h",27,"Transpose::readCurrentValue(const class Transpose*)",2,0,5,0,0,0
"transpose.h",35,"Transpose::readCurrentValue(const class Transpose*)",2,0,13,0,0,0
"transpose.h",29,"Transpose::readCurrentValue(const class Transpose*)",2,0,9,0,0,0
"transpose.h",31,"Transpose::selectButtonPress(const class Transpose*)",1,0,2,0,0,0
"transpose.h",41,"Transpose::shouldBlinkPatchingSourceShortcut(const class Transpose*, enum PatchSource, unsigned char*)",1,0,2,0,0,0
"transpose.h",36,"Transpose::shouldDrawDotOnName(const class Transpose*)",1,0,2,0,0,0
,0,"Transpose::Transpose(const class Transpose*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"transpose.h",47,"Transpose::unlearnAction(const class Transpose*)",1,0,2,0,0,0
"transpose.h",48,"Transpose::unlearnAction(const class Transpose*)",1,0,2,0,0,0
"value.h",42,"Transpose::writeCurrentValue(const class Transpose*)",3,0,22,0,0,0
"value.h",42,"Transpose::writeCurrentValue(const class Transpose*)",7,0,20,0,0,0
"value.h",42,"Transpose::writeCurrentValue(const class Transpose*)",12,0,46,0,0,0
"value.h",42,"Transpose::writeCurrentValue(const class Transpose*)",13,0,50,0,0,0
"value.h",45,"Transpose::writeCurrentValue(const class Transpose*)",1,0,5,0,0,0
"menu_item.h",54,"Transpose::~Transpose(const class Transpose*)",1,0,1,0,0,0
"menu_item.h",54,"Transpose::~Transpose(const class Transpose*)",1,0,1,0,0,0
"transpose.h",24,"Transpose::~Transpose(const class Transpose*)",4,0,21,0,0,0
"transpose.h",24,"Transpose::~Transpose(const class Transpose*)",4,0,18,0,0,0
"transpose.h",24,"Transpose::~Transpose(const class Transpose*)",4,0,21,0,0,0
"transpose.h",24,"Transpose::~Transpose(const class Transpose*)",4,0,18,0,0,0
"transpose.h",24,"Transpose::~Transpose(const class Transpose*)",2,0,6,0,0,0
"transpose.h",24,"Transpose::~Transpose(const class Transpose*)",4,0,17,0,0,0
"transpose.h",24,"Transpose::~Transpose(const class Transpose*)",4,0,14,0,0,0
"transpose.h",25,"Transpose::~Transpose(const class Transpose*)",2,0,6,0,0,0
,0,"Transpose::~Transpose(const class Transpose*) (always inlined)",0,0,0,0,0,0
"intc.c",241,"triggerClockInputHandler(long unsigned int)",4,0,34,0,0,0
,0,"tx_interrupt(long int) (always inlined)",0,0,0,0,0,0
"type.h",35,"Type::beginSession(const class Type*, class MenuItem*)",1,0,1,0,0,0
"array",200,"Type::getOptions(const class Type*)",6,0,124,0,0,0
"type.h",79,"Type::getOptions(const class Type*)",17,0,177,0,0,0
,0,"Type::mayUseDx(const class Type*) (always inlined)",0,0,0,0,0,0
"type.h",40,"Type::readCurrentValue(const class Type*)",4,0,16,0,0,0
"type.h",31,"Type::readCurrentValue(const class Type*)",2,0,6,0,0,0
"type.h",28,"Type::readCurrentValue(const class Type*)",2,0,9,0,0,0
"type.h",117,"Type::selectButtonPress(const class Type*)",1,0,10,0,0,0
,0,"Type::Type(const class Type*, enum String, enum String, unsigned char) (always inlined)",0,0,0,0,0,0
"type.h",48,"Type::writeCurrentValue(const class Type*)",9,0,57,0,0,0
"type.h",33,"Type::writeCurrentValue(const class Type*)",3,0,18,0,0,0
"type.h",30,"Type::writeCurrentValue(const class Type*)",3,0,10,0,0,0
,0,"Type::writeCurrentValue(const class Type*) (always inlined)",0,0,0,0,0,0
"menu_item.h",54,"Type::~Type(const class Type*)",1,0,1,0,0,0
"menu_item.h",54,"Type::~Type(const class Type*)",1,0,1,0,0,0
"type.h",32,"Type::~Type(const class Type*)",4,0,17,0,0,0
"type.h",32,"Type::~Type(const class Type*)",4,0,14,0,0,0
"type.h",27,"Type::~Type(const class Type*)",2,0,6,0,0,0
"type.h",25,"Type::~Type(const class Type*)",2,0,6,0,0,0
,0,"Type::~Type(const class Type*) (always inlined)",0,0,0,0,0,0
"uart.c",126,"uartFlush(long int)",14,2,51,10,2,22
"uart.c",169,"uartFlushIfNotSending(long int)",6,1,30,9,2,22
,0,"uartFlushIfNotSending(long int) (always inlined)",0,0,0,0,0,0
"uart.c",225,"uartGetChar(char*, long int)",9,3,23,9,4,40
,0,"uartGetCharWithTiming(long int, char*) (always inlined)",0,0,0,0,0,0
,0,"uartGetTxBufferFullnessByItem(long int) (always inlined)",0,0,0,0,0,0
"uart.c",196,"uartGetTxBufferSpace(long int)",2,2,13,13,3,39
,0,"uartInit(int, long unsigned int) (always inlined)",0,0,0,0,0,0
"uart.c",59,"uartPrint(const char*)",1,0,1,0,0,0
,0,"uartPrint(const char*) (always inlined)",0,0,0,0,0,0
,0,"uartPrintFloat(float) (always inlined)",0,0,0,0,0,0
"uart.c",35,"uartPrintln(const char*)",2,0,6,0,0,0
"uart.c",86,"uartPrintlnFloat(float)",8,0,33,0,0,0
"uart.c",51,"uartPrintNumber(long int)",2,0,9,0,0,0
,0,"uartPutCharBack(long int) (always inlined)",0,0,0,0,0,0
,0,"uartSetBaudRate(unsigned char, long unsigned int) (always inlined)",0,0,0,0,0,0
"ui.h",109,"UI::focusRegained(const class UI*)",1,0,1,0,0,0
"ui.h",125,"UI::getGreyoutColsAndRows(const class UI*, long unsigned int*, long unsigned int*)",1,0,2,0,0,0
"ui.h",117,"UI::getName(const class UI*)",1,0,3,0,0,0
"ui.cpp",138,"UI::graphicsRoutine(const class UI*)",2,0,23,0,0,0
"ui.h",94,"UI::horizontalEncoderAction(const class UI*, long int)",1,0,2,0,0,0
"ui.cpp",35,"UI::modButtonAction(const class UI*, unsigned char, bool)",1,0,3,0,0,0
"ui.cpp",31,"UI::modEncoderAction(const class UI*, long int, long int)",1,0,3,0,0,0
"ui.cpp",39,"UI::modEncoderButtonAction(const class UI*, unsigned char, bool)",1,0,3,0,0,0
"ui.h",121,"UI::noteOnReceivedForMidiLearn(const class UI*, class MIDIDevice*, long int, long int, long int)",1,0,2,0,0,0
"ui.h",105,"UI::opened(const class UI*)",2,0,6,0,0,0
"ui.h",90,"UI::padAction(const class UI*, long int, long int, long int)",1,0,2,0,0,0
"ui.h",118,"UI::pcReceivedForMidiLearn(const class UI*, class MIDIDevice*, long int, long int)",1,0,2,0,0,0
"ui.h",134,"UI::renderMainPads(const class UI*, long unsigned int, class RGB[18]*, unsigned char[18]*, bool)",1,0,2,0,0,0
"ui.h",138,"UI::renderSidebar(const class UI*, long unsigned int, class RGB[18]*, unsigned char[18]*)",1,0,2,0,0,0
"ui.h",102,"UI::timerCallback(const class UI*)",1,0,2,0,0,0
"ui.h",115,"UI::toClipMinder(const class UI*)",1,0,2,0,0,0
,0,"UI::UI(const class UI*) (always inlined)",0,0,0,0,0,0
"ui.h",95,"UI::verticalEncoderAction(const class UI*, long int, bool)",1,0,2,0,0,0
"ui.cpp",293,"uiNeedsRendering(class UI*, long unsigned int, long unsigned int)",7,0,66,0,0,0
,0,"UITimerManager::isTimerSet(const class UITimerManager*, enum TimerName) (always inlined)",0,0,0,0,0,0
"ui_timer_manager.cpp",52,"UITimerManager::routine(const class UITimerManager*)",112,5,632,56,6,644
,0,"UITimerManager::setTimer(const class UITimerManager*, enum TimerName, long int) (always inlined)",0,0,0,0,0,0
"ui_timer_manager.cpp",228,"UITimerManager::setTimer(enum TimerName, long int, const class UITimerManager*)",1,0,3,0,0,0
,0,"UITimerManager::setTimerByOtherTimer(const class UITimerManager*, enum TimerName, enum TimerName) (always inlined)",0,0,0,0,0,0
"ui_timer_manager.cpp",233,"UITimerManager::setTimerSamples(enum TimerName, long int, const class UITimerManager*)",7,6,18,17,3,54
,0,"UITimerManager::unsetTimer(const class UITimerManager*, enum TimerName) (always inlined)",0,0,0,0,0,0
"ui_timer_manager.cpp",265,"UITimerManager::workOutNextEventTime(const class UITimerManager*)",8,4,23,15,3,180
"audio_engine.cpp",241,"unassignAllVoices(bool)",14,0,50,0,0,0
"audio_engine.cpp",1337,"unassignVoice(class Voice*, class Sound*, class ModelStackWithSoundFlags*, bool, bool)",15,0,53,0,0,0
,0,"unassignVoice(class Voice*, class Sound*, class ModelStackWithSoundFlags*, bool, bool) (always inlined)",0,0,0,0,0,0
,0,"unflagCable(long unsigned int*, long int) (always inlined)",0,0,0,0,0,0
,0,"UnknownSetting::UnknownSetting(const struct UnknownSetting*) (always inlined)",0,0,0,0,0,0
"param.cpp",41,"UnpatchedParam::buttonAction(const class UnpatchedParam*, unsigned char, bool, bool)",1,0,1,0,0,0
"value.h",42,"UnpatchedParam::getFinalValue(const class UnpatchedParam*)",3,0,13,0,0,0
"unpatched_param.cpp",75,"UnpatchedParam::getLearningThing(const class UnpatchedParam*)",3,0,15,0,0,0
"unpatched_param.cpp",40,"UnpatchedParam::getModelStack(const class UnpatchedParam*, void*)",3,0,22,0,0,0
"unpatched_param.cpp",89,"UnpatchedParam::getParamIndex(const class UnpatchedParam*)",2,0,11,0,0,0
"unpatched_param.cpp",85,"UnpatchedParam::getParamKind(const class UnpatchedParam*)",1,0,10,0,0,0
"unpatched_param.cpp",80,"UnpatchedParam::getParamSet(const class UnpatchedParam*)",2,0,16,0,0,0
"param.cpp",45,"UnpatchedParam::horizontalEncoderAction(const class UnpatchedParam*, long int)",1,0,1,0,0,0
"unpatched_param.h",52,"UnpatchedParam::learnKnob(const class UnpatchedParam*, class MIDIDevice*, long int, long int, long int)",1,0,2,0,0,0
"unpatched_param.cpp",33,"UnpatchedParam::readCurrentValue(const class UnpatchedParam*)",4,0,39,0,0,0
"param.cpp",37,"UnpatchedParam::selectButtonPress(const class UnpatchedParam*)",1,0,1,0,0,0
"unpatched_param.h",49,"UnpatchedParam::unlearnAction(const class UnpatchedParam*)",1,0,2,0,0,0
,0,"UnpatchedParam::UnpatchedParam(const class UnpatchedParam*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"unpatched_param.cpp",46,"UnpatchedParam::writeCurrentValue(const class UnpatchedParam*)",9,0,50,0,0,0
"unpatched_param.h",28,"UnpatchedParam::~UnpatchedParam(const class UnpatchedParam*)",2,0,6,0,0,0
"menu_item.h",54,"UnpatchedParam::~UnpatchedParam(const class UnpatchedParam*)",1,0,1,0,0,0
"array",276,"UnpatchedParamSet::beenCloned(const class UnpatchedParamSet*, bool, long int)",4,0,9,0,0,0
"param_set.cpp",426,"UnpatchedParamSet::doesParamIdAllowAutomation(const class UnpatchedParamSet*, const class ModelStackWithParamId*)",1,0,5,0,0,0
"param_set.h",108,"UnpatchedParamSet::getParamKind(const class UnpatchedParamSet*)",1,0,2,0,0,0
"param_set.cpp",413,"UnpatchedParamSet::knobPosToParamValue(const class UnpatchedParamSet*, long int, class ModelStackWithAutoParam*)",4,0,15,0,0,0
,0,"UnpatchedParamSet::knobPosToParamValue(const class UnpatchedParamSet*, long int, class ModelStackWithAutoParam*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",404,"UnpatchedParamSet::paramValueToKnobPos(const class UnpatchedParamSet*, long int, class ModelStackWithAutoParam*)",3,0,13,0,0,0
,0,"UnpatchedParamSet::paramValueToKnobPos(const class UnpatchedParamSet*, long int, class ModelStackWithAutoParam*) (always inlined)",0,0,0,0,0,0
"param_set.cpp",382,"UnpatchedParamSet::shouldParamIndicateMiddleValue(const class UnpatchedParamSet*, const class ModelStackWithParamId*)",5,0,36,0,0,0
"param_set.cpp",366,"UnpatchedParamSet::UnpatchedParamSet(const class UnpatchedParamSet*, class ParamCollectionSummary*)",6,0,26,0,0,0
"param_set.h",100,"UnpatchedParamSet::~UnpatchedParamSet(const class UnpatchedParamSet*)",3,0,17,0,0,0
"param_set.h",100,"UnpatchedParamSet::~UnpatchedParamSet(const class UnpatchedParamSet*)",3,0,15,0,0,0
,0,"UnpatchedParamSet::~UnpatchedParamSet(const class UnpatchedParamSet*) (always inlined)",0,0,0,0,0,0
,0,"unwind_phase2",0,0,25,0,0,0
,0,"unwind_phase2_forced",0,0,79,0,0,0
"indicator_leds.cpp",127,"updateBlinkingLedStates(unsigned char)",8,0,37,0,0,0
,0,"updateReverbParams() (always inlined)",0,0,0,0,0,0
"oled.cpp",888,"updateWorkingAnimation()",8,0,50,0,0,0
,0,"UpdatingReverbParams::UpdatingReverbParams(const class UpdatingReverbParams*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"updating_reverb_params.h",27,"UpdatingReverbParams::writeCurrentValue(const class UpdatingReverbParams*)",2,0,7,0,0,0
"updating_reverb_params.h",22,"UpdatingReverbParams::~UpdatingReverbParams(const class UpdatingReverbParams*)",2,0,6,0,0,0
"menu_item.h",54,"UpdatingReverbParams::~UpdatingReverbParams(const class UpdatingReverbParams*)",1,0,1,0,0,0
"r_usb_rz_mcu.c",383,"usb_chattaring(volatile short unsigned int*)",5,0,19,0,0,0
,0,"usb_class_task() (always inlined)",0,0,0,0,0,0
"r_usb_rz_mcu.c",295,"usb_cpu_delay_1us(short unsigned int)",4,0,30,0,0,0
"r_usb_rz_mcu.c",313,"usb_cpu_delay_xms(short unsigned int)",4,0,13,0,0,0
,0,"usb_cpu_int_disable(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_cpu_int_enable(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_check_schedule() (always inlined)",0,0,0,0,0,0
"r_usb_creg_abs.c",491,"usb_cstd_chg_curpipe(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int)",6,0,29,0,0,0
,0,"usb_cstd_chg_curpipe(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_chg_curpipe_rohan_fast(short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_abs.c",252,"usb_cstd_clr_pipe_cnfg(struct usb_utr*, short unsigned int)",31,0,97,0,0,0
"r_usb_clibusbip.c",229,"usb_cstd_clr_stall(struct usb_utr*, short unsigned int)",2,0,9,0,0,0
"r_usb_reg_access.h",681,"usb_cstd_clr_transaction_counter(struct usb_utr*, short unsigned int)",5,0,19,0,0,0
"r_usb_creg_access.c",2125,"usb_cstd_do_aclrm(struct usb_utr*, short unsigned int)",6,0,24,0,0,0
,0,"usb_cstd_get_buf_size(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_get_maxpacket_size(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_get_pid(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_get_pipe_dir(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_reg_access.h",562,"usb_cstd_get_pipe_type(struct usb_utr*, short unsigned int)",6,0,14,0,0,0
"r_usb_creg_abs.c",441,"usb_cstd_is_set_frdy(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int)",6,0,30,0,0,0
"r_usb_creg_abs.c",397,"usb_cstd_is_set_frdy_rohan(short unsigned int)",13,0,38,0,0,0
"r_usb_hscheduler.c",135,"usb_cstd_isnd_msg(unsigned char, struct t_msg_t*)",8,0,33,0,0,0
,0,"usb_cstd_isnd_msg(unsigned char, struct t_msg_t*) (always inlined)",0,0,0,0,0,0
"r_usb_hscheduler.c",178,"usb_cstd_pget_blk(struct usb_utr**, unsigned char)",4,0,23,0,0,0
,0,"usb_cstd_pget_blk(unsigned char, struct usb_utr**) (always inlined)",0,0,0,0,0,0
"r_usb_creg_abs.c",117,"usb_cstd_pipe_init(struct usb_utr*, short unsigned int, short unsigned int*, short unsigned int)",35,0,109,0,0,0
"r_usb_creg_access.c",354,"usb_cstd_port_speed(struct usb_utr*, short unsigned int)",5,0,16,0,0,0
"r_usb_hscheduler.c",212,"usb_cstd_rel_blk(struct usb_utr*, unsigned char)",5,0,22,0,0,0
,0,"usb_cstd_rel_blk(unsigned char, struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_sche_init() (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_scheduler() (always inlined)",0,0,0,0,0,0
"r_usb_cdataio.c",163,"usb_cstd_select_nak(struct usb_utr*, short unsigned int)",2,0,9,0,0,0
"r_usb_clibusbip.c",214,"usb_cstd_set_buf(struct usb_utr*, short unsigned int)",1,0,2,0,0,0
"r_usb_creg_abs.c",338,"usb_cstd_set_nak(struct usb_utr*, short unsigned int)",4,0,17,0,0,0
,0,"usb_cstd_set_nak_fast_rohan(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_set_task_pri(unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"r_usb_reg_access.h",714,"usb_cstd_set_transaction_counter(struct usb_utr*, short unsigned int, short unsigned int)",8,0,29,0,0,0
"r_usb_rz_mcu.c",357,"usb_cstd_snd_msg(unsigned char, struct t_msg_t*)",8,0,40,0,0,0
"r_usb_clibusbip.c",318,"usb_cstd_usb_task()",240,0,2260,0,0,0
,0,"usb_cstd_usb_task() (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_wai_msg(unsigned char, struct t_msg_t*, long int) (always inlined)",0,0,0,0,0,0
,0,"usb_cstd_wait_scheduler() (always inlined)",0,0,0,0,0,0
,0,"usb_hdriver_init(struct usb_utr*, struct usb_cfg*) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",1690,"usb_hhub_check_class(struct usb_utr*, short unsigned int**)",14,0,45,0,0,0
"r_usb_hhubsys.c",2124,"usb_hhub_check_request(struct usb_utr*, short unsigned int)",11,0,25,0,0,0
,0,"usb_hhub_chk_config(short unsigned int**, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hhub_chk_interface(short unsigned int**, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",2459,"usb_hhub_chk_tbl_indx1(struct usb_utr*, short unsigned int)",10,0,38,0,0,0
,0,"usb_hhub_chk_tbl_indx2(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",1980,"usb_hhub_class_request_complete(struct usb_utr*, short unsigned int, short unsigned int)",8,0,30,0,0,0
"r_usb_hhubsys.c",341,"usb_hhub_close(struct usb_utr*, short unsigned int, short unsigned int)",18,0,139,0,0,0
"r_usb_hhubsys.c",606,"usb_hhub_enumeration(struct usb_utr*)",54,0,282,0,0,0
,0,"usb_hhub_event(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",3110,"usb_hhub_get_cnn_devaddr(struct usb_utr*, short unsigned int, short unsigned int)",1,0,20,0,0,0
,0,"usb_hhub_get_hub_information(struct usb_utr*, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*) (always inlined)",0,0,0,0,0,0
,0,"usb_hhub_get_hubaddr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hhub_get_new_devaddr(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",481,"usb_hhub_get_port_information(struct usb_utr*, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*)",16,0,42,0,0,0
,0,"usb_hhub_get_string_descriptor1(struct usb_utr*, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*) (always inlined)",0,0,0,0,0,0
,0,"usb_hhub_get_string_descriptor1check(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hhub_get_string_descriptor2(struct usb_utr*, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*) (always inlined)",0,0,0,0,0,0
,0,"usb_hhub_get_string_descriptor_to_check(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hhub_init_down_port(struct usb_utr*, short unsigned int, struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",2021,"usb_hhub_initial(struct usb_utr*, short unsigned int, short unsigned int)",3,0,17,0,0,0
"r_usb_hhubsys.c",2825,"usb_hhub_new_connect(struct usb_utr*, short unsigned int, short unsigned int, struct usb_utr*)",12,0,32,0,0,0
,0,"usb_hhub_new_connect(struct usb_utr*, short unsigned int, short unsigned int, struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",274,"usb_hhub_open(struct usb_utr*, short unsigned int, short unsigned int)",17,0,84,0,0,0
"r_usb_hhubsys.c",2047,"usb_hhub_pipe_info(struct usb_utr*, unsigned char*, short unsigned int, short unsigned int, short unsigned int)",11,0,61,0,0,0
,0,"usb_hhub_port_attach(short unsigned int, short unsigned int, struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",1818,"usb_hhub_port_clr_feature(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*)",17,0,44,0,0,0
"r_usb_hhubsys.c",2861,"usb_hhub_port_detach(struct usb_utr*, short unsigned int, short unsigned int)",9,0,61,0,0,0
,0,"usb_hhub_port_reset(struct usb_utr*, short unsigned int, short unsigned int, struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",1776,"usb_hhub_port_set_feature(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*)",17,0,44,0,0,0
,0,"usb_hhub_registration(struct usb_utr*, struct USB_HCDREG*) (always inlined)",0,0,0,0,0,0
,0,"usb_hhub_request_result(short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",2923,"usb_hhub_selective_detach(struct usb_utr*, short unsigned int)",12,0,68,0,0,0
"r_usb_hhubsys.c",3135,"usb_hhub_specified_path(struct usb_utr*)",9,0,29,0,0,0
"r_usb_hhubsys.c",3180,"usb_hhub_specified_path_wait(struct usb_utr*, short unsigned int)",13,0,37,0,0,0
,0,"usb_hhub_task(long int) (always inlined)",0,0,0,0,0,0
"r_usb_hhubsys.c",1894,"usb_hhub_trans_complete(struct usb_utr*, short unsigned int, short unsigned int)",13,0,58,0,0,0
,0,"usb_hhub_trans_start(struct usb_utr*, short unsigned int, long unsigned int, unsigned char*, void(struct usb_utr*, short unsigned int, short unsigned int)*) (always inlined)",0,0,0,0,0,0
"r_usb_hmidi_driver.c",310,"usb_hmidi_check_result(struct usb_utr*, short unsigned int, short unsigned int)",11,0,24,0,0,0
,0,"usb_hmidi_cmd_submit(struct usb_utr*, void(struct usb_utr*, short unsigned int, short unsigned int)*) (always inlined)",0,0,0,0,0,0
,0,"usb_hmidi_enumeration_sequence(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hmidi_driver.c",718,"usb_hmidi_get_string_desc(struct usb_utr*, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*)",21,0,69,0,0,0
,0,"usb_hmidi_pipe_info(struct usb_utr*, unsigned char*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hmidi_task(long int) (always inlined)",0,0,0,0,0,0
"r_usb_hreg_access.c",371,"usb_hstd_attach(struct usb_utr*, short unsigned int, short unsigned int)",5,0,29,0,0,0
,0,"usb_hstd_attach_function() (always inlined)",0,0,0,0,0,0
"r_usb_hreg_abs.c",460,"usb_hstd_attach_process(struct usb_utr*, short unsigned int)",9,0,28,0,0,0
"r_usb_hreg_access.c",386,"usb_hstd_attch_disable(struct usb_utr*, short unsigned int)",3,0,10,0,0,0
,0,"usb_hstd_attch_enable(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_bchg0function(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hreg_access.c",355,"usb_hstd_bchg_disable(struct usb_utr*, short unsigned int)",3,0,10,0,0,0
,0,"usb_hstd_bchg_enable(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_bemp_pipe(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_bemp_pipe_process_rohan_midi(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_berne_enable(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_brdy_pipe(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_brdy_pipe_process_rohan_midi_and_hub(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hlibusbip.c",564,"usb_hstd_buf2fifo(struct usb_utr*, short unsigned int, short unsigned int)",10,0,50,0,0,0
,0,"usb_hstd_bus_int_disable(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_bus_reset(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hreg_abs.c",267,"usb_hstd_chk_attach(struct usb_utr*, short unsigned int)",26,0,86,0,0,0
"r_usb_hreg_abs.c",318,"usb_hstd_chk_clk(struct usb_utr*, short unsigned int, short unsigned int)",6,0,21,0,0,0
,0,"usb_hstd_chk_clk(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hlibusbip.c",314,"usb_hstd_chk_dev_addr(struct usb_utr*, short unsigned int, short unsigned int)",3,0,12,0,0,0
"r_usb_hmanager.c",547,"usb_hstd_chk_device_class(struct usb_utr*, struct USB_HCDREG*, short unsigned int)",22,0,127,0,0,0
"r_usb_hdriver.c",1825,"usb_hstd_chk_pipe_info(short unsigned int, short unsigned int*, unsigned char*)",21,0,86,0,0,0
,0,"usb_hstd_chk_pipe_info(short unsigned int, short unsigned int*, unsigned char*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_chk_remote(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_chk_sof(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_class_driver_start(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hdriver.c",825,"usb_hstd_clr_feature(short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*, struct usb_utr*)",16,0,32,0,0,0
"r_usb_reg_access.h",562,"usb_hstd_clr_stall(struct usb_utr*, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*)",9,0,31,0,0,0
"r_usb_hdriver.c",893,"usb_hstd_clr_stall_result(struct usb_utr*, short unsigned int, short unsigned int)",11,0,26,0,0,0
"r_usb_hmanager.c",1236,"usb_hstd_cmd_submit(struct usb_utr*, void(struct usb_utr*, short unsigned int, short unsigned int)*)",11,0,32,0,0,0
"r_usb_reg_access.h",362,"usb_hstd_ctrl_end(struct usb_utr*, short unsigned int)",23,0,103,0,0,0
"r_usb_hcontrolrw.c",168,"usb_hstd_ctrl_read_start(struct usb_utr*, long unsigned int, unsigned char*)",13,0,58,0,0,0
"r_usb_hcontrolrw.c",62,"usb_hstd_ctrl_write_start(struct usb_utr*, long unsigned int, unsigned char*)",20,0,90,0,0,0
,0,"usb_hstd_data_end(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_creg_access.c",423,"usb_hstd_detach(struct usb_utr*, short unsigned int)",5,0,17,0,0,0
"r_usb_hreg_abs.c",344,"usb_hstd_detach_process(struct usb_utr*, short unsigned int)",20,0,87,0,0,0
,0,"usb_hstd_device_resume(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hmanager.c",976,"usb_hstd_device_state_ctrl(struct usb_utr*, short unsigned int, short unsigned int)",1,0,4,0,0,0
,0,"usb_hstd_device_state_ctrl(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hmanager.c",1005,"usb_hstd_device_state_ctrl2(struct usb_utr*, void(struct usb_utr*, short unsigned int, short unsigned int)*, short unsigned int, short unsigned int, short unsigned int)",3,0,15,0,0,0
"r_usb_hlibusbip.c",460,"usb_hstd_do_sqtgl(struct usb_utr*, short unsigned int, short unsigned int)",3,0,4,0,0,0
"r_usb_hdriver.c",1733,"usb_hstd_driver_registration(struct usb_utr*, struct USB_HCDREG*)",15,0,47,0,0,0
,0,"usb_hstd_driver_release(struct usb_utr*, unsigned char) (always inlined)",0,0,0,0,0,0
"r_usb_hdriver.c",1769,"usb_hstd_driver_release(unsigned char, struct usb_utr*)",6,0,29,0,0,0
"r_usb_hreg_access.c",371,"usb_hstd_dtch_disable(struct usb_utr*, short unsigned int)",3,0,10,0,0,0
,0,"usb_hstd_dtch_enable(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hdriver.c",2139,"usb_hstd_dummy_function(struct usb_utr*, short unsigned int, short unsigned int)",1,0,1,0,0,0
"r_usb_hmanager.c",908,"usb_hstd_enum_dummy_request",1,0,1,0,0,0
"r_usb_hmanager.c",764,"usb_hstd_enum_get_descriptor(struct usb_utr*, short unsigned int, short unsigned int)",18,0,103,0,0,0
"r_usb_hmanager.c",852,"usb_hstd_enum_set_address(struct usb_utr*, short unsigned int, short unsigned int)",2,0,38,0,0,0
"r_usb_hmanager.c",881,"usb_hstd_enum_set_configuration(struct usb_utr*, short unsigned int, short unsigned int)",2,0,38,0,0,0
,0,"usb_hstd_enumeration(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hreg_abs.c",749,"usb_hstd_forced_termination(struct usb_utr*, short unsigned int, short unsigned int)",29,0,119,0,0,0
"r_usb_hmanager.c",1296,"usb_hstd_get_config_desc(struct usb_utr*, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*, short unsigned int)",7,0,28,0,0,0
,0,"usb_hstd_get_dev_speed(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hlibusbip.c",516,"usb_hstd_get_device_address(struct usb_utr*, short unsigned int)",6,0,57,0,0,0
,0,"usb_hstd_get_device_address(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hlibusbip.c",484,"usb_hstd_get_devsel(struct usb_utr*, short unsigned int)",10,0,26,0,0,0
"r_usb_hlibusbip.c",291,"usb_hstd_get_rootport(struct usb_utr*, short unsigned int)",2,0,6,0,0,0
"r_usb_hmanager.c",1360,"usb_hstd_get_string_desc(struct usb_utr*, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*)",13,0,48,0,0,0
,0,"usb_hstd_get_usb_ip_adr(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_hcd_open(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_hcd_rel_mpl(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hdriver.c",325,"usb_hstd_hcd_snd_mbx(struct usb_utr*, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*, short unsigned int*)",12,0,29,0,0,0
,0,"usb_hstd_hcd_task(long int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_init_usb_message(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hdriver.c",615,"usb_hstd_interrupt(struct usb_utr*)",111,0,533,0,0,0
"r_usb_hreg_abs.c",73,"usb_hstd_interrupt_handler(struct usb_utr*)",59,0,147,0,0,0
,0,"usb_hstd_ls_connect_function(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hmanager.c",132,"usb_hstd_mgr_chgdevst_cb(struct usb_utr*, short unsigned int)",3,0,16,0,0,0
,0,"usb_hstd_mgr_open(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_mgr_rel_mpl(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_mgr_reset(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hmanager.c",1037,"usb_hstd_mgr_resume(struct usb_utr*, short unsigned int)",10,0,37,0,0,0
"r_usb_hdriver.c",379,"usb_hstd_mgr_snd_mbx(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int)",13,0,28,0,0,0
"r_usb_hmanager.c",926,"usb_hstd_mgr_suspend(struct usb_utr*, short unsigned int)",16,0,67,0,0,0
,0,"usb_hstd_mgr_task(long int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_notif_ator_detach(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_nrdy_endprocess(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_nrdy_pipe(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_nrdy_pipe_process(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_ovcr_notifiation(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_ovrcr0function(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_pipe_to_epadr(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_read_lnst(struct usb_utr*, short unsigned int, short unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_receive_start(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hmanager.c",1131,"usb_hstd_resu_cont(struct usb_utr*, short unsigned int, short unsigned int)",22,0,141,0,0,0
,0,"usb_hstd_resume_process(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hdriver.c",1987,"usb_hstd_return_enu_mgr(struct usb_utr*, short unsigned int)",2,0,9,0,0,0
,0,"usb_hstd_send_start(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hlibusbip.c",66,"usb_hstd_set_dev_addr(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int)",3,0,19,0,0,0
,0,"usb_hstd_set_feature(struct usb_utr*, short unsigned int, short unsigned int, void(struct usb_utr*, short unsigned int, short unsigned int)*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_set_hse(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_set_hub_port(struct usb_utr*, short unsigned int, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_set_pipe_info(short unsigned int*, short unsigned int*, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hlibusbip.c",220,"usb_hstd_set_pipe_register(struct usb_utr*, short unsigned int, short unsigned int*)",14,0,90,0,0,0
,0,"usb_hstd_set_pipe_registration(struct usb_utr*, short unsigned int*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_set_retransfer(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_set_submitutr(struct usb_utr*) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_set_uact(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_setup_start(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hmanager.c",737,"usb_hstd_status_result(struct usb_utr*, short unsigned int, short unsigned int)",1,0,4,0,0,0
"r_usb_reg_access.h",366,"usb_hstd_status_start(struct usb_utr*)",13,0,58,0,0,0
,0,"usb_hstd_std_req_check(short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hmanager.c",750,"usb_hstd_submit_result(struct usb_utr*, short unsigned int, short unsigned int)",1,0,4,0,0,0
"r_usb_hmanager.c",1070,"usb_hstd_susp_cont(struct usb_utr*, short unsigned int, short unsigned int)",12,0,80,0,0,0
"r_usb_hdriver.c",439,"usb_hstd_suspend(struct usb_utr*, short unsigned int)",15,0,67,0,0,0
,0,"usb_hstd_suspend(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_suspend_process(struct usb_utr*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_hstd_transfer_end(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_hdriver.c",241,"usb_hstd_transfer_start(struct usb_utr*)",17,0,58,0,0,0
"r_usb_hinthandler_usbip0.c",65,"usb_hstd_usb_handler(long unsigned int)",9,0,28,0,0,0
"r_usb_hlibusbip.c",633,"usb_hstd_write_data(struct usb_utr*, short unsigned int, short unsigned int)",74,0,305,0,0,0
,0,"usb_hstd_write_fifo(struct usb_utr*, short unsigned int, short unsigned int, unsigned char*) (always inlined)",0,0,0,0,0,0
"r_usb_rz_mcu.c",104,"usb_module_start(unsigned char)",9,0,32,0,0,0
,0,"usb_module_stop(unsigned char) (always inlined)",0,0,0,0,0,0
,0,"usb_pdriver_init(struct usb_ctrl*, struct usb_cfg*) (always inlined)",0,0,0,0,0,0
"r_usb_pstdrequest.c",1249,"usb_peri_class_request(struct usb_setup*, short unsigned int)",32,0,93,0,0,0
,0,"usb_peri_class_request(struct usb_setup*, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_peri_class_request_rss(struct usb_setup*) (always inlined)",0,0,0,0,0,0
"r_usb_pstdrequest.c",1363,"usb_peri_class_request_rwds(struct usb_setup*)",6,0,19,0,0,0
,0,"usb_peri_class_request_rwds(struct usb_setup*) (always inlined)",0,0,0,0,0,0
,0,"usb_peri_class_request_wnss(struct usb_setup*) (always inlined)",0,0,0,0,0,0
,0,"usb_peri_class_request_wss(struct usb_setup*) (always inlined)",0,0,0,0,0,0
"r_usb_pdriver.c",1392,"usb_peri_configured(struct usb_utr*, short unsigned int, short unsigned int)",2,0,40,0,0,0
"r_usb_pdriver.c",1421,"usb_peri_detach(struct usb_utr*, short unsigned int, short unsigned int)",2,0,5,0,0,0
,0,"usb_peri_detach(struct usb_utr*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_pdriver.c",1421,"usb_peri_devdefault(struct usb_utr*, short unsigned int, short unsigned int)",11,0,115,0,0,0
"r_usb_pdriver.c",1473,"usb_peri_interface",1,0,1,0,0,0
,0,"usb_peri_other_request(struct usb_setup*) (always inlined)",0,0,0,0,0,0
,0,"usb_peri_pipe_info(unsigned char*, short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_peri_registration(struct usb_ctrl*, struct usb_cfg*) (always inlined)",0,0,0,0,0,0
"r_usb_pdriver.c",1461,"usb_peri_resume(struct usb_utr*, short unsigned int, short unsigned int)",2,0,9,0,0,0
"r_usb_pdriver.c",1445,"usb_peri_suspended(struct usb_utr*, short unsigned int, short unsigned int)",2,0,9,0,0,0
,0,"usb_pstd_attach_process() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_bemp_pipe(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_bemp_pipe_process_rohan_midi(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_brdy_pipe(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_brdy_pipe_process_rohan_midi(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_bus_reset() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_chk_configured() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_chk_pipe_info(short unsigned int, short unsigned int*, unsigned char*) (always inlined)",0,0,0,0,0,0
"r_usb_pdriver.c",633,"usb_pstd_chk_remote()",2,0,10,0,0,0
,0,"usb_pstd_chk_remote() (always inlined)",0,0,0,0,0,0
"r_usb_pstdfunction.c",65,"usb_pstd_chk_vbsts()",5,0,23,0,0,0
,0,"usb_pstd_clr_alt() (always inlined)",0,0,0,0,0,0
"r_usb_pdriver.c",443,"usb_pstd_clr_eptbl_index()",3,0,10,0,0,0
,0,"usb_pstd_clr_feature3() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_clr_mem() (always inlined)",0,0,0,0,0,0
"r_usb_reg_access.h",366,"usb_pstd_ctrl_end(short unsigned int)",7,0,34,0,0,0
,0,"usb_pstd_ctrl_end(short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_pcontrolrw.c",55,"usb_pstd_ctrl_read(long unsigned int, unsigned char*)",11,0,36,0,0,0
,0,"usb_pstd_detach_process() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_driver_registration(struct USB_PCDREG*) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_driver_release() (always inlined)",0,0,0,0,0,0
"r_usb_pdriver.c",1198,"usb_pstd_dummy_function",1,0,1,0,0,0
"r_usb_pdriver.c",1213,"usb_pstd_dummy_trn(struct usb_setup*, short unsigned int)",1,0,1,0,0,0
"r_usb_plibusbip.c",67,"usb_pstd_epadr2pipe(short unsigned int)",3,0,29,0,0,0
"r_usb_preg_abs.c",602,"usb_pstd_forced_termination(short unsigned int, short unsigned int)",15,0,62,0,0,0
,0,"usb_pstd_get_configuration1() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_get_current_power() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_get_descriptor1() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_get_interface1() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_get_interface_num(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_get_status1() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_hi_speed_enable() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_interrupt(short unsigned int, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_interrupt_clock() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_interrupt_handler(short unsigned int*, short unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_pcd_task() (always inlined)",0,0,0,0,0,0
"r_usb_plibusbip.c",650,"usb_pstd_read_data(short unsigned int, short unsigned int)",36,0,121,0,0,0
,0,"usb_pstd_read_fifo(short unsigned int, short unsigned int, unsigned char*) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_save_request() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_set_address3() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_set_config_num(short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_set_configuration0() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_set_configuration3() (always inlined)",0,0,0,0,0,0
"r_usb_pdriver.c",550,"usb_pstd_set_eptbl_index(short unsigned int, short unsigned int, short unsigned int)",23,0,59,0,0,0
,0,"usb_pstd_set_feature3() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_set_interface0() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_set_interface3() (always inlined)",0,0,0,0,0,0
"r_usb_pdriver.c",698,"usb_pstd_set_pipe_register(short unsigned int, short unsigned int*)",9,0,61,0,0,0
,0,"usb_pstd_set_stall(short unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_preg_abs.c",488,"usb_pstd_set_stall_pipe0()",1,0,4,0,0,0
,0,"usb_pstd_stand_req0() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_stand_req1() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_stand_req2() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_stand_req3() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_stand_req4() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_stand_req5() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_stop_clock() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_suspend_process() (always inlined)",0,0,0,0,0,0
,0,"usb_pstd_test_mode() (always inlined)",0,0,0,0,0,0
"r_usb_preg_abs.c",664,"usb_pstd_usb_handler(long unsigned int)",47,7,135,26,957,31014
,0,"usb_pstd_usb_handler(long unsigned int) (always inlined)",0,0,0,0,0,0
"r_usb_plibusbip.c",330,"usb_pstd_write_data(short unsigned int, short unsigned int)",36,0,125,0,0,0
,0,"usb_pstd_write_fifo(short unsigned int, short unsigned int, unsigned char*) (always inlined)",0,0,0,0,0,0
"r_usb_plibusbip.c",586,"usb_read_data_fast_rohan(short unsigned int)",12,0,39,0,0,0
"r_usb_hlibusbip.c",740,"usb_receive_start_rohan_midi(short unsigned int)",18,0,49,0,0,0
,0,"usb_registration(struct usb_utr*) (always inlined)",0,0,0,0,0,0
"r_usb_hdriver.c",1281,"usb_send_start_rohan(struct usb_utr*, short unsigned int, const unsigned char*, int)",21,0,76,0,0,0
"r_usb_clibusbip.c",301,"usb_set_event(short unsigned int, struct usb_ctrl*)",3,0,21,0,0,0
,0,"usbReceiveComplete(long int, long int, long int) (always inlined)",0,0,0,0,0,0
"midi_engine.cpp",189,"usbReceiveCompletePeripheralOrA1(struct usb_utr*, short unsigned int, short unsigned int)",7,0,31,0,0,0
"midi_engine.cpp",76,"usbSendCompleteAsHost(long int)",17,0,46,0,0,0
,0,"usbSendCompleteAsPeripheral(long int) (always inlined)",0,0,0,0,0,0
"midi_engine.cpp",128,"usbSendCompletePeripheralOrA1(struct usb_utr*, short unsigned int, short unsigned int)",3,0,11,0,0,0
,0,"userdef_bsc_cs2_init(unsigned char) (always inlined)",0,0,0,0,0,0
"intc_userdef.c",707,"Userdef_INTC_Dummy_Interrupt(long unsigned int)",2,0,3,0,0,0
,0,"Userdef_INTC_HandlerExe(short unsigned int, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"Userdef_INTC_RegistIntFunc(short unsigned int, void(long unsigned int)*) (always inlined)",0,0,0,0,0,0
"sio_char.c",103,"Userdef_SCIF_UART_Init(unsigned char, long unsigned int, short unsigned int, unsigned char)",15,0,55,0,0,0
"spibsc_flash_userdef.c",148,"Userdef_SFLASH_Busy_Wait(long unsigned int, long unsigned int, unsigned char)",5,0,12,0,0,0
,0,"Userdef_SFLASH_Set_Mode(long unsigned int, long unsigned int, enum en_sf_req_t, unsigned char, unsigned char) (always inlined)",0,0,0,0,0,0
"spibsc_flash_userdef.c",116,"Userdef_SFLASH_Write_Enable(long unsigned int)",6,0,19,0,0,0
,0,"Userdef_SPIBSC_Set_Config(long unsigned int, struct st_spibsc_cfg_t*) (always inlined)",0,0,0,0,0,0
,0,"usToFastTimerCount(long unsigned int) (always inlined)",0,0,0,0,0,0
"invalidate.S",62,"v7_dma_flush_range",9,0,14,0,0,0
"invalidate.S",34,"v7_dma_inv_range",14,0,18,0,0,0
,0,"vadd_f32(float[2], float[2]) (always inlined)",0,0,0,0,0,0
,0,"vadd_s32(int[2], int[2]) (always inlined)",0,0,0,0,0,0
,0,"vaddq_s16(short int[8], short int[8]) (always inlined)",0,0,0,0,0,0
,0,"vaddq_s32(int[4], int[4]) (always inlined)",0,0,0,0,0,0
,0,"vaddq_u32(unsigned int[1], unsigned int[1]) (always inlined)",0,0,0,0,0,0
"ff.c",3613,"validate(struct FFOBJID*, struct FATFS**)",3,0,34,0,0,0
,0,"Value<bool>::getValue(const class Value<bool>*) (always inlined)",0,0,0,0,0,0
"value.h",85,"Value<bool>::readValueAgain(const class Value<bool>*)",2,0,17,0,0,0
,0,"Value<bool>::readValueAgain(const class Value<bool>*) (always inlined)",0,0,0,0,0,0
,0,"Value<bool>::setValue(const class Value<bool>*, bool) (always inlined)",0,0,0,0,0,0
,0,"Value<bool>::Value(const class Value<bool>*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"display.h",92,"Value<long int>::beginSession(const class Value<long int>*, class MenuItem*)",2,0,10,0,0,0
,0,"Value<long int>::getValue<ArpMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<ArpNoteMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<ArpOctaveMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<ArpPreset>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<GateType>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<GridDefaultActiveMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<InputMonitoringMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<KeyboardLayout>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<KeyboardLayoutType>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<LFOType>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<MIDIFollowChannelType>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<MIDIFollowFeedbackAutomationMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<MIDITakeoverMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<MIDITransposeControlMethod>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<OscType>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<PerformanceEditingMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<PolyphonyMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<SampleRepeatMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<SequenceDirection>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<SessionLayoutType>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<SynthMode>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::getValue<VoicePriority>(const class Value<long int>*) (always inlined)",0,0,0,0,0,0
"value.h",85,"Value<long int>::readValueAgain(const class Value<long int>*)",2,0,17,0,0,0
"value.h",71,"Value<long int>::selectEncoderAction(const class Value<long int>*, long int)",3,0,17,0,0,0
,0,"Value<long int>::setValue<ArpMode>(const class Value<long int>*, enum ArpMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<ArpMpeModSource>(const class Value<long int>*, enum ArpMpeModSource) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<ArpNoteMode>(const class Value<long int>*, enum ArpNoteMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<ArpOctaveMode>(const class Value<long int>*, enum ArpOctaveMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<ArpPreset>(const class Value<long int>*, enum ArpPreset) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<deluge::gui::menu_item::Colour::Option>(const class Value<long int>*, enum Option) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<FilterMode>(const class Value<long int>*, enum FilterMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<FilterRoute>(const class Value<long int>*, enum FilterRoute) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<GateType>(const class Value<long int>*, enum GateType) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<GridDefaultActiveMode>(const class Value<long int>*, enum GridDefaultActiveMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<InputMonitoringMode>(const class Value<long int>*, enum InputMonitoringMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<InterpolationMode>(const class Value<long int>*, enum InterpolationMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<KeyboardLayout>(const class Value<long int>*, enum KeyboardLayout) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<KeyboardLayoutType>(const class Value<long int>*, enum KeyboardLayoutType) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<LFOType>(const class Value<long int>*, enum LFOType) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<MIDIFollowChannelType>(const class Value<long int>*, enum MIDIFollowChannelType) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<MIDIFollowFeedbackAutomationMode>(const class Value<long int>*, enum MIDIFollowFeedbackAutomationMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<MIDITakeoverMode>(const class Value<long int>*, enum MIDITakeoverMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<MIDITransposeControlMethod>(const class Value<long int>*, enum MIDITransposeControlMethod) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<ModFXType>(const class Value<long int>*, enum ModFXType) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<PerformanceEditingMode>(const class Value<long int>*, enum PerformanceEditingMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<PolyphonyMode>(const class Value<long int>*, enum PolyphonyMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<SampleRepeatMode>(const class Value<long int>*, enum SampleRepeatMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<SequenceDirection>(const class Value<long int>*, enum SequenceDirection) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<SessionLayoutType>(const class Value<long int>*, enum SessionLayoutType) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<StartupSongMode>(const class Value<long int>*, enum StartupSongMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<SynthMode>(const class Value<long int>*, enum SynthMode) (always inlined)",0,0,0,0,0,0
,0,"Value<long int>::setValue<VoicePriority>(const class Value<long int>*, enum VoicePriority) (always inlined)",0,0,0,0,0,0
,0,"vand_s16(short int[1], short int[1]) (always inlined)",0,0,0,0,0,0
,0,"variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::emplace<0>(const class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::emplace<1>(const class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::emplace<deluge::dsp::reverb::Freeverb>(const class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::emplace<deluge::dsp::reverb::Mutable>(const class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::index(const class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
,0,"variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>::~variant(const class variant<deluge::dsp::reverb::Freeverb, deluge::dsp::reverb::Mutable>*) (always inlined)",0,0,0,0,0,0
"access.S",168,"VbarInit",3,3,3,3,1,3
,0,"vcombine_s32(int[2], int[2]) (always inlined)",0,0,0,0,0,0
,0,"vdupq_n_s32(long int) (always inlined)",0,0,0,0,0,0
,0,"vdupq_n_u32(long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::_M_check_len(const class vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >*, unsigned int, const char*) (always inlined)",0,0,0,0,0,0
,0,"vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::_M_range_initialize<const deluge::l10n::String*>(const class vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >*, const enum String*, const enum String*, struct forward_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::_M_realloc_insert<deluge::l10n::String>(const class vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >*, class __normal_iterator<deluge::l10n::String*, std::vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> > >, enum String) (always inlined)",0,0,0,0,0,0
,0,"vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::_S_relocate(enum String*, enum String*, enum String*, class fallback_allocator<deluge::l10n::String>&) (always inlined)",0,0,0,0,0,0
,0,"vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::emplace_back<deluge::l10n::String>(const class vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >*, enum String) (always inlined)",0,0,0,0,0,0
,0,"vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::pop_back(const class vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >*) (always inlined)",0,0,0,0,0,0
,0,"vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::push_back(const class vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >*, enum String) (always inlined)",0,0,0,0,0,0
,0,"vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >::~vector(const class vector<deluge::l10n::String, deluge::memory::fallback_allocator<deluge::l10n::String> >*) (always inlined)",0,0,0,0,0,0
"stl_vector.h",1684,"vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> >::_M_range_initialize<__gnu_cxx::__normal_iterator<MenuItem**, std::span<MenuItem*> > >(const class vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> >*, class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, struct forward_iterator_tag)",13,0,30,0,0,0
"stl_vector.h",1684,"vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> >::_M_range_initialize<MenuItem* const*>(const class vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> >*, const class MenuItem**, const class MenuItem**, struct forward_iterator_tag)",13,0,30,0,0,0
,0,"vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> >::vector<__gnu_cxx::__normal_iterator<MenuItem**, std::span<MenuItem*> > >(const class vector<MenuItem*, deluge::memory::fallback_allocator<MenuItem*> >*, class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, class __normal_iterator<MenuItem**, std::span<MenuItem*, 4294967295> >, const class fallback_allocator<MenuItem*>&) (always inlined)",0,0,0,0,0,0
,0,"vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::_M_allocate_and_copy<const RuntimeFeatureSettingOption*>(const class vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >*, unsigned int, const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
"vector.tcc",315,"vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::_M_assign_aux<const RuntimeFeatureSettingOption*>(const class vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >*, const struct RuntimeFeatureSettingOption*, const struct RuntimeFeatureSettingOption*, struct forward_iterator_tag)",28,0,120,0,0,0
,0,"vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::_M_erase_at_end(const class vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >*, struct RuntimeFeatureSettingOption*) (always inlined)",0,0,0,0,0,0
,0,"vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::_S_check_init_len(unsigned int, const class fallback_allocator<RuntimeFeatureSettingOption>&) (always inlined)",0,0,0,0,0,0
,0,"vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >::capacity(const class vector<RuntimeFeatureSettingOption, deluge::memory::fallback_allocator<RuntimeFeatureSettingOption> >*) (always inlined)",0,0,0,0,0,0
,0,"vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::_M_range_initialize<char const**>(const class vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >*, const char**, const char**, struct forward_iterator_tag) (always inlined)",0,0,0,0,0,0
,0,"vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::_M_range_initialize<const std::basic_string_view<char>*>(const class vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >*, const class basic_string_view<char, std::char_traits<char> >*, const class basic_string_view<char, std::char_traits<char> >*, struct forward_iterator_tag) (always inlined)",0,0,0,0,0,0
"vector.tcc",445,"vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::_M_realloc_insert<std::basic_string_view<char, std::char_traits<char> > >(const class vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >*, class __normal_iterator<std::basic_string_view<char, std::char_traits<char> >*, std::vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > > >, class basic_string_view<char, std::char_traits<char> >)",10,0,123,0,0,0
,0,"vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::back(const class vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >*) (always inlined)",0,0,0,0,0,0
,0,"vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::vector(const class vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >*) (always inlined)",0,0,0,0,0,0
,0,"vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >::vector<char const**>(const class vector<std::basic_string_view<char, std::char_traits<char> >, deluge::memory::fallback_allocator<std::basic_string_view<char, std::char_traits<char> > > >*, const char**, const char**, const class fallback_allocator<std::basic_string_view<char, std::char_traits<char> > >&) (always inlined)",0,0,0,0,0,0
"velocity.h",27,"Velocity::getMaxValue(const class Velocity*)",1,0,2,0,0,0
"velocity.h",28,"Velocity::readCurrentValue(const class Velocity*)",2,0,5,0,0,0
,0,"Velocity::Velocity(const class Velocity*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"velocity.h",30,"Velocity::writeCurrentValue(const class Velocity*)",5,0,23,0,0,0
"menu_item.h",54,"Velocity::~Velocity(const class Velocity*)",1,0,1,0,0,0
"velocity.h",23,"Velocity::~Velocity(const class Velocity*)",2,0,6,0,0,0
"velocity.cpp",61,"VelocityColumn::handlePad(const class VelocityColumn*, class ModelStackWithTimelineCounter*, struct PressedPad, class KeyboardLayout*)",12,0,90,0,0,0
"velocity.cpp",43,"VelocityColumn::handleVerticalEncoder(const class VelocityColumn*, signed char, long int)",8,0,107,0,0,0
"velocity.cpp",29,"VelocityColumn::renderColumn(const class VelocityColumn*, class RGB[18]*, long int)",4,0,99,0,0,0
,0,"VelocityColumn::VelocityColumn(const class VelocityColumn*, unsigned char) (always inlined)",0,0,0,0,0,0
"version.h",37,"Version::beginSession(const class Version*, class MenuItem*)",6,0,26,0,0,0
"version.h",30,"Version::drawPixelsForOled(const class Version*)",1,0,6,0,0,0
"version.h",30,"Version::getOptions(const class Version*)",4,0,45,0,0,0
"version.h",26,"Version::readCurrentValue(const class Version*)",2,0,5,0,0,0
,0,"Version::Version(const class Version*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"Version::writeCurrentValue(const class Version*)",11,0,31,0,0,0
"menu_item.h",54,"Version::~Version(const class Version*)",1,0,1,0,0,0
"menu_item.h",54,"Version::~Version(const class Version*)",1,0,1,0,0,0
"version.h",23,"Version::~Version(const class Version*)",2,0,6,0,0,0
"version.h",25,"Version::~Version(const class Version*)",2,0,6,0,0,0
,0,"vget_lane_f32(float[2], const int) (always inlined)",0,0,0,0,0,0
,0,"vget_lane_s32(int[2], const int) (always inlined)",0,0,0,0,0,0
,0,"vgetq_lane_u32(unsigned int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vhsubq_s32(int[4], int[4]) (always inlined)",0,0,0,0,0,0
"view.cpp",144,"View::buttonAction(unsigned char, bool, bool, const class View*)",151,0,601,0,0,0
,0,"View::calculateKnobPosForDisplay(const class View*, enum Kind, long int, long int) (always inlined)",0,0,0,0,0,0
"view.cpp",1168,"View::calculateKnobPosForDisplay(enum Kind, long int, long int, const class View*)",9,0,31,0,0,0
,0,"View::ccReceivedForMIDILearn(const class View*, class MIDIDevice*, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"view.cpp",2496,"View::changeOutputType(enum OutputType, class ModelStackWithTimelineCounter*, bool, const class View*)",17,0,55,0,0,0
"view.cpp",755,"View::clearMelodicInstrumentMonoExpressionIfPossible(const class View*)",19,0,40,0,0,0
"view.cpp",511,"View::clipStatusMidiLearnPadPressed(bool, class Clip*, const class View*)",13,0,27,0,0,0
,0,"View::clipStatusPadAction(const class View*, class Clip*, bool, long int) (always inlined)",0,0,0,0,0,0
,0,"View::convertPatchCableKnobPosToIndicatorLevel(const class View*, long int) (always inlined)",0,0,0,0,0,0
"view.cpp",1851,"View::cycleThroughReverbPresets(const class View*)",12,0,37,0,0,0
,0,"View::displayAutomation(const class View*) (always inlined)",0,0,0,0,0,0
"view.cpp",1094,"View::displayModEncoderValuePopup(enum Kind, long int, long int, enum PatchSource, enum PatchSource, const class View*)",27,0,228,0,0,0
"view.cpp",1888,"View::displayOutputName(class Output*, bool, class Clip*, const class View*)",11,0,29,0,0,0
"view.cpp",1910,"View::drawOutputNameFromDetails(enum OutputType, long int, long int, const char*, bool, bool, class Clip*, const class View*)",82,0,435,0,0,0
"view.cpp",538,"View::drumMidiLearnPadPressed(bool, class Drum*, class Kit*, const class View*)",14,0,36,0,0,0
,0,"View::drumMidiLearnPadPressed(const class View*, bool, class Drum*, class Kit*) (always inlined)",0,0,0,0,0,0
"ui_timer_manager.cpp",250,"View::endMIDILearn(const class View*)",11,0,27,0,0,0
"view.cpp",577,"View::endMidiLearnPressSession(enum MidiLearn, const class View*)",8,0,16,0,0,0
,0,"View::flashPlayDisable(const class View*) (always inlined)",0,0,0,0,0,0
"ui_timer_manager.cpp",228,"View::flashPlayEnable(const class View*)",1,0,3,0,0,0
"ui_timer_manager.cpp",250,"View::focusRegained(const class View*)",10,0,25,0,0,0
"view.cpp",2538,"View::getClipMuteSquareColour(class Clip*, class RGB, bool, bool, const class View*)",32,0,184,0,0,0
"view.cpp",1864,"View::getCurrentReverbPreset(const class View*)",11,0,58,0,0,0
,0,"View::getMaxYDisplayForVUMeter(const class View*, float) (always inlined)",0,0,0,0,0,0
"view.cpp",975,"View::getModelStackWithParam(long int, bool&, const class View*)",15,0,74,0,0,0
"view.cpp",1589,"View::getModKnobMode(const class View*)",7,0,13,0,0,0
"view.cpp",1016,"View::getParameterNameFromModEncoder(long int, char*, const class View*)",23,0,145,0,0,0
,0,"View::getReverbPresetDisplayName(const class View*, long int) (always inlined)",0,0,0,0,0,0
"view.cpp",1187,"View::instrumentBeenEdited(const class View*)",6,0,21,0,0,0
,0,"View::instrumentBeenEdited(const class View*) (always inlined)",0,0,0,0,0,0
"view.cpp",2527,"View::instrumentChanged(class ModelStackWithTimelineCounter*, class Instrument*, const class View*)",9,0,41,0,0,0
,0,"View::instrumentChanged(const class View*, class ModelStackWithTimelineCounter*, class Instrument*) (always inlined)",0,0,0,0,0,0
"view.cpp",557,"View::instrumentMidiLearnPadPressed(bool, class Instrument*, const class View*)",16,0,42,0,0,0
,0,"View::instrumentMidiLearnPadPressed(const class View*, bool, class Instrument*) (always inlined)",0,0,0,0,0,0
,0,"View::isClipContext(const class View*) (always inlined)",0,0,0,0,0,0
"view.cpp",807,"View::midiLearnFlash(const class View*)",13,0,50,0,0,0
"view.cpp",1356,"View::modButtonAction(unsigned char, bool, const class View*)",21,0,88,0,0,0
"view.cpp",829,"View::modEncoderAction(long int, long int, const class View*)",59,0,281,0,0,0
"view.cpp",1193,"View::modEncoderButtonAction(unsigned char, bool, const class View*)",22,0,109,0,0,0
"view.cpp",2126,"View::navigateThroughAudioOutputsForAudioClip(long int, class AudioClip*, bool, const class View*)",33,0,125,0,0,0
"view.cpp",2169,"View::navigateThroughPresetsForInstrumentClip(long int, class ModelStackWithTimelineCounter*, bool, const class View*)",136,0,535,0,0,0
"view.cpp",596,"View::noteOnReceivedForMidiLearn(class MIDIDevice*, long int, long int, long int, const class View*)",101,0,326,0,0,0
"view.cpp",525,"View::noteRowMuteMidiLearnPadPressed(bool, class NoteRow*, const class View*)",13,0,28,0,0,0
"view.cpp",1600,"View::notifyParamAutomationOccurred(class ParamManager*, bool, const class View*)",11,0,35,0,0,0
,0,"View::notifyParamAutomationOccurred(const class View*, class ParamManager*, bool) (always inlined)",0,0,0,0,0,0
"view.cpp",1068,"View::potentiallyMakeItHarderToTurnKnob(long int, class ModelStackWithAutoParam*, long int, const class View*)",23,0,103,0,0,0
"view.cpp",1664,"View::potentiallyRenderVUMeter(class RGB[18]*, const class View*)",23,0,102,0,0,0
,0,"View::potentiallyRenderVUMeter(const class View*, class RGB[18]*) (always inlined)",0,0,0,0,0,0
,0,"View::pretendModKnobsUntouchedForAWhile(const class View*) (always inlined)",0,0,0,0,0,0
"view.cpp",1754,"View::renderVUMeter(long int, long int, class RGB[18]*, const class View*)",8,0,33,0,0,0
"view.cpp",497,"View::sectionMidiLearnPadPressed(bool, unsigned char, const class View*)",13,0,33,0,0,0
,0,"View::sectionMidiLearnPadPressed(const class View*, bool, unsigned char) (always inlined)",0,0,0,0,0,0
"view.cpp",1623,"View::sendMidiFollowFeedback(class ModelStackWithAutoParam*, long int, bool, const class View*)",32,0,136,0,0,0
"view.cpp",1771,"View::setActiveModControllableTimelineCounter(class TimelineCounter*, const class View*)",20,0,71,0,0,0
,0,"View::setActiveModControllableWithoutTimelineCounter(const class View*, class ModControllable*, class ParamManager*) (always inlined)",0,0,0,0,0,0
"view.cpp",1263,"View::setKnobIndicatorLevel(unsigned char, const class View*)",31,0,162,0,0,0
"view.cpp",1239,"View::setKnobIndicatorLevels(const class View*)",9,0,56,0,0,0
,0,"View::setKnobIndicatorLevels(const class View*) (always inlined)",0,0,0,0,0,0
,0,"View::setLedStates(const class View*) (always inlined)",0,0,0,0,0,0
"view.cpp",1407,"View::setModLedStates(const class View*)",48,0,275,0,0,0
"view.cpp",1825,"View::setModRegion(long unsigned int, long unsigned int, long int, const class View*)",13,0,37,0,0,0
"view.cpp",480,"View::setTimeBaseScaleLedState(const class View*)",7,0,26,0,0,0
"view.cpp",128,"View::setTripletsLedState(const class View*)",5,0,19,0,0,0
,0,"vld1_f32(const float*) (always inlined)",0,0,0,0,0,0
,0,"vld1q_lane_u32(const long unsigned int*, unsigned int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vld1q_s16(const short int*) (always inlined)",0,0,0,0,0,0
,0,"vld1q_s32(const long int*) (always inlined)",0,0,0,0,0,0
,0,"vld1q_u32(const long unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"vld2q_s32(const long int*) (always inlined)",0,0,0,0,0,0
,0,"vmlal_s16(int[4], short int[4], short int[4]) (always inlined)",0,0,0,0,0,0
,0,"vmovn_u32(unsigned int[1]) (always inlined)",0,0,0,0,0,0
,0,"vmul_f32(float[2], float[2]) (always inlined)",0,0,0,0,0,0
,0,"vmull_s16(short int[4], short int[4]) (always inlined)",0,0,0,0,0,0
,0,"vnegq_s32(int[4]) (always inlined)",0,0,0,0,0,0
,0,"Voice::adjustPitch(const class Voice*, long unsigned int*, long int) (always inlined)",0,0,0,0,0,0
,0,"Voice::areAllUnisonPartsInactive(const class Voice*, class ModelStackWithVoice*) (always inlined)",0,0,0,0,0,0
"voice.cpp",418,"Voice::calculatePhaseIncrements(const class Voice*, class ModelStackWithVoice*)",36,0,251,0,0,0
"voice.cpp",359,"Voice::changeNoteCode(const class Voice*, class ModelStackWithVoice*, long int, long int, long int, const short int*)",7,0,42,0,0,0
,0,"Voice::combineExpressionValues(const class Voice*, class Sound*, long int) (always inlined)",0,0,0,0,0,0
,0,"Voice::doFastRelease(const class Voice*, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"Voice::doImmediateRelease(const class Voice*) (always inlined)",0,0,0,0,0,0
,0,"Voice::expressionEventImmediate(const class Voice*, class Sound*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"Voice::expressionEventSmooth(const class Voice*, long int, long int) (always inlined)",0,0,0,0,0,0
,0,"Voice::getLocalLFOPhaseIncrement(const class Voice*) (always inlined)",0,0,0,0,0,0
"voice.cpp",3343,"Voice::getPriorityRating(const class Voice*)",2,0,15,0,0,0
"voice.cpp",572,"Voice::noteOff(const class Voice*, class ModelStackWithVoice*, bool)",28,0,123,0,0,0
,0,"Voice::randomizeOscPhases(const class Voice*, class Sound*) (always inlined)",0,0,0,0,0,0
"voice.cpp",2059,"Voice::renderBasicSource(const class Voice*, class Sound*, class ParamManagerForTimeline*, long int, long int* restrict, long int, bool, long int, bool* restrict, long int, bool, long unsigned int* restrict, long unsigned int* restrict, long int, long unsigned int* restrict, bool, long int)",311,0,2288,0,0,0
,0,"Voice::renderFMWithFeedback(const class Voice*, long int*, long int, long int*, long unsigned int*, long int, long unsigned int, long int, long int*, long int) (always inlined)",0,0,0,0,0,0
,0,"Voice::renderFMWithFeedbackAdd(const class Voice*, long int*, long int, long int*, long unsigned int*, long int, long unsigned int, long int, long int*, long int) (always inlined)",0,0,0,0,0,0
"voice.cpp",2842,"Voice::renderOsc(const class Voice*, long int, enum OscType, long int, long int*, long int*, long int, long unsigned int, long unsigned int, long unsigned int*, bool, long int, bool, long unsigned int, long unsigned int, long unsigned int, long int)",189,0,3332,0,0,0
"voice.cpp",1816,"Voice::renderSineWaveWithFeedback(long int*, long int, long unsigned int*, long int, long unsigned int, long int, long int*, bool, long int, const class Voice*)",39,0,155,0,0,0
,0,"Voice::setAsUnassigned(const class Voice*, class ModelStackWithVoice*, bool) (always inlined)",0,0,0,0,0,0
"voice.cpp",383,"Voice::setupPorta(const class Voice*, class Sound*)",9,0,25,0,0,0
"voice.cpp",106,"Voice::unassignStuff(const class Voice*, bool)",4,0,28,0,0,0
"patcher.cpp",27,"Voice::Voice(const class Voice*)",7,0,23,0,0,0
"polyphony.h",44,"VoiceCount::getMaxValue(const class VoiceCount*)",1,0,2,0,0,0
"polyphony.h",47,"VoiceCount::isRelevant(const class VoiceCount*, class ModControllableAudio*, long int)",1,0,5,0,0,0
"polyphony.h",34,"VoiceCount::readCurrentValue(const class VoiceCount*)",2,0,25,0,0,0
,0,"VoiceCount::VoiceCount(const class VoiceCount*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"VoiceCount::writeCurrentValue(const class VoiceCount*)",2,0,9,0,0,0
"polyphony.h",29,"VoiceCount::~VoiceCount(const class VoiceCount*)",2,0,6,0,0,0
"menu_item.h",54,"VoiceCount::~VoiceCount(const class VoiceCount*)",1,0,1,0,0,0
"voice_sample.cpp",172,"VoiceSample::attemptLateSampleStart(const class VoiceSample*, class SamplePlaybackGuide*, class Sample*, long long int, long int)",27,0,146,0,0,0
,0,"VoiceSample::beenUnassigned(const class VoiceSample*, bool) (always inlined)",0,0,0,0,0,0
"voice_sample.cpp",82,"VoiceSample::endTimeStretching(const class VoiceSample*)",9,0,28,0,0,0
,0,"VoiceSample::fudgeTimeStretchingToAvoidClick(const class VoiceSample*, class Sample*, class SamplePlaybackGuide*, long int, long int, long int, long int) (always inlined)",0,0,0,0,0,0
"voice_sample.cpp",1738,"VoiceSample::getPlaySample(const class VoiceSample*, class Sample*, class SamplePlaybackGuide*)",5,0,15,0,0,0
,0,"VoiceSample::getPlaySample(const class VoiceSample*, class Sample*, class SamplePlaybackGuide*) (always inlined)",0,0,0,0,0,0
,0,"VoiceSample::noteOffWhenLoopEndPointExists(const class VoiceSample*, class Voice*, class VoiceSamplePlaybackGuide*) (always inlined)",0,0,0,0,0,0
"voice_sample.cpp",1759,"VoiceSample::possiblySetUpCache(const class VoiceSample*, class SampleControls*, class SamplePlaybackGuide*, long int, long int, long int, enum LoopType)",41,0,204,0,0,0
"voice_sample.cpp",427,"VoiceSample::render(const class VoiceSample*, class SamplePlaybackGuide*, long int* restrict, long int, class Sample*, long int, enum LoopType, long int, long int, long int, long int, long int, enum InterpolationMode, long int)",273,0,1680,0,0,0
"voice_sample.cpp",1568,"VoiceSample::sampleZoneChanged(const class VoiceSample*, class SamplePlaybackGuide*, class Sample*, enum MarkerType, enum LoopType, long int, bool)",35,0,208,0,0,0
"voice_sample.cpp",94,"VoiceSample::setupCacheLoopPoints(const class VoiceSample*, class SamplePlaybackGuide*, class Sample*, enum LoopType)",20,0,159,0,0,0
"voice_sample.h",56,"VoiceSample::shouldObeyMarkers(const class VoiceSample*)",1,0,10,0,0,0
,0,"VoiceSample::shouldObeyMarkers(const class VoiceSample*) (always inlined)",0,0,0,0,0,0
,0,"VoiceSample::stopReadingFromCache(const class VoiceSample*) (always inlined)",0,0,0,0,0,0
"voice_sample.cpp",377,"VoiceSample::stopUsingCache(const class VoiceSample*, class SamplePlaybackGuide*, class Sample*, long int, bool)",7,0,30,0,0,0
"voice_sample.cpp",1750,"VoiceSample::switchToReadingCacheFromWriting(const class VoiceSample*)",3,0,18,0,0,0
,0,"VoiceSample::VoiceSample(const class VoiceSample*) (always inlined)",0,0,0,0,0,0
"voice_sample.cpp",318,"VoiceSample::weShouldBeTimeStretchingNow(const class VoiceSample*, class Sample*, class SamplePlaybackGuide*, long int, long int, long int, long int, long int, enum LoopType)",14,0,783,0,0,0
"voice_sample_playback_guide.cpp",74,"VoiceSamplePlaybackGuide::getBytePosToEndOrLoopPlayback(const class VoiceSamplePlaybackGuide*)",3,0,8,0,0,0
"voice_sample_playback_guide.cpp",78,"VoiceSamplePlaybackGuide::getBytePosToStartPlayback(const class VoiceSamplePlaybackGuide*, bool)",3,0,5,0,0,0
"voice_sample_playback_guide.h",38,"VoiceSamplePlaybackGuide::getLoopEndPlaybackAtByte(const class VoiceSamplePlaybackGuide*)",1,0,5,0,0,0
,0,"VoiceSamplePlaybackGuide::getLoopingType(const class VoiceSamplePlaybackGuide*, class Source*) (always inlined)",0,0,0,0,0,0
"voice_sample_playback_guide.h",37,"VoiceSamplePlaybackGuide::getLoopStartPlaybackAtByte(const class VoiceSamplePlaybackGuide*)",1,0,2,0,0,0
"voice_sample_playback_guide.cpp",30,"VoiceSamplePlaybackGuide::setupPlaybackBounds(const class VoiceSamplePlaybackGuide*, bool)",13,0,53,0,0,0
,0,"VoiceSamplePlaybackGuide::shouldObeyLoopEndPointNow(const class VoiceSamplePlaybackGuide*) (always inlined)",0,0,0,0,0,0
,0,"VoiceSamplePlaybackGuide::VoiceSamplePlaybackGuide(const class VoiceSamplePlaybackGuide*) (always inlined)",0,0,0,0,0,0
"audio_engine.cpp",1381,"voiceSampleUnassigned(class VoiceSample*)",4,0,18,0,0,0
,0,"voiceSampleUnassigned(class VoiceSample*) (always inlined)",0,0,0,0,0,0
,0,"VoiceUnisonPart::VoiceUnisonPart(const class VoiceUnisonPart*) (always inlined)",0,0,0,0,0,0
,0,"VoiceUnisonPartSource::getPitchAndSpeedParams(const class VoiceUnisonPartSource*, class Source*, class VoiceSamplePlaybackGuide*, long unsigned int*, long unsigned int*, long unsigned int*) (always inlined)",0,0,0,0,0,0
,0,"VoiceUnisonPartSource::getSpeedParamForNoSyncing(const class VoiceUnisonPartSource*, class Source*, long int, long int) (always inlined)",0,0,0,0,0,0
"voice_unison_part_source.cpp",96,"VoiceUnisonPartSource::unassign(const class VoiceUnisonPartSource*, bool)",14,0,28,0,0,0
,0,"VoiceUnisonPartSource::VoiceUnisonPartSource(const class VoiceUnisonPartSource*) (always inlined)",0,0,0,0,0,0
"voice_vector.cpp",24,"VoiceVector::checkVoiceExists(class Voice*, class Sound*, const char*, const class VoiceVector*)",6,0,25,0,0,0
,0,"VoiceVector::checkVoiceExists(const class VoiceVector*, class Voice*, class Sound*, const char*) (always inlined)",0,0,0,0,0,0
"voice_vector.cpp",39,"VoiceVector::getRangeForSound(class Sound*, long int* restrict, const class VoiceVector*)",4,0,12,0,0,0
,0,"VoiceVector::getVoice(const class VoiceVector*, long int) (always inlined)",0,0,0,0,0,0
"value.h",42,"Volts::drawPixelsForOled(const class Volts*)",3,0,16,0,0,0
,0,"Volts::drawPixelsForOled(const class Volts*) (always inlined)",0,0,0,0,0,0
"value.h",42,"Volts::drawValue(const class Volts*)",4,0,26,0,0,0
,0,"Volts::drawValue(const class Volts*) (always inlined)",0,0,0,0,0,0
"volts.h",33,"Volts::getMaxValue(const class Volts*)",1,0,2,0,0,0
"value.h",42,"Volts::horizontalEncoderAction(const class Volts*, long int)",2,0,4,0,0,0
"volts.h",37,"Volts::readCurrentValue(const class Volts*)",2,0,10,0,0,0
,0,"Volts::Volts(const class Volts*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"volts.h",40,"Volts::writeCurrentValue(const class Volts*)",2,0,11,0,0,0
"volts.h",26,"Volts::~Volts(const class Volts*)",4,0,17,0,0,0
"volts.h",26,"Volts::~Volts(const class Volts*)",4,0,14,0,0,0
,0,"Volts::~Volts(const class Volts*) (always inlined)",0,0,0,0,0,0
"value.h",42,"Volume::drawPixelsForOled(const class Volume*)",3,0,19,0,0,0
"value.h",42,"Volume::drawValue(const class Volume*)",4,0,28,0,0,0
"volume.h",33,"Volume::getMinValue(const class Volume*)",1,0,2,0,0,0
"sound.h",199,"Volume::isRelevant(const class Volume*, class ModControllableAudio*, long int)",1,0,5,0,0,0
"volume.h",27,"Volume::readCurrentValue(const class Volume*)",2,0,10,0,0,0
,0,"Volume::Volume(const class Volume*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"value.h",42,"Volume::writeCurrentValue(const class Volume*)",2,0,12,0,0,0
"menu_item.h",54,"Volume::~Volume(const class Volume*)",1,0,1,0,0,0
"volume.h",24,"Volume::~Volume(const class Volume*)",2,0,6,0,0,0
"volume.h",24,"Volume::~Volume(const class Volume*)",4,0,20,0,0,0
"volume.h",24,"Volume::~Volume(const class Volume*)",4,0,17,0,0,0
,0,"Volume::~Volume(const class Volume*) (always inlined)",0,0,0,0,0,0
,0,"VolumeShortcut::VolumeShortcut(const class VolumeShortcut*, enum String, long int, enum PatchSource) (always inlined)",0,0,0,0,0,0
"volume.h",27,"VolumeShortcut::writeCurrentValue(const class VolumeShortcut*)",2,0,7,0,0,0
"menu_item.h",54,"VolumeShortcut::~VolumeShortcut(const class VolumeShortcut*)",1,0,1,0,0,0
"volume.h",23,"VolumeShortcut::~VolumeShortcut(const class VolumeShortcut*)",2,0,6,0,0,0
,0,"vorr_s16(short int[1], short int[1]) (always inlined)",0,0,0,0,0,0
,0,"vpadd_s32(int[2], int[2]) (always inlined)",0,0,0,0,0,0
,0,"vqdmlal_s16(int[1], short int[1], short int[1]) (always inlined)",0,0,0,0,0,0
,0,"vqdmulhq_n_s16(short int[8], short int) (always inlined)",0,0,0,0,0,0
,0,"vqdmulhq_s32(int[4], int[4]) (always inlined)",0,0,0,0,0,0
,0,"vqdmull_s16(short int[1], short int[1]) (always inlined)",0,0,0,0,0,0
,0,"vqrdmulhq_n_s32(int[1], long int) (always inlined)",0,0,0,0,0,0
,0,"vqrdmulhq_s32(int[4], int[4]) (always inlined)",0,0,0,0,0,0
,0,"vrev64q_s32(int[4]) (always inlined)",0,0,0,0,0,0
,0,"vset_lane_s16(short int, short int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vset_lane_u16(short unsigned int, short unsigned int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vsetq_lane_s32(long int, int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vshll_n_s16(short int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vshlq_n_s32(int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vshlq_n_u32(unsigned int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vshr_n_u16(short unsigned int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vshrn_n_s32(int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vshrn_n_u32(unsigned int[1], const int) (always inlined)",0,0,0,0,0,0
,0,"vsnprintf_(char*, unsigned int, const char*, struct __va_list) (always inlined)",0,0,0,0,0,0
,0,"vst1q_s32(long int*, int[1]) (always inlined)",0,0,0,0,0,0
,0,"vst2q_s32(long int*, struct int32x4x2_t) (always inlined)",0,0,0,0,0,0
,0,"vsub_f32(float[2], float[2]) (always inlined)",0,0,0,0,0,0
,0,"vsub_s16(short int[1], short int[1]) (always inlined)",0,0,0,0,0,0
,0,"vsubq_s16(short int[8], short int[8]) (always inlined)",0,0,0,0,0,0
,0,"vsubq_s32(int[4], int[4]) (always inlined)",0,0,0,0,0,0
,0,"vtrnq_s32(int[4], int[4]) (always inlined)",0,0,0,0,0,0
,0,"vzipq_s32(int[4], int[4]) (always inlined)",0,0,0,0,0,0
,0,"WaveformBasicNavigator::getMaxZoom(const class WaveformBasicNavigator*) (always inlined)",0,0,0,0,0,0
,0,"WaveformBasicNavigator::isZoomedIn(const class WaveformBasicNavigator*) (always inlined)",0,0,0,0,0,0
,0,"WaveformBasicNavigator::opened(const class WaveformBasicNavigator*, class SampleHolder*) (always inlined)",0,0,0,0,0,0
"waveform_basic_navigator.cpp",241,"WaveformBasicNavigator::potentiallyAdjustScrollPosition(bool, const class WaveformBasicNavigator*)",9,0,26,0,0,0
,0,"WaveformBasicNavigator::scroll(const class WaveformBasicNavigator*, long int, bool, struct MarkerColumn*) (always inlined)",0,0,0,0,0,0
"waveform_basic_navigator.cpp",54,"WaveformBasicNavigator::zoom(long int, bool, struct MarkerColumn*, enum MarkerType, const class WaveformBasicNavigator*)",58,0,255,0,0,0
"waveform_renderer.cpp",597,"WaveformRenderer::drawColBar(long int, long int, long int, class RGB[18]*, long int, class optional<RGB>, const class WaveformRenderer*)",19,0,65,0,0,0
"waveform_renderer.cpp",225,"WaveformRenderer::findPeaksPerCol(class Sample*, long long int, long long unsigned int, struct WaveformRenderData*, class SampleRecorder*, long int, long int, const class WaveformRenderer*)",153,0,562,0,0,0
"waveform_renderer.cpp",584,"WaveformRenderer::getColBarPositions(long int, struct WaveformRenderData*, long int*, long int*, long int, long int, const class WaveformRenderer*)",8,0,37,0,0,0
"waveform_renderer.cpp",114,"WaveformRenderer::getColBrightnessForSingleRow(long int, long int, struct WaveformRenderData*, const class WaveformRenderer*)",6,0,25,0,0,0
"waveform_renderer.cpp",45,"WaveformRenderer::renderFullScreen(class Sample*, long long unsigned int, long long unsigned int, class RGB[18]*, struct WaveformRenderData*, class SampleRecorder*, class optional<RGB>, bool, long int, const class WaveformRenderer*)",8,0,45,0,0,0
"waveform_renderer.cpp",633,"WaveformRenderer::renderOneCol(class Sample*, long int, class RGB[18]*, struct WaveformRenderData*, bool, class optional<RGB>, const class WaveformRenderer*)",9,0,37,0,0,0
,0,"WaveformRenderer::renderOneColForCollapseAnimation(const class WaveformRenderer*, long int, long int, long int, long int, class RGB[18]*, struct WaveformRenderData*, class optional<RGB>, bool, long int, long int) (always inlined)",0,0,0,0,0,0
"waveform_renderer.cpp",204,"WaveformRenderer::renderOneColForCollapseAnimationInterpolation(long int, long int, long int, long int, long int, class optional<RGB>, class RGB[18]*, const class WaveformRenderer*)",11,0,27,0,0,0
,0,"WaveformRenderer::renderOneColForCollapseAnimationZoomedOut(const class WaveformRenderer*, long int, long int, long int, long int, long int, class RGB[18]*, struct WaveformRenderData*, class optional<RGB>, bool, long int, long int) (always inlined)",0,0,0,0,0,0
"sound.h",199,"WaveIndex::isRelevant(const class WaveIndex*, class ModControllableAudio*, long int)",1,0,12,0,0,0
,0,"WaveIndex::WaveIndex(const class WaveIndex*, enum String, enum String, long int) (always inlined)",0,0,0,0,0,0
"wave_index.h",23,"WaveIndex::~WaveIndex(const class WaveIndex*)",4,0,20,0,0,0
"wave_index.h",23,"WaveIndex::~WaveIndex(const class WaveIndex*)",4,0,17,0,0,0
,0,"WaveIndex::~WaveIndex(const class WaveIndex*) (always inlined)",0,0,0,0,0,0
,0,"WaveTable::bandDataBeingStolen(const class WaveTable*, class WaveTableBandData*) (always inlined)",0,0,0,0,0,0
"wave_table.cpp",51,"WaveTable::deleteAllBandsAndData(const class WaveTable*)",6,0,22,0,0,0
"wave_table.cpp",909,"WaveTable::doRenderingLoop(long int* restrict, const long int*, long int, long unsigned int, long unsigned int, long unsigned int, long int, const short int* restrict, class WaveTableBand* restrict, const class WaveTable*)",31,0,82,0,0,0
"wave_table.cpp",813,"WaveTable::doRenderingLoopSingleCycle(long int* restrict, const long int*, long unsigned int, long unsigned int, const short int* restrict, class WaveTableBand* restrict, const class WaveTable*)",22,0,58,0,0,0
"resizeable_array.h",56,"WaveTable::numReasonsDecreasedToZero(const class WaveTable*, const char*)",10,0,49,0,0,0
"resizeable_array.h",56,"WaveTable::numReasonsIncreasedFromZero(const class WaveTable*)",5,0,22,0,0,0
,0,"WaveTable::render(const class WaveTable*, long int* restrict, long int, long unsigned int, long unsigned int, bool, long unsigned int, long unsigned int, long unsigned int, long unsigned int, long int, long int) (always inlined)",0,0,0,0,0,0
"wave_table.cpp",144,"WaveTable::setup(const class WaveTable*, class Sample*, long int, long unsigned int, long unsigned int, long int, long int, class WaveTableReader*)",192,0,1968,0,0,0
,0,"WaveTable::WaveTable(const class WaveTable*) (always inlined)",0,0,0,0,0,0
"wave_table.cpp",46,"WaveTable::~WaveTable(const class WaveTable*)",2,0,8,0,0,0
"wave_table.cpp",46,"WaveTable::~WaveTable(const class WaveTable*)",5,0,18,0,0,0
"wave_table.cpp",36,"WaveTableBand::~WaveTableBand(const class WaveTableBand*)",5,0,9,0,0,0
"wave_table_band_data.cpp",50,"WaveTableBandData::getAppropriateQueue(const class WaveTableBandData*)",1,0,2,0,0,0
"wave_table_band_data.cpp",28,"WaveTableBandData::mayBeStolen(const class WaveTableBandData*, void*)",1,0,11,0,0,0
"wave_table_band_data.cpp",37,"WaveTableBandData::steal(const class WaveTableBandData*, const char*)",7,0,44,0,0,0
,0,"WaveTableBandData::WaveTableBandData(const class WaveTableBandData*, class WaveTable*) (always inlined)",0,0,0,0,0,0
"wave_table_band_data.h",25,"WaveTableBandData::~WaveTableBandData(const class WaveTableBandData*)",2,0,8,0,0,0
"wave_table_band_data.h",25,"WaveTableBandData::~WaveTableBandData(const class WaveTableBandData*)",2,0,5,0,0,0
,0,"WaveTableBandData::~WaveTableBandData(const class WaveTableBandData*) (always inlined)",0,0,0,0,0,0
,0,"WaveTableHolder::WaveTableHolder(const class WaveTableHolder*) (always inlined)",0,0,0,0,0,0
"wave_table_holder.h",24,"WaveTableHolder::~WaveTableHolder(const class WaveTableHolder*)",1,0,10,0,0,0
"wave_table_holder.h",24,"WaveTableHolder::~WaveTableHolder(const class WaveTableHolder*)",1,0,7,0,0,0
,0,"WaveTableHolder::~WaveTableHolder(const class WaveTableHolder*) (always inlined)",0,0,0,0,0,0
"wave_table_reader.cpp",25,"WaveTableReader::readBytesPassedErrorChecking(const class WaveTableReader*, char*, long int)",4,0,26,0,0,0
"wave_table_reader.cpp",42,"WaveTableReader::readNewCluster(const class WaveTableReader*)",2,0,18,0,0,0
,0,"WaveTableReader::WaveTableReader(const class WaveTableReader*) (always inlined)",0,0,0,0,0,0
"width.h",32,"Width::getName(const class Width*)",3,0,11,0,0,0
"width.h",41,"Width::getTitle(const class Width*)",3,0,11,0,0,0
"width.h",28,"Width::readCurrentValue(const class Width*)",4,0,14,0,0,0
,0,"Width::Width(const class Width*, enum String, enum String) (always inlined)",0,0,0,0,0,0
"value.h",42,"Width::writeCurrentValue(const class Width*)",3,0,10,0,0,0
"width.h",25,"Width::~Width(const class Width*)",2,0,6,0,0,0
"menu_item.h",54,"Width::~Width(const class Width*)",1,0,1,0,0,0
,0,"with_errno",0,0,9,0,0,0
,0,"with_errnof",0,0,9,0,0,0
,0,"write_only_status(unsigned char, long unsigned int, long unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
,0,"write_status(unsigned char, unsigned char, long unsigned int, long unsigned int, unsigned char) (always inlined)",0,0,0,0,0,0
"midi_device_manager.cpp",455,"writeDevicesToFile(class StorageManager&)",31,0,173,0,0,0
,0,"writeDevicesToFile(class StorageManager&) (always inlined)",0,0,0,0,0,0
,0,"writeInt16(char**, short unsigned int) (always inlined)",0,0,0,0,0,0
,0,"writeInt32(char**, long unsigned int) (always inlined)",0,0,0,0,0,0
,0,"xflow",0,0,10,0,0,0
,0,"xflowf",0,0,6,0,0,0
"storage_manager.cpp",1639,"XMLDeserializer::exitTag(const class XMLDeserializer*, const char*)",14,0,44,0,0,0
"storage_manager.cpp",1639,"XMLDeserializer::exitTag(const class XMLDeserializer*, const char*)",16,0,44,0,0,0
"storage_manager.cpp",1090,"XMLDeserializer::getIntoAttributeValue(const class XMLDeserializer*)",10,0,63,0,0,0
"storage_manager.cpp",1552,"XMLDeserializer::getNumCharsRemainingInValue(const class XMLDeserializer*)",4,0,23,0,0,0
,0,"XMLDeserializer::openXMLFile(const class XMLDeserializer*, struct FilePointer*, const char*, const char*, bool) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",1562,"XMLDeserializer::prepareToReadTagOrAttributeValueOneCharAtATime(const class XMLDeserializer*)",5,0,22,0,0,0
,0,"XMLDeserializer::prepareToReadTagOrAttributeValueOneCharAtATime(const class XMLDeserializer*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",1146,"XMLDeserializer::readAttributeValue(const class XMLDeserializer*)",3,0,15,0,0,0
,0,"XMLDeserializer::readAttributeValue(const class XMLDeserializer*) (always inlined)",0,0,0,0,0,0
,0,"XMLDeserializer::readAttributeValueInt(const class XMLDeserializer*) (always inlined)",0,0,0,0,0,0
,0,"XMLDeserializer::readAttributeValueString(const class XMLDeserializer*, class String*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",1625,"XMLDeserializer::readCharXML(const class XMLDeserializer*, char*)",5,0,15,0,0,0
,0,"XMLDeserializer::readCharXML(const class XMLDeserializer*, char*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",1497,"XMLDeserializer::readHexBytesUntil(const class XMLDeserializer*, unsigned char*, long int, char)",8,0,51,0,0,0
"storage_manager.cpp",1362,"XMLDeserializer::readIntUntilChar(const class XMLDeserializer*, char)",10,0,47,0,0,0
"storage_manager.cpp",928,"XMLDeserializer::readNextAttributeName(const class XMLDeserializer*)",27,0,148,0,0,0
"storage_manager.cpp",1341,"XMLDeserializer::readNextCharOfTagOrAttributeValue(const class XMLDeserializer*)",5,0,24,0,0,0
"storage_manager.cpp",1283,"XMLDeserializer::readNextCharsOfTagOrAttributeValue(const class XMLDeserializer*, long int)",17,0,79,0,0,0
"storage_manager.cpp",1034,"XMLDeserializer::readNextTagOrAttributeName(const class XMLDeserializer*)",13,0,49,0,0,0
"storage_manager.cpp",1211,"XMLDeserializer::readStringUntilChar(const class XMLDeserializer*, class String*, char)",13,0,48,0,0,0
"storage_manager.cpp",868,"XMLDeserializer::readTagName(const class XMLDeserializer*)",18,0,67,0,0,0
"storage_manager.cpp",1417,"XMLDeserializer::readTagOrAttributeValue(const class XMLDeserializer*)",1,0,9,0,0,0
"storage_manager.cpp",1402,"XMLDeserializer::readTagOrAttributeValue(const class XMLDeserializer*, const class XMLDeserializer*)",4,0,20,0,0,0
"storage_manager.cpp",1446,"XMLDeserializer::readTagOrAttributeValueHex(const class XMLDeserializer*, long int)",6,0,33,0,0,0
"storage_manager.cpp",1454,"XMLDeserializer::readTagOrAttributeValueHexBytes(const class XMLDeserializer*, unsigned char*, long int)",7,0,47,0,0,0
"storage_manager.cpp",1424,"XMLDeserializer::readTagOrAttributeValueInt(const class XMLDeserializer*)",6,0,30,0,0,0
"storage_manager.cpp",1526,"XMLDeserializer::readTagOrAttributeValueString(const class XMLDeserializer*, class String*)",10,0,39,0,0,0
"storage_manager.cpp",1243,"XMLDeserializer::readUntilChar(const class XMLDeserializer*, char)",16,0,72,0,0,0
,0,"XMLDeserializer::readXMLFileCluster(const class XMLDeserializer*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",1585,"XMLDeserializer::readXMLFileClusterIfNecessary(const class XMLDeserializer*)",10,0,33,0,0,0
,0,"XMLDeserializer::readXMLFileClusterIfNecessary(const class XMLDeserializer*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",1194,"XMLDeserializer::skipUntilChar(const class XMLDeserializer*, char)",5,0,28,0,0,0
"storage_manager.cpp",1737,"XMLDeserializer::tryReadingFirmwareTagFromFile(const char*, bool, const class XMLDeserializer*)",20,0,71,0,0,0
"storage_manager.cpp",1178,"XMLDeserializer::xmlReadDone(const class XMLDeserializer*)",7,0,21,0,0,0
,0,"XMLDeserializer::xmlReadDone(const class XMLDeserializer*) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",860,"XMLDeserializer::~XMLDeserializer(const class XMLDeserializer*)",2,0,8,0,0,0
"storage_manager.cpp",860,"XMLDeserializer::~XMLDeserializer(const class XMLDeserializer*)",4,0,26,0,0,0
"storage_manager.cpp",772,"XMLSerializer::closeFileAfterWriting(const class XMLSerializer*, const char*, const char*, const char*)",23,0,78,0,0,0
"storage_manager.cpp",727,"XMLSerializer::closeTag(const class XMLSerializer*)",4,0,26,0,0,0
"storage_manager.cpp",752,"XMLSerializer::printIndents(const class XMLSerializer*)",2,0,18,0,0,0
"storage_manager.cpp",604,"XMLSerializer::write(const class XMLSerializer*, const char*)",15,0,51,0,0,0
"storage_manager.cpp",700,"XMLSerializer::writeAttribute(const class XMLSerializer*, const char*, const char*, bool)",8,0,41,0,0,0
"storage_manager.cpp",661,"XMLSerializer::writeAttribute(const class XMLSerializer*, const char*, long int, bool)",3,0,18,0,0,0
"storage_manager.cpp",671,"XMLSerializer::writeAttributeHex(const class XMLSerializer*, const char*, long int, long int, bool)",3,0,21,0,0,0
"storage_manager.cpp",678,"XMLSerializer::writeAttributeHexBytes(const class XMLSerializer*, const char*, unsigned char*, long int, bool)",11,0,57,0,0,0
"storage_manager.cpp",742,"XMLSerializer::writeClosingTag(const class XMLSerializer*, const char*, bool)",6,0,28,0,0,0
"storage_manager.cpp",715,"XMLSerializer::writeOpeningTag(const class XMLSerializer*, const char*, bool)",2,0,12,0,0,0
"storage_manager.cpp",720,"XMLSerializer::writeOpeningTagBeginning(const class XMLSerializer*, const char*)",4,0,21,0,0,0
"storage_manager.cpp",733,"XMLSerializer::writeOpeningTagEnd(bool, const class XMLSerializer*, bool)",2,0,7,0,0,0
"storage_manager.cpp",734,"XMLSerializer::writeOpeningTagEnd(const class XMLSerializer*, bool)",1,0,5,0,0,0
,0,"XMLSerializer::writeOpeningTagEnd(const class XMLSerializer*, bool) (always inlined)",0,0,0,0,0,0
"storage_manager.cpp",648,"XMLSerializer::writeTag(const class XMLSerializer*, const char*, const char*)",8,0,47,0,0,0
"storage_manager.cpp",642,"XMLSerializer::writeTag(const class XMLSerializer*, const char*, long int)",3,0,17,0,0,0
"storage_manager.cpp",759,"XMLSerializer::writeXMLBufferToFile(const class XMLSerializer*)",4,0,21,0,0,0
"storage_manager.cpp",597,"XMLSerializer::~XMLSerializer(const class XMLSerializer*)",2,0,8,0,0,0
"storage_manager.cpp",597,"XMLSerializer::~XMLSerializer(const class XMLSerializer*)",4,0,26,0,0,0
"zone_num_member_channels.cpp",30,"ZoneNumMemberChannels::getMaxValue(const class ZoneNumMemberChannels*)",6,0,22,0,0,0
,0,"ZoneNumMemberChannels::getPort(const class ZoneNumMemberChannels*) (always inlined)",0,0,0,0,0,0
"zone_num_member_channels.h",35,"ZoneNumMemberChannels::getTitle(const class ZoneNumMemberChannels*)",1,0,6,0,0,0
"zone_num_member_channels.cpp",57,"ZoneNumMemberChannels::readCurrentValue(const class ZoneNumMemberChannels*)",5,0,16,0,0,0
"zone_num_member_channels.cpp",67,"ZoneNumMemberChannels::writeCurrentValue(const class ZoneNumMemberChannels*)",9,0,32,0,0,0
"zone_num_member_channels.h",25,"ZoneNumMemberChannels::~ZoneNumMemberChannels(const class ZoneNumMemberChannels*)",2,0,6,0,0,0
"menu_item.h",54,"ZoneNumMemberChannels::~ZoneNumMemberChannels(const class ZoneNumMemberChannels*)",1,0,1,0,0,0
"zone_selector.cpp",26,"ZoneSelector::beginSession(const class ZoneSelector*, class MenuItem*)",3,0,4,0,0,0
"zone_selector.h",34,"ZoneSelector::getOptions(const class ZoneSelector*)",4,0,45,0,0,0
"value.h",35,"ZoneSelector::readCurrentValue(const class ZoneSelector*)",1,0,3,0,0,0
"zone_selector.cpp",33,"ZoneSelector::selectButtonPress(const class ZoneSelector*)",1,0,2,0,0,0
"value.h",42,"ZoneSelector::writeCurrentValue(const class ZoneSelector*)",1,0,3,0,0,0
"zone_selector.h",25,"ZoneSelector::~ZoneSelector(const class ZoneSelector*)",2,0,6,0,0,0
"menu_item.h",54,"ZoneSelector::~ZoneSelector(const class ZoneSelector*)",1,0,1,0,0,0
